{"version":3,"sources":["utils/api-connector.ts","components/DevPanel.tsx","components/Header.tsx","utils/context.ts","components/StatusName.tsx","components/BalancesTable.tsx","components/HistoryTable.tsx","components/RequestsTable.tsx","components/ReviewDialog.tsx","components/SettingsDialog.tsx","components/TabPanel.tsx","views/InstructorView.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/helpers.ts","utils/contants.ts"],"names":["config","EnvConfig","getEnvironment","getInfo","axios","get","apiUrl","sessionId","res","data","console","error","getSettings","addSettings","settings","body","post","updateSettings","put","getAllBalances","getSubmittedRequests","updateRequest","updateData","log","DevPanel","props","useState","expired","setExpired","appInfo","setAppInfo","useEffect","then","info","includes","Box","position","bottom","p","Card","sx","border","textAlign","Typography","Header","mt","variant","AppContext","createContext","contextId","isInstructor","linkId","username","darkMode","baseColor","nameConfig","SUBMITTED","icon","Info","color","text","tooltip","ACCEPTED","CheckCircle","REJECTED","Cancel","StatusName","status","iconOnly","display","alignItems","Tooltip","title","ml","BalancesTable","initialTokens","requestMap","rows","setTabPosition","TableContainer","component","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","length","map","row","index","maxWidth","learnerId","user_id","minHeight","justifyContent","alignContent","IconButton","onClick","learner_name","tokens_used","colSpan","HistoryTable","openReviewDialog","statusColors","getStatusColors","useTheme","borderLeft","status_name","formatDbDate","updated_at","scope","category_name","Button","request_id","RequestsTable","created_at","overflow","textOverflow","whiteSpace","learner_comment","ReviewDialog","handleClose","handleSave","open","requestRow","actionStatus","setActionStatus","comment","setComment","undefined","Dialog","onClose","onSubmit","e","preventDefault","submission","instructor_comment","DialogTitle","DialogContent","mb","DialogContentText","mr","FormLabel","fontWeight","token_cost","flexDirection","pl","TextField","disabled","fullWidth","value","multiline","minRows","maxRows","FormControl","RadioGroup","id","name","onChange","newStatus","target","FormControlLabel","control","Radio","required","label","commentVal","DialogActions","type","SettingsDialog","useForm","defaultValues","categories","dbAction","sort_order","register","handleSubmit","setValue","errors","formState","useFieldArray","fields","append","move","update","remove","initValues","useCallback","formattedDate","DateTime","fromFormat","use_by_date","DB_DATE_TIME_FORMAT","toISODate","configuration_id","initial_tokens","notifications_pref","settingsToSubmit","parseInt","forEach","category","i","category_id","width","InputLabel","htmlFor","autoFocus","margin","size","InputLabelProps","shrink","InputProps","inputProps","style","pattern","min","helperText","Checkbox","defaultChecked","placement","InfoOutlined","fontSize","disableRipple","moveCategoryUp","KeyboardArrowUp","moveCategoryDown","KeyboardArrowDown","placeholder","is_used","filter","startIcon","Add","TabPanel","children","other","role","hidden","InstructorView","tabPosition","reviewDialogOpen","setReviewDialogOpen","settingsDialogOpen","setSettingsDialogOpen","setSettings","Map","setRequestMap","balanceRows","setBalanceRows","requestRows","setRequestRows","historyRows","setHistoryRows","requestInReview","setRequestInReview","fetchAndAssembleData","newRequestMap","request","set","balances","sortedBalances","sortBalancesByPriority","fetchedSettings","fetchedRequestRows","sort","compareDateTime","newlySubmittedRequests","handleSaveSettingsDialog","newSettings","retrievedSettings","handleSaveReviewDialog","reviewData","Badge","badgeContent","NotificationImportant","Settings","borderBottom","borderColor","Tabs","event","newValue","Tab","a11yProps","requestId","find","reason","App","appConfig","setAppconfig","getAppConfig","defaultPrimary","palette","primary","main","theme","createTheme","mode","components","MuiTableCell","styleOverrides","head","ThemeProvider","CssBaseline","className","Provider","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","environment","overrides","APP_INFO_OVERRIDES","process","getSessionId","window","warning","success","compareStrings","a","b","compareLastNames","splitA","split","splitB","lastA","lastB","Date","getTime","pending","resolved","push","dateString","format","toLocaleString","DATETIME_MED","pre_build","local_build","deployed_build"],"mappings":"4TAgBMA,EAASC,IAAUC,eAEZC,EAAO,iDAAG,uHAEDC,IAAMC,IAAN,UACbL,EAAOM,OADM,2BACmBN,EAAOO,YAHzB,cAEbC,EAFa,yBAKZA,EAAIC,KAAKA,MALG,uCAOnBC,QAAQC,MAAR,MAPmB,kBAQZ,MARY,yDAAH,qDAYPC,EAAW,iDAAG,uHAELR,IAAMC,IAAN,UACbL,EAAOM,OADM,0CACkCN,EAAOO,YAHpC,cAEjBC,EAFiB,yBAKhBA,EAAIC,KAAKA,MALO,uCAOvBC,QAAQC,MAAR,MAPuB,kBAQhB,MARgB,yDAAH,qDAYXE,EAAW,iDAAG,WAAOC,GAAP,iGAEjBC,EAAOD,EAFU,SAGjBV,IAAMY,KAAN,UACDhB,EAAOM,OADN,0CAC8CN,EAAOO,WACzDQ,GALqB,wEASvBL,QAAQC,MAAR,MATuB,4EAAH,sDAcXM,EAAc,iDAAG,WAC5BH,GAD4B,iGAIpBC,EAAOD,EAJa,SAKpBV,IAAMc,IAAN,UACDlB,EAAOM,OADN,0CAC8CN,EAAOO,WACzDQ,GAPwB,wEAW1BL,QAAQC,MAAR,MAX0B,4EAAH,sDAgBdQ,EAAc,iDAAG,uHAERf,IAAMC,IAAN,UACbL,EAAOM,OADM,0CACkCN,EAAOO,YAHjC,cAEpBC,EAFoB,yBAKnBA,EAAIC,KAAKA,MAAQ,IALE,uCAO1BC,QAAQC,MAAR,MAP0B,kBAQnB,IARmB,yDAAH,qDAYdS,EAAoB,iDAAG,uHAEdhB,IAAMC,IAAN,UACbL,EAAOM,OADM,0CACkCN,EAAOO,YAH3B,cAE1BC,EAF0B,yBAKzBA,EAAIC,KAAKA,MAAQ,IALQ,uCAOhCC,QAAQC,MAAR,MAPgC,kBAQzB,IARyB,yDAAH,qDAYpBU,EAAa,iDAAG,WAAOC,GAAP,wFAC3BZ,QAAQa,IAAI,oBADe,SAGnBR,EAAOO,EAHY,SAInBlB,IAAMc,IAAN,UACDlB,EAAOM,OADN,0CAC8CN,EAAOO,WACzDQ,GANuB,wEAUzBL,QAAQC,MAAR,MAVyB,4EAAH,sD,OChDXa,MAlCf,SAAkBC,GAEhB,MAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,qBAAU,WACR5B,IAAU6B,MAAK,SAACC,IAEXA,GACgB,kBAATA,GACLA,EAAgBC,SAAS,oBAE5BxB,QAAQC,MAAM,mBACdiB,GAAW,KAEXE,EAAWG,GACXL,GAAW,SAGd,IAGD,cAACO,EAAA,EAAD,CAAKC,SAAU,WAAYC,OAAQ,EAAGC,EAAG,EAAzC,SACE,cAACC,EAAA,EAAD,CAAMC,GAAI,CAAEC,OAAQ,iBAApB,SACE,eAACN,EAAA,EAAD,CAAKG,EAAG,EAAGI,UAAU,SAArB,UACE,eAACC,EAAA,EAAD,mCAAkCzC,iBAClC,eAACyC,EAAA,EAAD,oCAA4Bd,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAStB,aAFvC,eAGeoB,EAAU,UAAY,gBC5B9BiB,MARf,SAAgBnB,GACd,OACE,cAACU,EAAA,EAAD,CAAKU,GAAI,EAAT,SACE,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,uBCLOC,EAAaC,wBAA0B,CAClD1C,OAAQ,GACR2C,UAAW,GACXC,cAAc,EACdC,OAAQ,GACR5C,UAAW,GACX6C,SAAU,GACVC,UAAU,EACVC,UAAW,K,iKCFPC,EAAyC,CAC7CC,UAAW,CACTC,KAAM,cAACC,EAAA,EAAD,CAAMC,MAAM,YAClBC,KAAM,UACNC,QAAS,iDAEXC,SAAU,CACRL,KAAM,cAACM,EAAA,EAAD,CAAaJ,MAAM,YACzBC,KAAM,WACNC,QAAS,6BAEXG,SAAU,CACRP,KAAM,cAACQ,EAAA,EAAD,CAAQN,MAAM,UACpBC,KAAM,WACNC,QAAS,8BAsBEK,MAjBf,SAAoBzC,GAClB,IAAQ0C,EAAqB1C,EAArB0C,OAAQC,EAAa3C,EAAb2C,SAEhB,OACE,eAACjC,EAAA,EAAD,CAAKkC,QAAS,OAAQC,WAAY,SAAlC,UACE,cAACnC,EAAA,EAAD,CAAKkC,QAAS,OAAQC,WAAY,SAAlC,SACE,cAACC,EAAA,EAAD,CAASC,MAAOjB,EAAWY,GAAQN,QAAnC,SACGN,EAAWY,GAAQV,UAGtBW,GACA,cAACzB,EAAA,EAAD,CAAYH,GAAI,CAAEiC,GAAI,GAAtB,SAA4BlB,EAAWY,GAAQP,WC+CxCc,MA9Df,SAAuBjD,GACrB,IAAQkD,EAAoDlD,EAApDkD,cAAeC,EAAqCnD,EAArCmD,WAAYC,EAAyBpD,EAAzBoD,KAAMC,EAAmBrD,EAAnBqD,eAoBzC,OACE,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO1C,GAAI,CAAE2C,SAAU,KAAO,aAAW,eAAzC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,2BACA,cAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,+BACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,8BAGJ,cAACC,EAAA,EAAD,UACIX,EAAKY,OAOLZ,EAAKa,KAAI,SAACC,EAAKC,GAAN,OACP,eAACP,EAAA,EAAD,CAEE7C,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IAFtD,UAIE,cAAC6C,EAAA,EAAD,CAAWC,MAAM,SAAS/C,GAAI,CAAEqD,SAAU,IAA1C,UA1CIC,EA2CQH,EAAII,QAzC1B,cAAC5D,EAAA,EAAD,CACEkC,QAAS,OACT2B,UAAW,GACXC,eAAgB,SAChBC,aAAc,SAJhB,SAOGtB,EAAWvE,IAAIyF,IACd,cAACK,EAAA,EAAD,CAAYC,QAAS,kBAAMtB,EAAe,IAA1C,SACE,cAAC,EAAD,CAAYX,OAAO,YAAYC,UAAU,WAkCrC,cAACkB,EAAA,EAAD,UAAYK,EAAIU,eAChB,cAACf,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACGZ,EAAgBgB,EAAIW,aAAe,IAEtC,cAAChB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BI,EAAIW,gBAXjC,UACUV,EADV,YACmBD,EAAII,UAvClB,IAACD,KA+BR,cAACT,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWiB,QAAS,EAAG/D,GAAI,CAAEE,UAAW,UAAxC,SACE,cAACC,EAAA,EAAD,2C,UCyBD6D,OA/Df,SAAsB/E,GACpB,IAAQoD,EAA2BpD,EAA3BoD,KAAM4B,EAAqBhF,EAArBgF,iBAERC,EAAeC,YAAgBC,eAErC,OACE,cAAC7B,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO1C,GAAI,CAAE2C,SAAU,KAAO,aAAW,eAAzC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,2BACA,cAACA,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBAGJ,cAACC,EAAA,EAAD,UACIX,EAAKY,OAOLZ,EAAKa,KAAI,SAACC,EAAKC,GAAN,OACP,eAACP,EAAA,EAAD,CAEE7C,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IAFtD,UAIE,cAAC6C,EAAA,EAAD,CACE9C,GAAI,CACFqE,WAAW,aAAD,OACRH,EAAaf,EAAImB,aADT,gBAFd,SAOGC,YAAapB,EAAIqB,cAEpB,cAAC1B,EAAA,EAAD,CAAWN,UAAU,KAAKiC,MAAM,MAAhC,SACGtB,EAAIU,eAEP,cAACf,EAAA,EAAD,UAAYK,EAAIuB,gBAChB,cAAC5B,EAAA,EAAD,UACE,cAAC,EAAD,CAAYnB,OAAQwB,EAAImB,gBAE1B,cAACxB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAAC4B,GAAA,EAAD,CACErE,QAAQ,YACRsD,QAAS,kBAAMK,EAAiBd,EAAIyB,aAFtC,wBArBJ,UACUxB,EADV,YACmBD,EAAIyB,gBARzB,cAAC/B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWiB,QAAS,EAAG/D,GAAI,CAAEE,UAAW,UAAxC,SACE,cAACC,EAAA,EAAD,qDCmCD0E,OA1Df,SAAuB5F,GACrB,IAAQoD,EAA2BpD,EAA3BoD,KAAM4B,EAAqBhF,EAArBgF,iBAEd,OACE,cAAC1B,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO1C,GAAI,CAAE2C,SAAU,KAAO,aAAW,eAAzC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,2BACA,cAACA,EAAA,EAAD,2BACA,cAACA,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBAGJ,cAACC,EAAA,EAAD,UACIX,EAAKY,OAOLZ,EAAKa,KAAI,SAACC,EAAKC,GAAN,OACP,eAACP,EAAA,EAAD,CAEE7C,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IAFtD,UAIE,cAAC6C,EAAA,EAAD,UAAYyB,YAAapB,EAAI2B,cAC7B,cAAChC,EAAA,EAAD,UAAYK,EAAIU,eAChB,cAACf,EAAA,EAAD,UAAYK,EAAIuB,gBAChB,cAAC5B,EAAA,EAAD,CACE9C,GAAI,CACFqD,SAAU,IACV0B,SAAU,SACVC,aAAc,WACdC,WAAY,UALhB,SAQG9B,EAAI+B,kBAEP,cAACpC,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAAC4B,GAAA,EAAD,CACErE,QAAQ,YACRsD,QAAS,kBAAMK,EAAiBd,EAAIyB,aAFtC,wBAlBJ,UACUxB,EADV,YACmBD,EAAIyB,gBARzB,cAAC/B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWiB,QAAS,EAAG/D,GAAI,CAAEE,UAAW,UAAxC,SACE,cAACC,EAAA,EAAD,+C,8GCyNDgF,OA/Nf,SAAsBlG,GACpB,IAAQmG,EAA8CnG,EAA9CmG,YAAaC,EAAiCpG,EAAjCoG,WAAYC,EAAqBrG,EAArBqG,KAAMC,EAAetG,EAAfsG,WAEvC,EAAwCrG,qBAAxC,mBAAOsG,EAAP,KAAqBC,EAArB,KACA,EAA8BvG,qBAA9B,mBAAOwG,EAAP,KAAgBC,EAAhB,KAqCA,OAnCApG,qBAAU,WACJ+F,IACFG,OAAgBG,GAChBD,OAAWC,MAEZ,CAACN,IA+BF,cAACO,GAAA,EAAD,CAAQP,KAAMA,EAAMQ,QAASV,EAA7B,SACGG,GACC,cAAC5F,EAAA,EAAD,CAAKG,EAAG,EAAR,SACE,uBAAMiG,SA/BG,SAACC,GAEhB,GADAA,EAAEC,iBACEV,GAAcC,EAAc,CAC9B,IAAMU,EAAgC,CACpCtB,WAAYW,EAAWX,WACvBN,YAAakB,GAEM,aAAjBA,IACFU,EAAWC,mBAAqBT,GAElCL,EAAWa,KAqBP,UACE,cAACE,GAAA,EAAD,6BACA,eAACC,GAAA,EAAD,WACE,cAAC1G,EAAA,EAAD,CAAK2G,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,0DAMF,eAAC5G,EAAA,EAAD,CAAKkC,QAAS,OAAQxB,GAAI,EAAGiG,GAAI,EAAGxE,WAAY,SAAhD,UACE,cAACnC,EAAA,EAAD,CAAK6G,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,uBAGJ,cAACvG,EAAA,EAAD,UAAaoE,YAAagB,EAAWT,iBAGvC,eAACnF,EAAA,EAAD,CAAKkC,QAAS,OAAQxB,GAAI,EAAGiG,GAAI,EAAGxE,WAAY,SAAhD,UACE,cAACnC,EAAA,EAAD,CAAK6G,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,4BAGJ,cAACvG,EAAA,EAAD,UAAaoF,EAAW1B,kBAG1B,eAAClE,EAAA,EAAD,CAAKkC,QAAS,OAAQxB,GAAI,EAAGiG,GAAI,EAAGxE,WAAY,SAAhD,UACE,cAACnC,EAAA,EAAD,CAAK6G,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,uBAGJ,eAACvG,EAAA,EAAD,WACGoF,EAAWb,cADd,KAC+Ba,EAAWoB,WAD1C,SAEGpB,EAAWoB,WAAa,GAAK,IAFhC,UAMF,eAAChH,EAAA,EAAD,CAAKkC,QAAS,OAAQ+E,cAAe,SAAUvG,GAAI,EAAGiG,GAAI,EAA1D,UACE,cAAC3G,EAAA,EAAD,CAAK2G,GAAI,EAAT,SACE,cAACG,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,wCAKJ,cAAC/G,EAAA,EAAD,CAAKkH,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,CACEC,UAAQ,EACRC,WAAS,EACT,aAAW,kDACXC,MAAO1B,EAAWL,iBAAmB,GACrCgC,WAAS,EACTC,QAAS,EACTC,QAAS,SAKa,cAA3B7B,EAAWjB,YACV,eAAC3E,EAAA,EAAD,WACE,eAAC0H,GAAA,EAAD,WACE,cAACZ,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,kCAIF,cAAC/G,EAAA,EAAD,CAAKkH,GAAI,EAAT,SACE,eAACS,GAAA,EAAD,CACEC,GAAG,oBACHC,KAAK,oBACL,kBAAgB,oBAChBC,SA3FK,SAACzB,GAC1B,IAAM0B,EAAY1B,EAAE2B,OAAOV,MACT,aAAdS,GACF/B,EAAW,IAEbF,EAAgBiC,IAkFE,UAME,cAACE,GAAA,EAAD,CACEX,MAAM,WACNY,QAAS,cAACC,GAAA,EAAD,CAAOC,UAAQ,IACxBC,MAAM,WAER,cAACJ,GAAA,EAAD,CACEX,MAAM,WACNY,QAAS,cAACC,GAAA,EAAD,CAAOC,UAAQ,IACxBC,MAAM,mBAKI,aAAjBxC,GACC,eAAC7F,EAAA,EAAD,CACEkC,QAAS,OACT+E,cAAe,SACfvG,GAAI,EACJiG,GAAI,EAJN,UAME,cAAC3G,EAAA,EAAD,CAAK2G,GAAI,EAAT,SACE,cAACG,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,qCAKJ,cAAC/G,EAAA,EAAD,CAAKkH,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,CACEE,WAAS,EACTe,UAAQ,EACR,aAAW,wDACXb,WAAS,EACT7E,KAAM,EACN4E,MAAOvB,EACP+B,SAxHI,SAACzB,GAC3B,IAAMiC,EAAajC,EAAE2B,OAAOV,MAC5BtB,EAAWsC,cA6HC,eAACtI,EAAA,EAAD,WAEE,eAACA,EAAA,EAAD,CAAKkC,QAAS,OAAQxB,GAAI,EAAGiG,GAAI,EAAGxE,WAAY,SAAhD,UACE,cAACnC,EAAA,EAAD,CAAK6G,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,oCAKJ,cAAC,EAAD,CAAY/E,OAAQ4D,EAAWjB,iBAEL,aAA3BiB,EAAWjB,aACV,eAAC3E,EAAA,EAAD,CACEkC,QAAS,OACT+E,cAAe,SACfvG,GAAI,EACJiG,GAAI,EAJN,UAOE,cAAC3G,EAAA,EAAD,CAAK2G,GAAI,EAAT,SACE,cAACG,GAAA,EAAD,UACE,cAACtG,EAAA,EAAD,CAAYuG,WAAY,OAAxB,qCAKJ,cAAC/G,EAAA,EAAD,CAAKkH,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,CACEC,UAAQ,EACRC,WAAS,EACT,aAAW,kDACXC,MAAO1B,EAAWY,oBAAsB,GACxCe,WAAS,EACTC,QAAS,EACTC,QAAS,eAQvB,eAACc,GAAA,EAAD,WACE,cAACvD,GAAA,EAAD,CAAQf,QAASwB,EAAa9E,QAAQ,WAAtC,SAC8B,cAA3BiF,EAAWjB,YAA8B,SAAW,UAE3B,cAA3BiB,EAAWjB,aACV,cAACK,GAAA,EAAD,CAAQrE,QAAQ,YAAY6H,KAAK,SAAjC,6B,8ECqKDC,OArXf,SAAwBnJ,GACtB,IAAQmG,EAA4CnG,EAA5CmG,YAAaC,EAA+BpG,EAA/BoG,WAAYC,EAAmBrG,EAAnBqG,KAAMhH,EAAaW,EAAbX,SAGvC,EAMI+J,aAAwB,CAC1BC,cAAe,CACbC,WAAY,CACV,CACE7D,cAAe,eACfiC,WAAY,EACZ6B,SAAU,MACVC,WAAY,GAEd,CACE/D,cAAe,kBACfiC,WAAY,EACZ6B,SAAU,MACVC,WAAY,OAlBlBZ,EADF,EACEA,QACAa,EAFF,EAEEA,SACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,SACaC,EALf,EAKEC,UAAaD,OAmBf,EAAiDE,aAAc,CAC7DlB,UACAL,KAAM,eAFAwB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,KAAMC,EAA9B,EAA8BA,OAAQC,EAAtC,EAAsCA,OAKhCC,EAAaC,uBACjB,SAAChL,GACC,IAAMiL,EAAgBC,YAASC,WAC7BnL,EAASoL,YACTC,KACAC,YACFhB,EAAS,mBAAoBtK,EAASuL,kBACtCjB,EAAS,iBAAkBtK,EAASwL,gBACpClB,EAAS,qBAAsBtK,EAASyL,oBACxCnB,EAAS,cAAeW,GACxBX,EAAS,aAActK,EAASiK,cAElC,CAACK,IAoEH,OAjEArJ,qBAAU,WACJjB,GAAYgH,GACd+D,EAAW/K,KAEZ,CAACA,EAAUgH,EAAM+D,IA8DlB,cAACxD,GAAA,EAAD,CAAQP,KAAMA,EAAMQ,QAASV,EAA7B,SACE,cAACzF,EAAA,EAAD,CAAKG,EAAG,EAAR,SACE,uBAAMiG,SAAU4C,GA3BL,SAAC1K,GAEhB,IAAM+L,EAAmC,CACvCH,iBAAgB,OAAEvL,QAAF,IAAEA,OAAF,EAAEA,EAAUuL,iBAC5BC,eACiC,kBAAxB7L,EAAK6L,eACR7L,EAAK6L,eACLG,SAAShM,EAAK6L,gBACpBJ,YAAazL,EAAKyL,YAClBK,mBAAoB9L,EAAK8L,mBACzBxB,WAAYtK,EAAKsK,YAGnByB,EAAiBzB,WAAW2B,SAAQ,SAACC,EAAUC,GAC7CD,EAAS1B,WAAa2B,EAClBD,EAASE,cAAgBF,EAAS3B,SACpC2B,EAAS3B,SAAW,SACV2B,EAASE,aAAgBF,EAAS3B,WAC5C2B,EAAS3B,SAAW,UAGxBnD,EAAW2E,MAMP,UACE,cAAC5D,GAAA,EAAD,kCACA,eAACC,GAAA,EAAD,WACG/H,GACC,cAACqB,EAAA,EAAD,CAAK2G,GAAI,EAAT,SACE,cAACC,GAAA,EAAD,oEAMJ,eAAC5G,EAAA,EAAD,CAAKkC,QAAS,OAAQxB,GAAI,EAAGiG,GAAI,EAAjC,UACE,cAAC3G,EAAA,EAAD,CAAKgD,SAAU,IAAK2H,MAAO,IAAK9D,GAAI,EAAGnG,GAAI,EAA3C,SACE,cAACkK,GAAA,EAAD,CAAYC,QAAQ,cAAcxK,GAAI,CAAEiF,WAAY,UAApD,SACE,cAAC9E,EAAA,EAAD,CAAYuG,WAAY,OAAxB,oEAKJ,cAAC/G,EAAA,EAAD,CAAKgD,SAAU,IAAK2H,MAAO,IAA3B,SACE,cAACxD,GAAA,EAAD,yBACE2D,WAAS,EACTC,OAAO,QACPC,KAAK,QACLpD,GAAG,cACHY,KAAK,SACLhK,QAAS0K,EAAOiB,eAChBc,gBAAiB,CAAEC,QAAQ,GAC3BC,WAAY,CACVC,WAAY,CACVC,MAAO,CAAE9K,UAAW,aAGpBwI,EAAS,iBAAkB,CAC7BX,UAAU,EACVkD,QAAS,WACTC,IAAK,KAhBT,IAkBEC,WACEtC,EAAOiB,gBAAkB,0CAMjC,eAACnK,EAAA,EAAD,CAAKkC,QAAS,OAAQyE,GAAI,EAA1B,UACE,cAAC3G,EAAA,EAAD,CAAKgD,SAAU,IAAK6D,GAAI,EAAGnG,GAAI,EAA/B,SACE,cAACkK,GAAA,EAAD,CAAYC,QAAQ,cAApB,SACE,cAACrK,EAAA,EAAD,CAAYuG,WAAY,OAAxB,mDAKJ,cAAC/G,EAAA,EAAD,UACE,cAACmH,GAAA,EAAD,yBACE4D,OAAO,QACPC,KAAK,QACLpD,GAAG,cACHY,KAAK,OACLhK,QAAS0K,EAAOa,YAChBkB,gBAAiB,CAAEC,QAAQ,IACvBnC,EAAS,cAAe,CAC1BX,UAAU,KARd,IAUEoD,WAAYtC,EAAOa,aAAe,+BAKxC,eAAC/J,EAAA,EAAD,CAAK2G,GAAI,EAAT,UACE,eAAC3G,EAAA,EAAD,CACEkC,QAAS,OACT4B,eAAgB,QAChB3B,WAAY,SAHd,UAKE,cAACnC,EAAA,EAAD,CAAK6G,GAAI,EAAT,SACE,cAAC+D,GAAA,EAAD,CAAYC,QAAQ,aAApB,SACE,cAACrK,EAAA,EAAD,CAAYuG,WAAY,OAAxB,sCAKJ,cAAC0E,GAAA,EAAD,aACEC,gBAAgB,EAChBN,WAAY,CACV,aAAc,4CAEZrC,EAAS,2BAGjB,cAAC/I,EAAA,EAAD,CAAK2G,GAAI,EAAT,SACE,cAACnG,EAAA,EAAD,CAAYG,QAAQ,QAApB,2DAMJ,eAACX,EAAA,EAAD,CAAKkC,QAAS,OAAQ+E,cAAe,SAArC,UACE,eAACjH,EAAA,EAAD,CAAKkC,QAAS,OAAd,UACE,cAAClC,EAAA,EAAD,CAAKgD,SAAU,IAAK6D,GAAI,EAAxB,SACE,cAAC+D,GAAA,EAAD,CAAYC,QAAQ,wBAApB,SACE,cAACrK,EAAA,EAAD,CAAYuG,WAAY,OAAxB,6BAGJ,eAAC/G,EAAA,EAAD,CACEgD,SAAU,IACV2H,MAAO,IACPzI,QAAS,OACTC,WAAY,SAJd,UAME,cAACC,EAAA,EAAD,CACEC,MAAM,sDACNsJ,UAAU,MAFZ,SAIE,cAACC,GAAA,EAAD,CACEvL,GAAI,CAAEwG,GAAI,GACVrF,MAAM,UACNqK,SAAS,YAGb,cAACjB,GAAA,EAAD,CAAYC,QAAQ,yBAApB,SACE,cAACrK,EAAA,EAAD,CAAYuG,WAAY,OAAxB,iCAIN,cAAC/G,EAAA,EAAD,CAAKkC,QAAS,OAAQ+E,cAAe,SAArC,SACGoC,EAAO9F,KAAI,SAACiH,EAAUC,GAAO,IAAD,gBAC3B,OACE,cAACzK,EAAA,EAAD,UAEyB,WAAtBwK,EAAS3B,UACR,eAAC7I,EAAA,EAAD,CAAKkC,QAAS,OAAd,UACE,eAAClC,EAAA,EAAD,WACE,cAACgE,EAAA,EAAD,CACEgH,KAAK,QACL5D,SAAgB,IAANqD,EACVqB,eAAa,EACb7H,QAAS,kBAvMd,SAACwG,GACtBlB,EAAKkB,EAAGA,EAAI,GAsM6BsB,CAAetB,IAJhC,SAME,cAACuB,GAAA,EAAD,CAAiBH,SAAS,YAE5B,cAAC7H,EAAA,EAAD,CACEgH,KAAK,QACL5D,SAAUqD,IAAMpB,EAAO/F,OAAS,EAChCwI,eAAa,EACb7H,QAAS,kBA3MZ,SAACwG,GACxBlB,EAAKkB,EAAGA,EAAI,GA0M6BwB,CAAiBxB,IAJlC,SAME,cAACyB,GAAA,EAAD,CAAmBL,SAAS,eAGhC,cAAC7L,EAAA,EAAD,CAAKgD,SAAU,IAAK6D,GAAI,EAAxB,SACE,cAACM,GAAA,EAAD,aACE4D,OAAO,QACPC,KAAK,QACLpD,GAAE,wBAAmB6C,GACrBjC,KAAK,OACL2D,YAAY,yBACZlB,gBAAiB,CAAEC,QAAQ,GAC3BC,WAAY,CACVC,WAAY,CAAEC,MAAO,CAAErI,SAAU,OAEnCwI,YACE,UAAAtC,EAAON,kBAAP,mBAAoB6B,UAApB,eAAwB1F,gBACxB,8BAGFvG,QAAQ,UAAC0K,EAAON,kBAAR,iBAAC,EAAoB6B,UAArB,QAAC,EAAwB1F,gBAC7BgE,EAAS,cAAD,OAAe0B,EAAf,kBAAkC,CAC5CrC,UAAU,QAIhB,eAACpI,EAAA,EAAD,CACEkC,QAAS,OACTC,WAAY,QACZa,SAAU,IAHZ,UAKE,cAAChD,EAAA,EAAD,CAAKgD,SAAU,IAAK2H,MAAO,IAA3B,SACE,cAACxD,GAAA,EAAD,aACE4D,OAAO,QACPC,KAAK,QACLpD,GAAE,yBAAoB6C,GACtBjC,KAAK,SACLyC,gBAAiB,CAAEC,QAAQ,GAC3BC,WAAY,CACVC,WAAY,CACVC,MAAO,CAAE9K,UAAW,YAGxB/B,QAAQ,UAAC0K,EAAON,kBAAR,iBAAC,EAAoB6B,UAArB,QAAC,EAAwBzD,YACjCwE,YACE,UAAAtC,EAAON,kBAAP,mBAAoB6B,UAApB,eAAwBzD,aACxB,mCAEE+B,EAAS,cAAD,OAAe0B,EAAf,eAA+B,CACzCrC,UAAU,EACVkD,QAAS,WACTC,IAAK,QAIX,cAACvL,EAAA,EAAD,CAAKsC,GAAI,EAAG5B,GAAI,EAAhB,SACE,cAAC0B,EAAA,EAAD,CACEC,MACEmI,EAAS4B,QACL,8DACA,GAJR,SAOE,8BACE,cAACpI,EAAA,EAAD,CACEoD,SACEoD,EAAS4B,SAnQnB/C,EAAOgD,QAAO,SAAC7B,GACrC,MAA6B,WAAtBA,EAAS3B,YAEKvF,QAAU,EAmQD9B,MAAM,UACNyC,QAAS,WAhQd,IAACR,EACxB4F,EADwB5F,EAgQwCgH,GA/PlDC,aAChBrB,EAAO5F,GAAOoF,SAAW,SACzBW,EAAO/F,EAAD,YAAC,eACF4F,EAAO5F,IADN,IAEJoF,SAAU,aAGZY,EAAOhG,IAkPqB,SAQE,cAAC3B,EAAA,EAAD,mBA1FN0I,EAAS5C,SAsGzB,cAAC5H,EAAA,EAAD,CAAKU,GAAI,EAAT,SACE,cAACsE,GAAA,EAAD,CACErE,QAAQ,YACR2L,UAAW,cAACC,GAAA,EAAD,IACXtI,QA/RU,WACxBqF,EAAO,CAAER,WAAYO,EAAO/F,UA2RhB,kCAUN,eAACiF,GAAA,EAAD,YACW,OAAR5J,QAAQ,IAARA,OAAA,EAAAA,EAAUuL,mBACT,cAAClF,GAAA,EAAD,CAAQf,QAASwB,EAAa9E,QAAQ,WAAtC,oBAIF,cAACqE,GAAA,EAAD,CAAQrE,QAAQ,YAAY6H,KAAK,SAAjC,6B,yCCtXGgE,OAhBf,SAAkBlN,GAChB,IAAQmN,EAAqCnN,EAArCmN,SAAUnF,EAA2BhI,EAA3BgI,MAAO7D,EAAoBnE,EAApBmE,MAAUiJ,EAAnC,aAA6CpN,EAA7C,IAEA,OACE,6CACEqN,KAAK,WACLC,OAAQtF,IAAU7D,EAClBmE,GAAE,0BAAqBnE,GACvB,uCAA+BA,IAC3BiJ,GALN,aAOGpF,IAAU7D,GAAS,cAACzD,EAAA,EAAD,CAAKK,GAAI,CAAEF,EAAG,GAAd,SAAoBsM,QC4M/BI,OAlMf,WACE,MAAsCtN,mBAAS,GAA/C,mBAAOuN,EAAP,KAAoBnK,EAApB,KACA,EAAgDpD,oBAAS,GAAzD,mBAAOwN,EAAP,KAAyBC,EAAzB,KACA,EAAoDzN,oBAAS,GAA7D,mBAAO0N,EAAP,KAA2BC,EAA3B,KACA,EAAgC3N,qBAAhC,mBAAOZ,EAAP,KAAiBwO,EAAjB,KACA,EAAoC5N,mBAA+B,IAAI6N,KAAvE,mBAAO3K,EAAP,KAAmB4K,EAAnB,KACA,EAAsC9N,mBAA6B,IAAnE,mBAAO+N,EAAP,KAAoBC,EAApB,KACA,EAAsChO,mBAA6B,IAAnE,mBAAOiO,EAAP,KAAoBC,EAApB,KACA,EAAsClO,mBAA4B,IAAlE,mBAAOmO,EAAP,KAAoBC,EAApB,KACA,GAA8CpO,qBAA9C,qBAAOqO,GAAP,MAAwBC,GAAxB,MAEAjO,qBAAU,WACRkO,OACC,IAEHlO,qBAAU,WAER,IAAMmO,EAAgB,IAAIX,IAC1BI,EAAYjD,SAAQ,SAACyD,GACnBD,EAAcE,IAAID,EAAQpK,SAAS,MAErCyJ,EAAcU,KACb,CAACP,IAEJ5N,qBAAU,WAEJ6C,EAAWuI,MACbhM,IAAiBa,MAAK,SAACqO,GACrB,IAAMC,EAAiBC,YAAuBF,EAAUzL,GACxD8K,EAAeY,QAGlB,CAAC1L,IAEJ7C,qBAAU,WAES,OAAbjB,GACFuO,GAAsB,KAEvB,CAACvO,IAMJ,IAAMmP,GAAoB,iDAAG,kHAEGrP,IAFH,cAErB4P,EAFqB,OAG3BlB,EAAYkB,GAHe,SAMMpP,IANN,QAMrBqP,EANqB,QAQRC,KAAKC,KAElBC,EAAyBH,EAAmBjC,QAAO,SAAC7I,GACxD,MAA2B,cAApBA,EAAImB,eAGb8I,EAAegB,GACfd,EAAeW,GAfY,4CAAH,qDA0DpBI,GAAwB,iDAAG,WAAOC,GAAP,qFAE3BA,EAAYzE,iBAFe,gCAGvBpL,EAAe6P,GAHQ,6CAKvBjQ,EAAYiQ,GALW,cAQ/BzB,GAAsB,GARS,UAUCzO,IAVD,QAUzBmQ,EAVyB,OAW/BzB,EAAYyB,GAXmB,4CAAH,sDAcxBC,GAAsB,iDAAG,WAAOC,GAAP,kFAE7B9B,GAAoB,GAFS,SAIvB9N,EAAc4P,GAJS,uBAMvBhB,KANuB,2CAAH,sDAS5B,OACE,qCACGnP,GACC,eAACqB,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,CAAKkC,QAAS,OAAQ4B,eAAgB,MAAO+C,GAAI,EAAGF,GAAI,EAAxD,UACE,cAACvE,EAAA,EAAD,CAASC,MAAM,8CAAf,SACE,cAAC2B,EAAA,EAAD,CAAYC,QAAS,kBAAMtB,EAAe,IAA1C,SACE,cAACoM,EAAA,EAAD,CAAOC,aAAcxB,EAAYlK,OAAQ9B,MAAM,UAA/C,SACE,cAACyN,EAAA,EAAD,UAIN,cAAC7M,EAAA,EAAD,CAASC,MAAM,mCAAf,SACE,cAAC2B,EAAA,EAAD,CAAYC,QAtES,WAC/BiJ,GAAsB,IAqEZ,SACE,cAACgC,EAAA,EAAD,WAIN,cAAClP,EAAA,EAAD,CAAKK,GAAI,CAAE8O,aAAc,EAAGC,YAAa,WAAzC,SACE,eAACC,EAAA,EAAD,CACE/H,MAAOwF,EACPhF,SAnFY,SAACwH,EAA6BC,GACpD5M,EAAe4M,IAmFL,aAAW,qBAHb,UAKE,cAACC,EAAA,EAAD,aAAKnH,MAAM,YAAeoH,YAAU,KACpC,cAACD,EAAA,EAAD,aAAKnH,MAAM,YAAeoH,YAAU,KACpC,cAACD,EAAA,EAAD,aAAKnH,MAAM,WAAcoH,YAAU,UAGvC,cAAC,GAAD,CAAUnI,MAAOwF,EAAarJ,MAAO,EAArC,SACE,cAAC,EAAD,CACEf,KAAM4K,EACN7K,WAAYA,EACZD,eAAuB,OAAR7D,QAAQ,IAARA,OAAA,EAAAA,EAAUwL,iBAAkB,EAC3CxH,eAAgBA,MAGpB,cAAC,GAAD,CAAU2E,MAAOwF,EAAarJ,MAAO,EAArC,SACE,cAAC,GAAD,CACEf,KAAM8K,EACNlJ,iBA7F+B,SAACoL,GAC1C7B,GACEL,EAAYmC,MAAK,SAAC3B,GAAD,OAAaA,EAAQ/I,aAAeyK,MAEvD1C,GAAoB,QA4Fd,cAAC,GAAD,CAAU1F,MAAOwF,EAAarJ,MAAO,EAArC,SACE,cAAC,GAAD,CACEf,KAAMgL,EACNpJ,iBA5F8B,SAACoL,GACzC7B,GACEH,EAAYiC,MAAK,SAAC3B,GAAD,OAAaA,EAAQ/I,aAAeyK,MAEvD1C,GAAoB,WA8FlB,cAAC,GAAD,CACEvH,YA5F4B,SAAC6J,EAAgBM,GAE7CA,GADsB,CAAC,gBAAiB,iBACZ7P,SAAS6P,IAGzC1C,GAAsB,IAwFlBxH,WAAYgJ,GACZ/I,KAAMsH,EACNtO,SAAUA,GAAY,OAExB,cAAC,GAAD,CACE8G,YA1F0B,SAAC6J,EAAgBM,GAE3CA,GADsB,CAAC,gBAAiB,iBACZ7P,SAAS6P,IAGzC5C,GAAoB,IAsFhBtH,WAAYmJ,GACZlJ,KAAMoH,EACNnH,WAAYgI,IAAmB,WClIxBiC,OAtEf,WACE,MAAkCtQ,qBAAlC,mBAAOuQ,EAAP,KAAkBC,EAAlB,KAEAnQ,qBAAU,WACRrB,QAAQuB,KAAR,sCAA4C/B,gBAC5CC,IAAU6B,MAAK,SAACC,GACd,GAAIA,GAAwB,kBAATA,EAAmB,CACpCvB,QAAQuB,KAAR,mDAEA,IAAMjC,EAASmS,YAAalQ,GAC5BiQ,EAAalS,QAEbU,QAAQC,MAAM,6DAGjB,IAKH,IAAMyR,EAAiBxL,cAAWyL,QAAQC,QAAQC,KAE5CC,EAAQC,YAAY,CACxBJ,QAAS,CACPC,QAAS,CACPC,MAAe,OAATN,QAAS,IAATA,OAAA,EAAAA,EAAW3O,YAAa8O,GAEhCM,KAAe,OAATT,QAAS,IAATA,KAAW5O,SAAW,OAAS,SAEvCsP,WAAY,CACVC,aAAc,CACZC,eAAgB,CACdC,KAAM,CACJ5J,WAAY,aAOtB,OACE,eAAC6J,EAAA,EAAD,CAAeP,MAAOA,EAAtB,UACE,cAACQ,EAAA,EAAD,IACA,qBAAKC,UAAU,MAAf,SACGhB,GACC,cAAClP,EAAWmQ,SAAZ,CAAqBzJ,MAAOwI,EAA5B,SACE,cAAC9P,EAAA,EAAD,CAAKkC,QAAS,OAAQ4O,UAAU,aAAhC,SACE,eAAC9Q,EAAA,EAAD,CACE2K,MAAO,OACPxK,EAAG,EACH6Q,OAAQ,QACR9O,QAAS,OACT+E,cAAe,SALjB,UAOE,cAAC,EAAD,IACA,cAACjH,EAAA,EAAD,UAEE,cAAC,GAAD,eAQU,cAArBjC,eAAoC,cAAC,EAAD,QCrE5BkT,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtR,MAAK,YAAkD,IAA/CuR,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHDO,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,OAOJb,M,yVCLajB,EAAe,SAACtQ,GAC3B,IAAMqS,EAAchU,IAChBiU,EAAY,GAUhB,MARoB,cAAhBD,IACFC,EAAYC,KAEU,uCACnBvS,GACA5B,IAAUiU,IACVC,IAKMjU,EAAiB,WAAuB,IAAD,EAGlD,OADE,UAACmU,SAAD,aAAC,mBAAiD,cAIzCC,EAAe,WAC1B,IAAMrC,EAAasC,OAA2BtC,WAAa,KAC3D,OAAgB,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAW1R,YAAa,IAGpBoG,EAAkB,SAAC6L,GAM9B,MALoD,CAClDhP,UAAWgP,EAAMH,QAAQmC,QAAQjC,KACjCzO,SAAU0O,EAAMH,QAAQoC,QAAQlC,KAChCvO,SAAUwO,EAAMH,QAAQ1R,MAAM4R,OAK5BmC,EAAiB,SAACC,EAAWC,GACjC,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EACX,GAGIC,EAAmB,SAACF,EAAoBC,GACnD,IAAME,EAASH,EAAEtO,aAAa0O,MAAM,KAC9BC,EAASJ,EAAEvO,aAAa0O,MAAM,KAC9BE,EAAQH,EAAOA,EAAOrP,OAAS,GAC/ByP,EAAQF,EAAOA,EAAOvP,OAAS,GACrC,OAAOwP,IAAUC,EACbR,EAAeI,EAAO,GAAIE,EAAO,IACjCN,EAAeO,EAAOC,IAGfvE,EAAkB,SAACgE,EAAoBC,GAClD,OAAO,IAAIO,KAAKP,EAAE5N,YAAYoO,UAAY,IAAID,KAAKR,EAAE3N,YAAYoO,WAGtD7E,EAAyB,SACpC1L,EACAD,GAEAC,EAAK6L,KAAKmE,GAEV,IAAMQ,EAA8B,GAC9BC,EAA+B,GAUrC,OATAzQ,EAAK6H,SAAQ,SAAC/G,GACRf,EAAWvE,IAAIsF,EAAII,SAErBsP,EAAQE,KAAK5P,GAGb2P,EAASC,KAAK5P,MAGZ,GAAN,OAAW0P,EAAYC,IAGlB,SAAS1D,EAAUhM,GACxB,MAAO,CACLmE,GAAG,OAAD,OAASnE,GACX,gBAAgB,YAAhB,OAA6BA,IAI1B,SAASmB,EAAayO,EAAoBC,GAC/C,OAAOzJ,WAASC,WAAWuJ,EAAYrJ,KAAqBuJ,eAC1D1J,WAAS2J,cAAgBF,M,kDCjG7B,kHAOarB,EAA0C,CAKrD7T,UAAW,mCAGX+C,UAAW,WAMP/C,EAAY+T,cAELrU,EAAsD,CACjE2V,UAAW,CACTtV,OAAQ,8CACRC,UAAW6T,EAAmB7T,WAAa,IAE7CsV,YAAa,CACXvV,OAAQ,8CACRC,aAEFuV,eAAgB,CACdxV,OAAQ,4BACRC,cAIS4L,EAAsB,wB","file":"static/js/main.58d85d02.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { EnvConfig } from \"./contants\";\nimport { getEnvironment } from \"./helpers\";\nimport {\n  ApiResponse,\n  BalancesTableRow,\n  GetAllBalancesResponse,\n  GetInfoResponse,\n  GetSettingsResponse,\n  GetSubmittedRequestsResponse,\n  RequestsTableRow,\n  RequestUpdateData,\n  LtiAppInfo,\n  TokensSettings,\n} from \"./types\";\n\nconst config = EnvConfig[getEnvironment()];\n\nexport const getInfo = async (): Promise<LtiAppInfo | null> => {\n  try {\n    const res = await axios.get<GetInfoResponse>(\n      `${config.apiUrl}/info?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n};\n\nexport const getSettings = async (): Promise<TokensSettings | null> => {\n  try {\n    const res = await axios.get<GetSettingsResponse>(\n      `${config.apiUrl}/instructor/settings?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n};\n\nexport const addSettings = async (settings: TokensSettings): Promise<void> => {\n  try {\n    const body = settings;\n    await axios.post<ApiResponse>(\n      `${config.apiUrl}/instructor/settings?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n\nexport const updateSettings = async (\n  settings: TokensSettings\n): Promise<void> => {\n  try {\n    const body = settings;\n    await axios.put<ApiResponse>(\n      `${config.apiUrl}/instructor/settings?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n\nexport const getAllBalances = async (): Promise<BalancesTableRow[]> => {\n  try {\n    const res = await axios.get<GetAllBalancesResponse>(\n      `${config.apiUrl}/instructor/balances?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data || [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nexport const getSubmittedRequests = async (): Promise<RequestsTableRow[]> => {\n  try {\n    const res = await axios.get<GetSubmittedRequestsResponse>(\n      `${config.apiUrl}/instructor/requests?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data || [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nexport const updateRequest = async (updateData: RequestUpdateData) => {\n  console.log(\"UPDATING request\");\n  try {\n    const body = updateData;\n    await axios.put<ApiResponse>(\n      `${config.apiUrl}/instructor/requests?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n","import { Box, Card, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { getInfo } from \"../utils/api-connector\";\nimport { getEnvironment } from \"../utils/helpers\";\nimport { LtiAppInfo } from \"../utils/types\";\n\ninterface DevPanelProps {}\n\n/**\n * Show development information during pre-build.\n * Dev panel does not rely on appInfo context.\n * This is because the dev panel should show whether\n * or not the appInfo was successfully retrieved.\n */\nfunction DevPanel(props: DevPanelProps) {\n  // const [info, setInfo] = useState<any>(null);\n  const [expired, setExpired] = useState<boolean>(false);\n  const [appInfo, setAppInfo] = useState<LtiAppInfo>();\n\n  useEffect(() => {\n    getInfo().then((info) => {\n      if (\n        !info ||\n        (typeof info === \"string\" &&\n          (info as string).includes(\"Session expired\"))\n      ) {\n        console.error(\"SESSION EXPIRED\");\n        setExpired(true);\n      } else {\n        setAppInfo(info);\n        setExpired(false);\n      }\n    });\n  }, []);\n\n  return (\n    <Box position={\"absolute\"} bottom={0} p={2}>\n      <Card sx={{ border: \"2px solid red\" }}>\n        <Box p={2} textAlign=\"center\">\n          <Typography>React App status is: {getEnvironment()}</Typography>\n          <Typography>Session ID is: {appInfo?.sessionId}</Typography>\n          Session is: {expired ? \"EXPIRED\" : \"VALID\"}\n        </Box>\n      </Card>\n    </Box>\n  );\n}\n\nexport default DevPanel;\n","import { Box, Typography } from \"@mui/material\";\n\ninterface HeaderProps {}\n\n/** Show basic header info */\nfunction Header(props: HeaderProps) {\n  return (\n    <Box mt={6}>\n      <Typography variant=\"h3\">Tokens</Typography>\n    </Box>\n  );\n}\n\nexport default Header;\n","import { createContext } from \"react\";\nimport { LtiAppInfo } from \"./types\";\n\nexport const AppContext = createContext<LtiAppInfo>({\n  apiUrl: \"\",\n  contextId: \"\",\n  isInstructor: false,\n  linkId: \"\",\n  sessionId: \"\",\n  username: \"\",\n  darkMode: false,\n  baseColor: \"\",\n});\n","import { Cancel, CheckCircle, Info } from \"@mui/icons-material\";\nimport { Box, Tooltip, Typography } from \"@mui/material\";\nimport { RequestStatus } from \"../utils/types\";\n\ninterface StatusNameProps {\n  status: RequestStatus;\n  iconOnly?: boolean;\n}\n\nconst nameConfig: Record<RequestStatus, any> = {\n  SUBMITTED: {\n    icon: <Info color=\"warning\" />,\n    text: \"Pending\",\n    tooltip: \"Request has not yet been accepted or rejected\",\n  },\n  ACCEPTED: {\n    icon: <CheckCircle color=\"success\" />,\n    text: \"Accepted\",\n    tooltip: \"Request has been accepted\",\n  },\n  REJECTED: {\n    icon: <Cancel color=\"error\" />,\n    text: \"Rejected\",\n    tooltip: \"Request has been rejected\",\n  },\n};\n\n/** Shows the mapped status name and an icon */\nfunction StatusName(props: StatusNameProps) {\n  const { status, iconOnly } = props;\n\n  return (\n    <Box display={\"flex\"} alignItems={\"center\"}>\n      <Box display={\"flex\"} alignItems={\"center\"}>\n        <Tooltip title={nameConfig[status].tooltip}>\n          {nameConfig[status].icon}\n        </Tooltip>\n      </Box>\n      {!iconOnly && (\n        <Typography sx={{ ml: 1 }}>{nameConfig[status].text}</Typography>\n      )}\n    </Box>\n  );\n}\n\nexport default StatusName;\n","import {\n  Box,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { BalancesTableRow } from \"../utils/types\";\nimport StatusName from \"./StatusName\";\n\ninterface BalancesTableProps {\n  initialTokens: number;\n  requestMap: Map<string, boolean>;\n  rows: BalancesTableRow[];\n  setTabPosition: Dispatch<SetStateAction<number>>;\n}\n\n/** Shows the balances of all available students */\nfunction BalancesTable(props: BalancesTableProps) {\n  const { initialTokens, requestMap, rows, setTabPosition } = props;\n\n  const getAlert = (learnerId: string) => {\n    return (\n      <Box\n        display={\"flex\"}\n        minHeight={40}\n        justifyContent={\"center\"}\n        alignContent={\"center\"}\n      >\n        {/* Show the icon button only if there is a reference to the learner */}\n        {requestMap.get(learnerId) && (\n          <IconButton onClick={() => setTabPosition(1)}>\n            <StatusName status=\"SUBMITTED\" iconOnly={true} />\n          </IconButton>\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Student Name</TableCell>\n            <TableCell align=\"center\">Balance Remaining</TableCell>\n            <TableCell align=\"center\">Tokens Used</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {!rows.length ? (\n            <TableRow>\n              <TableCell colSpan={4} sx={{ textAlign: \"center\" }}>\n                <Typography>No balances yet!</Typography>\n              </TableCell>\n            </TableRow>\n          ) : (\n            rows.map((row, index) => (\n              <TableRow\n                key={`${index}-${row.user_id}`}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                <TableCell align=\"center\" sx={{ maxWidth: 40 }}>\n                  {getAlert(row.user_id)}\n                </TableCell>\n                <TableCell>{row.learner_name}</TableCell>\n                <TableCell align=\"center\">\n                  {initialTokens - row.tokens_used || 0}\n                </TableCell>\n                <TableCell align=\"center\">{row.tokens_used}</TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default BalancesTable;\n","import {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport { HistoryTableRow } from \"../utils/types\";\nimport StatusName from \"./StatusName\";\nimport { formatDbDate, getStatusColors } from \"../utils/helpers\";\n\ninterface HistoryTableProps {\n  rows: HistoryTableRow[];\n  openReviewDialog: (requestId: string) => void;\n}\n\n/** Shows the history of requests of all available students */\nfunction HistoryTable(props: HistoryTableProps) {\n  const { rows, openReviewDialog } = props;\n\n  const statusColors = getStatusColors(useTheme());\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Last Action</TableCell>\n            <TableCell>Student Name</TableCell>\n            <TableCell>Request</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell align=\"center\">Action</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {!rows.length ? (\n            <TableRow>\n              <TableCell colSpan={5} sx={{ textAlign: \"center\" }}>\n                <Typography>No requests on record yet!</Typography>\n              </TableCell>\n            </TableRow>\n          ) : (\n            rows.map((row, index) => (\n              <TableRow\n                key={`${index}-${row.request_id}`}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                <TableCell\n                  sx={{\n                    borderLeft: `5px solid ${\n                      statusColors[row.status_name]\n                    } !important`,\n                  }}\n                >\n                  {formatDbDate(row.updated_at)}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.learner_name}\n                </TableCell>\n                <TableCell>{row.category_name}</TableCell>\n                <TableCell>\n                  <StatusName status={row.status_name} />\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Button\n                    variant=\"contained\"\n                    onClick={() => openReviewDialog(row.request_id)}\n                  >\n                    Review\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default HistoryTable;\n","import {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { formatDbDate } from \"../utils/helpers\";\nimport { RequestsTableRow } from \"../utils/types\";\n\ninterface RequestsTableProps {\n  rows: RequestsTableRow[];\n  openReviewDialog: (requestId: string) => void;\n}\n\n/** Shows the requests of all available students */\nfunction RequestsTable(props: RequestsTableProps) {\n  const { rows, openReviewDialog } = props;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Request Date</TableCell>\n            <TableCell>Student Name</TableCell>\n            <TableCell>Request</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell align=\"center\">Action</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {!rows.length ? (\n            <TableRow>\n              <TableCell colSpan={4} sx={{ textAlign: \"center\" }}>\n                <Typography>No pending requests!</Typography>\n              </TableCell>\n            </TableRow>\n          ) : (\n            rows.map((row, index) => (\n              <TableRow\n                key={`${index}-${row.request_id}`}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                <TableCell>{formatDbDate(row.created_at)}</TableCell>\n                <TableCell>{row.learner_name}</TableCell>\n                <TableCell>{row.category_name}</TableCell>\n                <TableCell\n                  sx={{\n                    maxWidth: 200,\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                  }}\n                >\n                  {row.learner_comment}\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Button\n                    variant=\"contained\"\n                    onClick={() => openReviewDialog(row.request_id)}\n                  >\n                    Review\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default RequestsTable;\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport { formatDbDate } from \"../utils/helpers\";\nimport {\n  RequestsTableRow,\n  RequestStatus,\n  RequestUpdateData,\n} from \"../utils/types\";\nimport StatusName from \"./StatusName\";\n\ninterface ReviewDialogProps {\n  handleClose: (event?: object, reason?: string) => void;\n  handleSave: (submission: RequestUpdateData) => void;\n  open: boolean;\n  requestRow: RequestsTableRow | null;\n}\n\n/** Show settings form */\nfunction ReviewDialog(props: ReviewDialogProps) {\n  const { handleClose, handleSave, open, requestRow } = props;\n\n  const [actionStatus, setActionStatus] = useState<RequestStatus>();\n  const [comment, setComment] = useState<string>();\n\n  useEffect(() => {\n    if (open) {\n      setActionStatus(undefined);\n      setComment(undefined);\n    }\n  }, [open]);\n\n  /** Handles submission of the form data */\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n    if (requestRow && actionStatus) {\n      const submission: RequestUpdateData = {\n        request_id: requestRow.request_id,\n        status_name: actionStatus,\n      };\n      if (actionStatus === \"REJECTED\") {\n        submission.instructor_comment = comment;\n      }\n      handleSave(submission);\n    }\n  };\n\n  const handleActionChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newStatus = e.target.value as RequestStatus;\n    if (newStatus === \"ACCEPTED\") {\n      setComment(\"\");\n    }\n    setActionStatus(newStatus);\n  };\n\n  const handleCommentChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const commentVal = e.target.value;\n    setComment(commentVal);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {requestRow && (\n        <Box p={2}>\n          <form onSubmit={onSubmit}>\n            <DialogTitle>Review Request</DialogTitle>\n            <DialogContent>\n              <Box mb={3}>\n                <DialogContentText>\n                  Review or take action on a token request.\n                </DialogContentText>\n              </Box>\n\n              {/* REQUEST DATE */}\n              <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                <Box mr={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>Date:</Typography>\n                  </FormLabel>\n                </Box>\n                <Typography>{formatDbDate(requestRow.created_at)}</Typography>\n              </Box>\n              {/* LEARNER NAME */}\n              <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                <Box mr={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>Requester:</Typography>\n                  </FormLabel>\n                </Box>\n                <Typography>{requestRow.learner_name}</Typography>\n              </Box>\n              {/* REQUEST TYPE */}\n              <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                <Box mr={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>Type:</Typography>\n                  </FormLabel>\n                </Box>\n                <Typography>\n                  {requestRow.category_name} ({requestRow.token_cost} token\n                  {requestRow.token_cost > 1 && \"s\"})\n                </Typography>\n              </Box>\n              {/* REQUESTER COMMENT */}\n              <Box display={\"flex\"} flexDirection={\"column\"} mt={1} mb={2}>\n                <Box mb={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>\n                      Requester Description:\n                    </Typography>\n                  </FormLabel>\n                </Box>\n                <Box pl={2}>\n                  <TextField\n                    disabled\n                    fullWidth\n                    aria-label=\"Description of request as made by the requester\"\n                    value={requestRow.learner_comment || \"\"}\n                    multiline\n                    minRows={1}\n                    maxRows={6}\n                  />\n                </Box>\n              </Box>\n              {/* INSTRUCTOR ACTION CHOICE */}\n              {requestRow.status_name === \"SUBMITTED\" ? (\n                <Box>\n                  <FormControl>\n                    <FormLabel>\n                      <Typography fontWeight={\"bold\"}>\n                        Instructor Action:\n                      </Typography>\n                    </FormLabel>\n                    <Box pl={2}>\n                      <RadioGroup\n                        id=\"instructor-action\"\n                        name=\"instructor-action\"\n                        aria-labelledby=\"instructor-action\"\n                        onChange={handleActionChange}\n                      >\n                        <FormControlLabel\n                          value=\"ACCEPTED\"\n                          control={<Radio required />}\n                          label=\"Accept\"\n                        />\n                        <FormControlLabel\n                          value=\"REJECTED\"\n                          control={<Radio required />}\n                          label=\"Reject\"\n                        />\n                      </RadioGroup>\n                    </Box>\n                  </FormControl>\n                  {actionStatus === \"REJECTED\" && (\n                    <Box\n                      display={\"flex\"}\n                      flexDirection={\"column\"}\n                      mt={1}\n                      mb={2}\n                    >\n                      <Box mb={2}>\n                        <FormLabel>\n                          <Typography fontWeight={\"bold\"}>\n                            Instructor Comment:\n                          </Typography>\n                        </FormLabel>\n                      </Box>\n                      <Box pl={2}>\n                        <TextField\n                          fullWidth\n                          required\n                          aria-label=\"An input for the instructor to comment on the request\"\n                          multiline\n                          rows={6}\n                          value={comment}\n                          onChange={handleCommentChange}\n                        />\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              ) : (\n                <Box>\n                  {/* DISPLAY ACTION TAKEN */}\n                  <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                    <Box mr={2}>\n                      <FormLabel>\n                        <Typography fontWeight={\"bold\"}>\n                          Instructor Action:\n                        </Typography>\n                      </FormLabel>\n                    </Box>\n                    <StatusName status={requestRow.status_name} />\n                  </Box>\n                  {requestRow.status_name === \"REJECTED\" && (\n                    <Box\n                      display={\"flex\"}\n                      flexDirection={\"column\"}\n                      mt={1}\n                      mb={2}\n                    >\n                      {/* INSTRUCTOR COMMENT */}\n                      <Box mb={2}>\n                        <FormLabel>\n                          <Typography fontWeight={\"bold\"}>\n                            Instructor Comment:\n                          </Typography>\n                        </FormLabel>\n                      </Box>\n                      <Box pl={2}>\n                        <TextField\n                          disabled\n                          fullWidth\n                          aria-label=\"A comment on the request made by the instructor\"\n                          value={requestRow.instructor_comment || \"\"}\n                          multiline\n                          minRows={1}\n                          maxRows={6}\n                        />\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} variant=\"outlined\">\n                {requestRow.status_name === \"SUBMITTED\" ? \"Cancel\" : \"Close\"}\n              </Button>\n              {requestRow.status_name === \"SUBMITTED\" && (\n                <Button variant=\"contained\" type=\"submit\">\n                  Save\n                </Button>\n              )}\n            </DialogActions>\n          </form>\n        </Box>\n      )}\n    </Dialog>\n  );\n}\n\nexport default ReviewDialog;\n","import {\n  Add,\n  Cancel,\n  InfoOutlined,\n  KeyboardArrowDown,\n  KeyboardArrowUp,\n} from \"@mui/icons-material\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  InputLabel,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { useCallback, useEffect } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { DB_DATE_TIME_FORMAT } from \"../utils/contants\";\nimport { TokensSettings } from \"../utils/types\";\n\ninterface SettingsDialogProps {\n  handleClose: (event?: object, reason?: string) => void;\n  handleSave: (newSettings: TokensSettings) => void;\n  open: boolean;\n  settings: TokensSettings | null;\n}\n\n/** Show settings form */\nfunction SettingsDialog(props: SettingsDialogProps) {\n  const { handleClose, handleSave, open, settings } = props;\n\n  // Form management\n  const {\n    control,\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<TokensSettings>({\n    defaultValues: {\n      categories: [\n        {\n          category_name: \"Missed Class\",\n          token_cost: 1,\n          dbAction: \"ADD\",\n          sort_order: 0,\n        },\n        {\n          category_name: \"Late Assignment\",\n          token_cost: 1,\n          dbAction: \"ADD\",\n          sort_order: 1,\n        },\n      ],\n    },\n  });\n  const { fields, append, move, update, remove } = useFieldArray({\n    control, // control props comes from useForm (optional: if you are using FormContext)\n    name: \"categories\", // unique name for your Field Array\n  });\n\n  const initValues = useCallback(\n    (settings: TokensSettings) => {\n      const formattedDate = DateTime.fromFormat(\n        settings.use_by_date,\n        DB_DATE_TIME_FORMAT\n      ).toISODate();\n      setValue(\"configuration_id\", settings.configuration_id);\n      setValue(\"initial_tokens\", settings.initial_tokens);\n      setValue(\"notifications_pref\", settings.notifications_pref);\n      setValue(\"use_by_date\", formattedDate);\n      setValue(\"categories\", settings.categories);\n    },\n    [setValue]\n  );\n\n  useEffect(() => {\n    if (settings && open) {\n      initValues(settings);\n    }\n  }, [settings, open, initValues]);\n\n  const moveCategoryUp = (i: number) => {\n    move(i, i - 1);\n  };\n\n  const moveCategoryDown = (i: number) => {\n    move(i, i + 1);\n  };\n\n  /** Append a new empty category to the form */\n  const handleAddCategory = () => {\n    append({ sort_order: fields.length });\n  };\n\n  /** Indicates whether less than the minimum number of categories exists */\n  const onlyOneCategoryExists = () => {\n    const validCategories = fields.filter((category) => {\n      return category.dbAction !== \"DELETE\";\n    });\n    return validCategories.length <= 1;\n  };\n\n  /** Marks a category for deletion */\n  const handleDeleteCategory = (index: number) => {\n    if (fields[index].category_id) {\n      fields[index].dbAction = \"DELETE\";\n      update(index, {\n        ...fields[index],\n        dbAction: \"DELETE\",\n      });\n    } else {\n      remove(index);\n    }\n  };\n\n  /** Handles submission of the form data */\n  const onSubmit = (data: TokensSettings) => {\n    // Assemble main data\n    const settingsToSubmit: TokensSettings = {\n      configuration_id: settings?.configuration_id,\n      initial_tokens:\n        typeof data.initial_tokens === \"number\"\n          ? data.initial_tokens\n          : parseInt(data.initial_tokens),\n      use_by_date: data.use_by_date,\n      notifications_pref: data.notifications_pref,\n      categories: data.categories,\n    };\n    // Update any category dbActions and sortOrder\n    settingsToSubmit.categories.forEach((category, i) => {\n      category.sort_order = i;\n      if (category.category_id && !category.dbAction) {\n        category.dbAction = \"UPDATE\";\n      } else if (!category.category_id && !category.dbAction) {\n        category.dbAction = \"ADD\";\n      }\n    });\n    handleSave(settingsToSubmit);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <Box p={2}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <DialogTitle>Instructor Settings</DialogTitle>\n          <DialogContent>\n            {settings && (\n              <Box mb={3}>\n                <DialogContentText>\n                  View or update the settings for your token economy.\n                </DialogContentText>\n              </Box>\n            )}\n            {/* INITIAL TOKEN COUNT */}\n            <Box display={\"flex\"} mt={1} mb={2}>\n              <Box minWidth={300} width={300} mr={2} mt={1}>\n                <InputLabel htmlFor=\"token-count\" sx={{ whiteSpace: \"normal\" }}>\n                  <Typography fontWeight={\"bold\"}>\n                    Amount of tokens to be available for each student:\n                  </Typography>\n                </InputLabel>\n              </Box>\n              <Box minWidth={150} width={150}>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  size=\"small\"\n                  id=\"token-count\"\n                  type=\"number\"\n                  error={!!errors.initial_tokens}\n                  InputLabelProps={{ shrink: false }}\n                  InputProps={{\n                    inputProps: {\n                      style: { textAlign: \"center\" },\n                    },\n                  }}\n                  {...register(\"initial_tokens\", {\n                    required: true,\n                    pattern: /^[0-9]+$/,\n                    min: 1,\n                  })}\n                  helperText={\n                    errors.initial_tokens && \"Must be a positive whole number\"\n                  }\n                />\n              </Box>\n            </Box>\n            {/* EXPIRATION / USE BY DATE */}\n            <Box display={\"flex\"} mb={2}>\n              <Box minWidth={300} mr={2} mt={2}>\n                <InputLabel htmlFor=\"use-by-date\">\n                  <Typography fontWeight={\"bold\"}>\n                    Date that tokens must be used by:\n                  </Typography>\n                </InputLabel>\n              </Box>\n              <Box>\n                <TextField\n                  margin=\"dense\"\n                  size=\"small\"\n                  id=\"use-by-date\"\n                  type=\"date\"\n                  error={!!errors.use_by_date}\n                  InputLabelProps={{ shrink: false }}\n                  {...register(\"use_by_date\", {\n                    required: true,\n                  })}\n                  helperText={errors.use_by_date && \"Must be a valid date\"}\n                />\n              </Box>\n            </Box>\n            {/* EMAIL NOTIFICATIONS */}\n            <Box mb={2}>\n              <Box\n                display={\"flex\"}\n                justifyContent={\"start\"}\n                alignItems={\"center\"}\n              >\n                <Box mr={3}>\n                  <InputLabel htmlFor=\"email-pref\">\n                    <Typography fontWeight={\"bold\"}>\n                      Email notifications:\n                    </Typography>\n                  </InputLabel>\n                </Box>\n                <Checkbox\n                  defaultChecked={true}\n                  inputProps={{\n                    \"aria-label\": \"Email notifications preference checkbox\",\n                  }}\n                  {...register(\"notifications_pref\")}\n                />\n              </Box>\n              <Box mb={3}>\n                <Typography variant=\"body2\">\n                  Receive emails when students use tokens.\n                </Typography>\n              </Box>\n            </Box>\n            {/* CATEGORY SELECTION */}\n            <Box display={\"flex\"} flexDirection={\"column\"}>\n              <Box display={\"flex\"}>\n                <Box minWidth={300} mr={2}>\n                  <InputLabel htmlFor=\"category-name-input-0\">\n                    <Typography fontWeight={\"bold\"}>Categories:</Typography>\n                  </InputLabel>\n                </Box>\n                <Box\n                  minWidth={150}\n                  width={150}\n                  display={\"flex\"}\n                  alignItems={\"center\"}\n                >\n                  <Tooltip\n                    title=\"The amount of tokens a student would need to spend.\"\n                    placement=\"top\"\n                  >\n                    <InfoOutlined\n                      sx={{ mr: 1 }}\n                      color=\"primary\"\n                      fontSize=\"small\"\n                    />\n                  </Tooltip>\n                  <InputLabel htmlFor=\"category-token-input-0\">\n                    <Typography fontWeight={\"bold\"}>Token Cost:</Typography>\n                  </InputLabel>\n                </Box>\n              </Box>\n              <Box display={\"flex\"} flexDirection={\"column\"}>\n                {fields.map((category, i) => {\n                  return (\n                    <Box key={category.id}>\n                      {/* Categories are only shown if not marked for deletion */}\n                      {category.dbAction !== \"DELETE\" && (\n                        <Box display={\"flex\"}>\n                          <Box>\n                            <IconButton\n                              size=\"small\"\n                              disabled={i === 0}\n                              disableRipple\n                              onClick={() => moveCategoryUp(i)}\n                            >\n                              <KeyboardArrowUp fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                              size=\"small\"\n                              disabled={i === fields.length - 1}\n                              disableRipple\n                              onClick={() => moveCategoryDown(i)}\n                            >\n                              <KeyboardArrowDown fontSize=\"small\" />\n                            </IconButton>\n                          </Box>\n                          <Box minWidth={300} mr={2}>\n                            <TextField\n                              margin=\"dense\"\n                              size=\"small\"\n                              id={`category-name-${i}`}\n                              type=\"text\"\n                              placeholder=\"Enter category name...\"\n                              InputLabelProps={{ shrink: false }}\n                              InputProps={{\n                                inputProps: { style: { minWidth: 250 } },\n                              }}\n                              helperText={\n                                errors.categories?.[i]?.category_name &&\n                                \"A category name is required\"\n                              }\n                              //   error\n                              error={!!errors.categories?.[i]?.category_name}\n                              {...register(`categories.${i}.category_name`, {\n                                required: true,\n                              })}\n                            />\n                          </Box>\n                          <Box\n                            display={\"flex\"}\n                            alignItems={\"start\"}\n                            minWidth={200}\n                          >\n                            <Box minWidth={150} width={150}>\n                              <TextField\n                                margin=\"dense\"\n                                size=\"small\"\n                                id={`category-token-${i}`}\n                                type=\"number\"\n                                InputLabelProps={{ shrink: false }}\n                                InputProps={{\n                                  inputProps: {\n                                    style: { textAlign: \"center\" },\n                                  },\n                                }}\n                                error={!!errors.categories?.[i]?.token_cost}\n                                helperText={\n                                  errors.categories?.[i]?.token_cost &&\n                                  \"Must be a positive whole number\"\n                                }\n                                {...register(`categories.${i}.token_cost`, {\n                                  required: true,\n                                  pattern: /^[0-9]+$/,\n                                  min: 1,\n                                })}\n                              />\n                            </Box>\n                            <Box ml={1} mt={1}>\n                              <Tooltip\n                                title={\n                                  category.is_used\n                                    ? \"Category is associated with a request and cannot be deleted\"\n                                    : \"\"\n                                }\n                              >\n                                <div>\n                                  <IconButton\n                                    disabled={\n                                      category.is_used ||\n                                      onlyOneCategoryExists()\n                                    }\n                                    color=\"primary\"\n                                    onClick={() => handleDeleteCategory(i)}\n                                  >\n                                    <Cancel />\n                                  </IconButton>\n                                </div>\n                              </Tooltip>\n                            </Box>\n                          </Box>\n                        </Box>\n                      )}\n                    </Box>\n                  );\n                })}\n              </Box>\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Add />}\n                  onClick={handleAddCategory}\n                >\n                  New Category\n                </Button>\n              </Box>\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            {settings?.configuration_id && (\n              <Button onClick={handleClose} variant=\"outlined\">\n                Cancel\n              </Button>\n            )}\n            <Button variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Box>\n    </Dialog>\n  );\n}\n\nexport default SettingsDialog;\n","import { Box } from \"@mui/material\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\n/** Generic wrapper for tab panel content */\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport default TabPanel;\n","import { NotificationImportant, Settings } from \"@mui/icons-material\";\nimport { Badge, Box, IconButton, Tab, Tabs, Tooltip } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport BalancesTable from \"../components/BalancesTable\";\nimport HistoryTable from \"../components/HistoryTable\";\nimport RequestsTable from \"../components/RequestsTable\";\nimport ReviewDialog from \"../components/ReviewDialog\";\nimport SettingsDialog from \"../components/SettingsDialog\";\nimport TabPanel from \"../components/TabPanel\";\nimport {\n  addSettings,\n  getAllBalances,\n  getSettings,\n  getSubmittedRequests,\n  updateRequest,\n  updateSettings,\n} from \"../utils/api-connector\";\nimport {\n  a11yProps,\n  compareDateTime,\n  sortBalancesByPriority,\n} from \"../utils/helpers\";\nimport {\n  BalancesTableRow,\n  HistoryTableRow,\n  RequestsTableRow,\n  RequestUpdateData,\n  TokensSettings,\n} from \"../utils/types\";\n\nfunction InstructorView() {\n  const [tabPosition, setTabPosition] = useState(0);\n  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);\n  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);\n  const [settings, setSettings] = useState<TokensSettings | null>();\n  const [requestMap, setRequestMap] = useState<Map<string, boolean>>(new Map());\n  const [balanceRows, setBalanceRows] = useState<BalancesTableRow[]>([]);\n  const [requestRows, setRequestRows] = useState<RequestsTableRow[]>([]);\n  const [historyRows, setHistoryRows] = useState<HistoryTableRow[]>([]);\n  const [requestInReview, setRequestInReview] = useState<RequestsTableRow>();\n\n  useEffect(() => {\n    fetchAndAssembleData();\n  }, []);\n\n  useEffect(() => {\n    // When request data loads, assemble a mapping of who has pending requests\n    const newRequestMap = new Map();\n    requestRows.forEach((request) => {\n      newRequestMap.set(request.user_id, true);\n    });\n    setRequestMap(newRequestMap);\n  }, [requestRows]);\n\n  useEffect(() => {\n    // When the mapping of pending requests is set, retrieve and sort the balance table rows\n    if (requestMap.size) {\n      getAllBalances().then((balances) => {\n        const sortedBalances = sortBalancesByPriority(balances, requestMap);\n        setBalanceRows(sortedBalances);\n      });\n    }\n  }, [requestMap]);\n\n  useEffect(() => {\n    // If undefined, setting data may still be loading, but if null, response was received and config doesn't exist, so open the dialog\n    if (settings === null) {\n      setSettingsDialogOpen(true);\n    }\n  }, [settings]);\n\n  /** Retrieve and sort data for the requests and history tables\n   *  Balances table rows are set after loading the request data\n   *  since the balances table needs to know about pending requests\n   */\n  const fetchAndAssembleData = async () => {\n    // Retrieve and set Tokens Settings\n    const fetchedSettings = await getSettings();\n    setSettings(fetchedSettings);\n\n    // Retrieve and set rows for the Requests Table\n    const fetchedRequestRows = await getSubmittedRequests();\n    // Sort all by timestamp (requests and history will show newest first)\n    fetchedRequestRows.sort(compareDateTime);\n\n    const newlySubmittedRequests = fetchedRequestRows.filter((row) => {\n      return row.status_name === \"SUBMITTED\";\n    });\n    // newlySubmittedRequests.sort(compareLastNames);\n    setRequestRows(newlySubmittedRequests);\n    setHistoryRows(fetchedRequestRows);\n  };\n\n  // Tab management\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabPosition(newValue);\n  };\n\n  // Dialog management\n  const handleOpenSettingsDialog = () => {\n    setSettingsDialogOpen(true);\n  };\n\n  const handleOpenReviewDialogFromRequests = (requestId: string) => {\n    setRequestInReview(\n      requestRows.find((request) => request.request_id === requestId)\n    );\n    setReviewDialogOpen(true);\n  };\n\n  const handleOpenReviewDialogFromHistory = (requestId: string) => {\n    setRequestInReview(\n      historyRows.find((request) => request.request_id === requestId)\n    );\n    setReviewDialogOpen(true);\n  };\n\n  const handleCloseSettingsDialog = (event?: object, reason?: string) => {\n    const reasonsToStayOpen = [\"backdropClick\", \"escapeKeyDown\"];\n    if (reason && reasonsToStayOpen.includes(reason)) {\n      return;\n    }\n    setSettingsDialogOpen(false);\n  };\n\n  const handleCloseReviewDialog = (event?: object, reason?: string) => {\n    const reasonsToStayOpen = [\"backdropClick\", \"escapeKeyDown\"];\n    if (reason && reasonsToStayOpen.includes(reason)) {\n      return;\n    }\n    setReviewDialogOpen(false);\n  };\n\n  const handleSaveSettingsDialog = async (newSettings: TokensSettings) => {\n    // Need to take the new data, send the update, and fetch the new settings\n    if (newSettings.configuration_id) {\n      await updateSettings(newSettings);\n    } else {\n      await addSettings(newSettings);\n    }\n    // Close the dialog\n    setSettingsDialogOpen(false);\n    // Fetch the new/updated settings to refresh the UI\n    const retrievedSettings = await getSettings();\n    setSettings(retrievedSettings);\n  };\n\n  const handleSaveReviewDialog = async (reviewData: RequestUpdateData) => {\n    // Close the dialog\n    setReviewDialogOpen(false);\n    // Send the update\n    await updateRequest(reviewData);\n    // Refresh the data in the UI\n    await fetchAndAssembleData();\n  };\n\n  return (\n    <>\n      {settings && (\n        <Box>\n          <Box display={\"flex\"} justifyContent={\"end\"} mr={1} mb={2}>\n            <Tooltip title=\"There are pending requests requiring review\">\n              <IconButton onClick={() => setTabPosition(1)}>\n                <Badge badgeContent={requestRows.length} color=\"primary\">\n                  <NotificationImportant />\n                </Badge>\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Review or update Tokens settings\">\n              <IconButton onClick={handleOpenSettingsDialog}>\n                <Settings />\n              </IconButton>\n            </Tooltip>\n          </Box>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <Tabs\n              value={tabPosition}\n              onChange={handleTabChange}\n              aria-label=\"basic tabs example\"\n            >\n              <Tab label=\"Balances\" {...a11yProps(0)} />\n              <Tab label=\"Requests\" {...a11yProps(1)} />\n              <Tab label=\"History\" {...a11yProps(2)} />\n            </Tabs>\n          </Box>\n          <TabPanel value={tabPosition} index={0}>\n            <BalancesTable\n              rows={balanceRows}\n              requestMap={requestMap}\n              initialTokens={settings?.initial_tokens || 0}\n              setTabPosition={setTabPosition}\n            />\n          </TabPanel>\n          <TabPanel value={tabPosition} index={1}>\n            <RequestsTable\n              rows={requestRows}\n              openReviewDialog={handleOpenReviewDialogFromRequests}\n            />\n          </TabPanel>\n          <TabPanel value={tabPosition} index={2}>\n            <HistoryTable\n              rows={historyRows}\n              openReviewDialog={handleOpenReviewDialogFromHistory}\n            />\n          </TabPanel>\n        </Box>\n      )}\n      {/* DIALOGS */}\n      <SettingsDialog\n        handleClose={handleCloseSettingsDialog}\n        handleSave={handleSaveSettingsDialog}\n        open={settingsDialogOpen}\n        settings={settings || null}\n      />\n      <ReviewDialog\n        handleClose={handleCloseReviewDialog}\n        handleSave={handleSaveReviewDialog}\n        open={reviewDialogOpen}\n        requestRow={requestInReview || null}\n      />\n    </>\n  );\n}\n\nexport default InstructorView;\n","import {\n  Box,\n  ThemeProvider,\n  createTheme,\n  CssBaseline,\n  // useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport DevPanel from \"./components/DevPanel\";\nimport Header from \"./components/Header\";\nimport { getInfo } from \"./utils/api-connector\";\nimport { AppContext } from \"./utils/context\";\nimport { getAppConfig, getEnvironment } from \"./utils/helpers\";\nimport { LtiAppInfo } from \"./utils/types\";\nimport InstructorView from \"./views/InstructorView\";\n\nfunction App() {\n  const [appConfig, setAppconfig] = useState<LtiAppInfo>();\n\n  useEffect(() => {\n    console.info(`Running in cra environment: ${getEnvironment()}`);\n    getInfo().then((info) => {\n      if (info && typeof info !== \"string\") {\n        console.info(`Application configuration information retrieved`);\n        /** Information about the environment used to create the react app */\n        const config = getAppConfig(info);\n        setAppconfig(config);\n      } else {\n        console.error(\"Unable to retrieve App Info - Session may be expired\");\n      }\n    });\n  }, []);\n\n  /** An indication that the user has set (on a compatible browser) that they prefer dark mode */\n  // const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  /** The default primary color (used if no other primary color is specified) */\n  const defaultPrimary = useTheme().palette.primary.main;\n  /** Theme customizations */\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: appConfig?.baseColor || defaultPrimary,\n      },\n      mode: appConfig?.darkMode ? \"dark\" : \"light\",\n    },\n    components: {\n      MuiTableCell: {\n        styleOverrides: {\n          head: {\n            fontWeight: \"bold\",\n          },\n        },\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        {appConfig && (\n          <AppContext.Provider value={appConfig}>\n            <Box display={\"flex\"} className=\"App-header\">\n              <Box\n                width={\"100%\"}\n                p={4}\n                height={\"100vh\"}\n                display={\"flex\"}\n                flexDirection={\"column\"}\n              >\n                <Header />\n                <Box>\n                  {/* Condition for views? */}\n                  <InstructorView />\n                </Box>\n              </Box>\n            </Box>\n          </AppContext.Provider>\n        )}\n      </div>\n      {/* Only show dev panel for local development */}\n      {getEnvironment() === \"pre_build\" && <DevPanel />}\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Theme } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { APP_INFO_OVERRIDES, DB_DATE_TIME_FORMAT, EnvConfig } from \"./contants\";\nimport {\n  BalancesTableRow,\n  CraEnvironment,\n  DecoratedWindow,\n  GeneralTableRow,\n  HistoryTableRow,\n  LtiAppInfo,\n  RequestStatus,\n} from \"./types\";\n\nexport const getAppConfig = (appInfo: LtiAppInfo): LtiAppInfo => {\n  const environment = getEnvironment();\n  let overrides = {};\n  // The client-side configuration will override the server properties, if set\n  if (environment === \"pre_build\") {\n    overrides = APP_INFO_OVERRIDES;\n  }\n  const config: LtiAppInfo = {\n    ...appInfo,\n    ...EnvConfig[environment],\n    ...overrides,\n  };\n  return config;\n};\n\nexport const getEnvironment = (): CraEnvironment => {\n  const environment =\n    (process?.env.REACT_APP_ENV as CraEnvironment) || \"production\";\n  return environment;\n};\n\nexport const getSessionId = (): string => {\n  const appConfig = (window as DecoratedWindow).appConfig || null;\n  return appConfig?.sessionId || \"\";\n};\n\nexport const getStatusColors = (theme: Theme) => {\n  const statusColors: Record<RequestStatus, string> = {\n    SUBMITTED: theme.palette.warning.main,\n    ACCEPTED: theme.palette.success.main,\n    REJECTED: theme.palette.error.main,\n  };\n  return statusColors;\n};\n\nconst compareStrings = (a: string, b: string) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nexport const compareLastNames = (a: GeneralTableRow, b: GeneralTableRow) => {\n  const splitA = a.learner_name.split(\" \");\n  const splitB = b.learner_name.split(\" \");\n  const lastA = splitA[splitA.length - 1];\n  const lastB = splitB[splitB.length - 1];\n  return lastA === lastB\n    ? compareStrings(splitA[0], splitB[0])\n    : compareStrings(lastA, lastB);\n};\n\nexport const compareDateTime = (a: HistoryTableRow, b: HistoryTableRow) => {\n  return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime();\n};\n\nexport const sortBalancesByPriority = (\n  rows: BalancesTableRow[],\n  requestMap: Map<string, boolean>\n) => {\n  rows.sort(compareLastNames);\n  // Now that rows are sorted, divide them by 'SUBMITTED' status\n  const pending: BalancesTableRow[] = [];\n  const resolved: BalancesTableRow[] = [];\n  rows.forEach((row) => {\n    if (requestMap.get(row.user_id)) {\n      // User has a pending request and should be prioritized\n      pending.push(row);\n    } else {\n      // User does not have a pending request\n      resolved.push(row);\n    }\n  });\n  return [...pending, ...resolved];\n};\n\nexport function a11yProps(index: number) {\n  return {\n    id: `tab-${index}`,\n    \"aria-controls\": `tabpanel-${index}`,\n  };\n}\n\nexport function formatDbDate(dateString: string, format?: string) {\n  return DateTime.fromFormat(dateString, DB_DATE_TIME_FORMAT).toLocaleString(\n    DateTime.DATETIME_MED || format\n  );\n}\n","import { getSessionId } from \"./helpers\";\nimport { CraEnvironment, LtiAppInfo, LtiSessionConfig } from \"./types\";\n\n/** For use during local development for two reasons.\n * 1. Since you cannot retrieve the sessionId from the react server\n * 2. So you don't have to rely on updating the server to check different scenarios tied to the appInfo\n */\nexport const APP_INFO_OVERRIDES: Partial<LtiAppInfo> = {\n  // apiUrl: \"\",\n  // contextId: \"\",\n  // isInstructor: true,\n  // linkId: \"\",\n  sessionId: \"397e599274b27184c9c5c9b96cd18d58\",\n  // username: \"\",\n  // darkMode: true,\n  baseColor: \"#6B5B95\", // DRK PRPL\n  // baseColor: \"#0E4466\", // DRK TEAL\n  // baseColor: \"#FFADAD\", // LIGHT SALMON\n  // baseColor: \"#B3ADFF\", // LIGHT BLUE\n};\n\nconst sessionId = getSessionId();\n\nexport const EnvConfig: Record<CraEnvironment, LtiSessionConfig> = {\n  pre_build: {\n    apiUrl: \"/learning-apps/mod/mod-tokens/api/index.php\",\n    sessionId: APP_INFO_OVERRIDES.sessionId || \"\",\n  },\n  local_build: {\n    apiUrl: \"/learning-apps/mod/mod-tokens/api/index.php\",\n    sessionId,\n  },\n  deployed_build: {\n    apiUrl: \"/mod/tokens/api/index.php\",\n    sessionId,\n  },\n};\n\nexport const DB_DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n"],"sourceRoot":""}