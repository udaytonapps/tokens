{"version":3,"sources":["utils/api-connector.ts","components/DevPanel.tsx","components/Header.tsx","utils/context.ts","components/Filter.tsx","components/TableHeaderSort.tsx","components/BalancesTable.tsx","components/StatusName.tsx","components/HistoryTable.tsx","components/RequestsTable.tsx","components/TokenGraphic.tsx","components/ReviewDialog.tsx","components/SettingsDialog.tsx","components/TabPanel.tsx","views/InstructorView.tsx","components/RequestBalance.tsx","components/ConfirmationDialog.tsx","components/RequestForm.tsx","components/RequestDashboard.tsx","views/LearnerView.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/helpers.ts","utils/constants.ts"],"names":["config","EnvConfig","getEnvironment","getInfo","axios","get","apiUrl","sessionId","res","data","console","error","getInstructorSettings","addSettings","settings","body","post","updateSettings","put","getAllBalances","getSubmittedRequests","updateRequest","updateData","log","getLearnerSettings","getLearnerRequestHistory","addRequest","categoryId","learnerComment","category_id","learner_comment","DevPanel","props","useState","expired","setExpired","appInfo","setAppInfo","useEffect","then","info","includes","Box","position","bottom","p","Card","sx","border","textAlign","Typography","username","isInstructor","Header","mt","variant","AppContext","createContext","contextId","linkId","darkMode","baseColor","Filter","rows","filters","filterRows","buttonLabel","enumReference","setEnumReference","activeReference","setActiveReference","anchorEl","setAnchorEl","open","Boolean","id","undefined","newEnumReference","newActiveReference","forEach","row","filter","addReference","column","reference","col","handleClick","event","currentTarget","allOptionsChecked","Object","keys","find","key","applyFilters","filteredRows","type","getFilterOptions","options","sort","display","justifyContent","Button","endIcon","FilterList","onClick","IconButton","disableRipple","Popover","onClose","anchorOrigin","vertical","horizontal","flexWrap","map","i","FormLabel","label","FormGroup","FormControlLabel","control","Checkbox","size","color","checked","indeterminate","toggle","allChecked","toggleAllCheckbox","fontWeight","toggleCheckbox","valueMapping","TextField","TableHeaderSort","property","columnLabel","order","orderBy","setOrder","setOrderBy","TableSortLabel","active","direction","handleRequestSort","component","visuallyHidden","BalancesTable","setTabPosition","setFilteredRows","sortedFilteredRows","stableSort","getComparator","mb","FILTERS","INSTRUCTOR","BALANCES","TableContainer","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","width","TableBody","length","index","minHeight","alignContent","pendingRequests","Badge","badgeContent","learner_name","tokens_used","balance","user_id","colSpan","nameConfig","ACCEPTED","icon","CheckCircle","text","tooltip","PENDING","Info","REJECTED","Cancel","SUBMITTED","StatusName","status","iconOnly","alignItems","Tooltip","title","ml","HistoryTable","openReviewDialog","useContext","statusColors","getStatusColors","useTheme","status_name","borderLeft","formatDbDate","updated_at","scope","category_name","request_id","RequestsTable","REQUESTS","created_at","maxWidth","overflow","textOverflow","whiteSpace","styleReference","large","fontSize","outerRim","innerRim","inner","small","disabled","TokenGraphic","count","stacked","generateTokenStyles","referenceKey","height","borderRadius","backgroundColor","left","ReviewDialog","handleClose","handleSave","requestRow","actionStatus","setActionStatus","comment","setComment","readonly","setReadonly","Dialog","onSubmit","e","preventDefault","submission","instructor_comment","DialogTitle","DialogContent","DialogContentText","mr","token_cost","flexDirection","pl","fullWidth","value","multiline","minRows","maxRows","InputProps","readOnly","status_updated_at","FormControl","RadioGroup","name","onChange","newStatus","target","Radio","required","commentVal","DialogActions","SettingsDialog","useForm","defaultValues","categories","dbAction","sort_order","register","handleSubmit","watch","setValue","errors","formState","useFieldArray","fields","append","move","update","remove","pref","initValues","useCallback","formattedDate","DateTime","fromFormat","use_by_date","DB_DATE_TIME_FORMAT","toISODate","configuration_id","initial_tokens","notifications_pref","settingsToSubmit","parseInt","category","InputLabel","htmlFor","autoFocus","margin","InputLabelProps","shrink","inputProps","style","pattern","min","helperText","placement","InfoOutlined","moveCategoryUp","KeyboardArrowUp","moveCategoryDown","KeyboardArrowDown","placeholder","is_used","startIcon","Add","TabPanel","children","other","role","hidden","InstructorView","tabPosition","reviewDialogOpen","setReviewDialogOpen","settingsDialogOpen","setSettingsDialogOpen","setSettings","Map","requestMap","setRequestMap","balanceRows","setBalanceRows","requestRows","setRequestRows","historyRows","setHistoryRows","requestInReview","setRequestInReview","fetchAndAssembleData","newRequestMap","request","set","balances","sortedBalances","sortBalancesByPriority","fetchedSettings","fetchedRequestRows","compareDateTime","newlySubmittedRequests","handleSaveSettingsDialog","newSettings","retrievedSettings","handleSaveReviewDialog","reviewData","NotificationImportant","Settings","borderBottom","borderColor","Tabs","newValue","Tab","a11yProps","requestId","HISTORY","reason","RequestBalance","ConfirmationDialog","handleConfirm","RequestForm","updateBalance","resetBalance","refreshData","sortedCategories","a","b","openDialog","setOpenDialog","submitted","setSubmitted","selectedCategory","setSelectedCategory","setLearnerComment","handleConfirmDialog","pt","handleSelectCategory","textTransform","RequestDashboard","activeCount","setActiveCount","LearnerView","learnerBalance","setLearnerBalance","tokensUsed","reduce","LEARNER","App","appConfig","setAppconfig","getAppConfig","defaultPrimary","palette","primary","main","theme","createTheme","mode","components","MuiTableCell","styleOverrides","head","ThemeProvider","CssBaseline","className","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","environment","overrides","APP_INFO_OVERRIDES","process","getSessionId","window","success","warning","compareStrings","compareRowLastNames","compareLastNames","splitA","split","splitB","lastA","lastB","Date","getTime","pending","resolved","push","descendingComparator","array","comparator","stabilizedThis","el","dateString","format","toLocaleString","DATETIME_MED","pre_build","local_build","deployed_build","val","charAt","toUpperCase","slice","toLowerCase"],"mappings":"2TAgBMA,EAASC,IAAUC,eAIZC,EAAO,iDAAG,uHAEDC,IAAMC,IAAN,UACbL,EAAOM,OADM,2BACmBN,EAAOO,YAHzB,cAEbC,EAFa,yBAKZA,EAAIC,KAAKA,MALG,uCAOnBC,QAAQC,MAAR,MAPmB,kBAQZ,MARY,yDAAH,qDAYPC,EAAqB,iDAChC,uHAEsBR,IAAMC,IAAN,UACbL,EAAOM,OADM,0CACkCN,EAAOO,YAH/D,cAEUC,EAFV,yBAKWA,EAAIC,KAAKA,MALpB,uCAOIC,QAAQC,MAAR,MAPJ,kBAQW,MARX,yDADgC,qDAarBE,EAAW,iDAAG,WAAOC,GAAP,iGAEjBC,EAAOD,EAFU,SAGjBV,IAAMY,KAAN,UACDhB,EAAOM,OADN,0CAC8CN,EAAOO,WACzDQ,GALqB,wEASvBL,QAAQC,MAAR,MATuB,4EAAH,sDAcXM,EAAc,iDAAG,WAC5BH,GAD4B,iGAIpBC,EAAOD,EAJa,SAKpBV,IAAMc,IAAN,UACDlB,EAAOM,OADN,0CAC8CN,EAAOO,WACzDQ,GAPwB,wEAW1BL,QAAQC,MAAR,MAX0B,4EAAH,sDAgBdQ,EAAc,iDAAG,uHAERf,IAAMC,IAAN,UACbL,EAAOM,OADM,0CACkCN,EAAOO,YAHjC,cAEpBC,EAFoB,yBAKnBA,EAAIC,KAAKA,MAAQ,IALE,uCAO1BC,QAAQC,MAAR,MAP0B,kBAQnB,IARmB,yDAAH,qDAYdS,EAAoB,iDAAG,uHAEdhB,IAAMC,IAAN,UACbL,EAAOM,OADM,0CACkCN,EAAOO,YAH3B,cAE1BC,EAF0B,yBAKzBA,EAAIC,KAAKA,MAAQ,IALQ,uCAOhCC,QAAQC,MAAR,MAPgC,kBAQzB,IARyB,yDAAH,qDAYpBU,EAAa,iDAAG,WAAOC,GAAP,wFAC3BZ,QAAQa,IAAI,oBADe,SAGnBR,EAAOO,EAHY,SAInBlB,IAAMc,IAAN,UACDlB,EAAOM,OADN,0CAC8CN,EAAOO,WACzDQ,GANuB,wEAUzBL,QAAQC,MAAR,MAVyB,4EAAH,sDAiBba,EAAkB,iDAAG,uHAEZpB,IAAMC,IAAN,UACbL,EAAOM,OADM,uCAC+BN,EAAOO,YAH1B,cAExBC,EAFwB,yBAKvBA,EAAIC,KAAKA,MALc,uCAO9BC,QAAQC,MAAR,MAP8B,kBAQvB,MARuB,yDAAH,qDAYlBc,EAAwB,iDAAG,uHAIlBrB,IAAMC,IAAN,UACbL,EAAOM,OADM,uCAC+BN,EAAOO,YALpB,cAI9BC,EAJ8B,yBAO7BA,EAAIC,KAAKA,MAAQ,IAPY,uCASpCC,QAAQC,MAAR,MAToC,kBAU7B,IAV6B,yDAAH,qDAcxBe,EAAU,iDAAG,WACxBC,EACAC,GAFwB,iGAKhBb,EAAO,CACXc,YAAaF,EACbG,gBAAiBF,GAPG,SAShBxB,IAAMY,KAAN,UACDhB,EAAOM,OADN,uCAC2CN,EAAOO,WACtDQ,GAXoB,wEAetBL,QAAQC,MAAR,MAfsB,4EAAH,wD,OC1FRoB,MAtCf,SAAkBC,GAEhB,MAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,qBAAU,WACRnC,IAAUoC,MAAK,SAACC,IAEXA,GACgB,kBAATA,GACLA,EAAgBC,SAAS,oBAE5B/B,QAAQC,MAAM,mBACdwB,GAAW,KAEXE,EAAWG,GACXL,GAAW,SAGd,IAGD,cAACO,EAAA,EAAD,CAAKC,SAAU,WAAYC,OAAQ,EAAGC,EAAG,EAAzC,SACE,cAACC,EAAA,EAAD,CAAMC,GAAI,CAAEC,OAAQ,iBAApB,SACE,eAACN,EAAA,EAAD,CAAKG,EAAG,EAAGI,UAAU,SAArB,UACE,eAACC,EAAA,EAAD,mCAAkChD,iBAClC,eAACgD,EAAA,EAAD,2BACSd,QADT,IACSA,OADT,EACSA,EAASe,SADlB,UACmC,IACzB,OAAPf,QAAO,IAAPA,KAASgB,aAAe,aAAe,aAE1C,eAACF,EAAA,EAAD,oCAA4Bd,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAS7B,aANvC,eAOe2B,EAAU,UAAY,gBChC9BmB,MARf,SAAgBrB,GACd,OACE,cAACU,EAAA,EAAD,CAAKY,GAAI,EAAT,SACE,cAACJ,EAAA,EAAD,CAAYK,QAAQ,KAApB,uBCLOC,EAAaC,wBAA0B,CAClDnD,OAAQ,GACRoD,UAAW,GACXN,cAAc,EACdO,OAAQ,GACRpD,UAAW,GACX4C,SAAU,GACVS,UAAU,EACVC,UAAW,K,mOCiPEC,OAlOf,SAAgB9B,GACd,IAAQ+B,EAA2C/B,EAA3C+B,KAAMC,EAAqChC,EAArCgC,QAASC,EAA4BjC,EAA5BiC,WAAYC,EAAgBlC,EAAhBkC,YAEnC,EAA0CjC,mBACxC,IADF,mBAAOkC,EAAP,KAAsBC,EAAtB,KAGA,EAA8CnC,mBAC5C,IADF,mBAAOoC,EAAP,KAAwBC,EAAxB,KAGA,EAAgCrC,mBAAmC,MAAnE,mBAAOsC,EAAP,KAAiBC,EAAjB,KACMC,EAAOC,QAAQH,GACfI,EAAKF,EAAO,sBAAmBG,EAErCtC,qBAAU,WAER,IAAMuC,EAA8C,GAC9CC,EAA4C,GAClDf,EAAKgB,SAAQ,SAACC,GACZhB,EAAQe,SAAQ,SAACE,GAEfC,EAAaL,EAAkBI,EAAOE,OAAQH,GAE9CE,EAAaJ,EAAoBG,EAAOE,OAAQH,SAGpDV,EAAmBQ,GACnBV,EAAiBS,KAChB,CAACd,EAAMC,IAEV,IAAMkB,EAAe,SACnBE,EACAC,EACAL,GAEII,EAAUC,GACZD,EAAUC,GAAKL,EAAIK,KAAQ,EAE3BD,EAAUC,GAAV,eACGL,EAAIK,IAAO,IAKZC,EAAc,SAACC,GACnBf,EAAYe,EAAMC,gBAsCdC,EAAoB,SAACJ,GAEzB,OADaK,OAAOC,KAAKtB,EAAgBgB,IAC5BO,MAAK,SAACC,GAAD,OAAuC,IAA9BxB,EAAgBgB,GAAKQ,OAa5CC,EAAe,WACnB,IADyB,EACrBC,EAAsBhC,EADD,cAEJC,GAFI,yBAEdiB,EAFc,QAGvBc,EAAeA,EAAad,QAAO,SAACD,GAClC,GAAoB,SAAhBC,EAAOe,OACU3B,EAAgBY,EAAOE,QAAQH,EAAIC,EAAOE,SAE3D,OAAO,EAGX,OAAO,MARX,2BAA+B,IAFN,8BAazBlB,EAAW8B,IAGPE,EAAmB,SAAChB,GACxB,IAAIiB,EAAUR,OAAOC,KAAKxB,EAAcc,EAAOE,SAM/C,OALIF,EAAOkB,KACTD,EAAQC,KAAKlB,EAAOkB,MAEpBD,EAAQC,OAEHD,GAGT,OACE,eAACxD,EAAA,EAAD,CAAK0D,QAAS,OAAQC,eAAgB,MAAtC,UACGnC,EACC,cAACoC,GAAA,EAAD,CACE,mBAAkB3B,EAClB4B,QAAS,cAACC,EAAA,EAAD,IACTjD,QAAQ,WACRkD,QAASnB,EAJX,qBASA,cAACoB,EAAA,EAAD,CAAYC,eAAa,EAAC,mBAAkBhC,EAAI8B,QAASnB,EAAzD,SACG,cAACkB,EAAA,EAAD,MAGL,cAACI,GAAA,EAAD,CACEjC,GAAIA,EACJF,KAAMA,EACNF,SAAUA,EACVsC,QAhGc,WAClBrC,EAAY,OAgGRsC,aAAc,CACZC,SAAU,SACVC,WAAY,QAPhB,SAUE,cAACtE,EAAA,EAAD,CAAK0D,QAAS,OAAQa,SAAU,OAAhC,SACGjD,EAAQkD,KAAI,SAACjC,EAAQkC,GAAT,OACX,eAACzE,EAAA,EAAD,CAAmCG,EAAG,EAAtC,UACE,cAACuE,GAAA,EAAD,UAAYnC,EAAOoC,QACF,SAAhBpC,EAAOe,KACN,cAACtD,EAAA,EAAD,CAAK0D,QAAS,OAAd,SACGjC,EAAcc,EAAOE,SACpB,eAACmC,GAAA,EAAD,WAEE,cAACC,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACEC,KAAK,QACLC,MAAM,UACNC,QAASnC,EAAkBR,EAAOE,QAClC0C,eACGpC,EAAkBR,EAAOE,UA9E3BE,EA+EmBJ,EAAOE,SA9EtCO,OAAOC,KAAKtB,EAAgBgB,IAC3BO,MAAK,SAACC,GAAD,OAAuC,IAA9BxB,EAAgBgB,GAAKQ,OA+EzBY,QAAS,kBAxGT,SAACpB,GACzB,IAAIyC,GAAS,EACPC,EAAatC,EAAkBJ,GAQrC,IAAK,IAAIQ,KALPiC,GAFEC,EAOY1D,EAAgBgB,GAC9BhB,EAAgBgB,GAAKQ,GAAOiC,EAE9BxD,EAAmB,eAAKD,IACxByB,IACApF,QAAQa,IAAI8D,EAAK,QAAS0C,GAyFaC,CAAkB/C,EAAOE,WAG5CkC,MACE,cAACnE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,0BAKHhC,EAAiBhB,GAAQiC,KAAI,SAACrB,EAAKsB,GAClC,OACE,cAACzE,EAAA,EAAD,UACE,cAAC6E,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACEC,KAAK,QACLC,MAAM,UACNC,SAC0C,IAAxCvD,EAAgBY,EAAOE,QAAQU,GAEjCY,QAAS,kBAlIlB,SAACpB,EAAaQ,GACnCxB,EAAgBgB,GAAKQ,IAAQxB,EAAgBgB,GAAKQ,GAClDvB,EAAmB,eAAKD,IACxByB,IAgIgCoC,CAAejD,EAAOE,OAAQU,MAIpCwB,MACEpC,EAAOkD,aACHlD,EAAOkD,aAAatC,GACpBA,KAjBV,UAAaZ,EAAOE,OAApB,YAA8BgC,EAA9B,YAAmCtB,YA2B7C,cAACnD,EAAA,EAAD,UACE,cAAC0F,GAAA,EAAD,CAAWV,KAAK,QAAQ1B,KAAMf,EAAOe,WAxD3C,UAAaf,EAAOE,OAApB,YAA8BgC,IAhEd,IAAC9B,a,oBCtEdgD,OA5Bf,SAAyBrG,GACvB,IAQ2BsG,EARnBnD,EAA8DnD,EAA9DmD,OAAQoD,EAAsDvG,EAAtDuG,YAAaC,EAAyCxG,EAAzCwG,MAAOC,EAAkCzG,EAAlCyG,QAASC,EAAyB1G,EAAzB0G,SAAUC,EAAe3G,EAAf2G,WAWvD,OACE,eAACC,GAAA,EAAD,CACEC,OAAQJ,IAAYtD,EACpB2D,UAAWL,IAAYtD,EAASqD,EAAQ,MACxC/B,SAPuB6B,EAOInD,EAPc,SAACI,IANpB,SAACA,EAA4B+C,GAErDI,EADcD,IAAYH,GAAsB,QAAVE,EACrB,OAAS,OAC1BG,EAAWL,GAIXS,CAAkBxD,EAAO+C,KAGzB,UAKGC,EACAE,IAAYtD,EACX,cAACzC,EAAA,EAAD,CAAKsG,UAAU,OAAOjG,GAAIkG,KAA1B,SACa,SAAVT,EAAmB,oBAAsB,qBAE1C,SCkGKU,OA9Gf,SAAuBlH,GACrB,IAAQ+B,EAAyB/B,EAAzB+B,KAAMoF,EAAmBnH,EAAnBmH,eACd,EAAwClH,mBAAS8B,GAAjD,mBAAOgC,EAAP,KAAqBqD,EAArB,KACA,EACEnH,mBAAiC,mBADnC,mBAAOwG,EAAP,KAAgBE,EAAhB,KAEA,EAA0B1G,mBACZ,oBAAZwG,EAAgC,OAAS,OAD3C,mBAAOD,EAAP,KAAcE,EAAd,KAIApG,qBAAU,WACR8G,EAAgBrF,KACf,CAACA,IAGJ,IAAMsF,EAAqBC,YACzBvD,EACAwD,YAAcf,EAAOC,IAGvB,OACE,eAAC/F,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAAC,GAAD,CACEtF,YAAY,UACZH,KAAMA,EACNC,QAASyF,IAAQC,WAAWC,SAC5B1F,WAAYmF,MAGhB,cAACQ,EAAA,EAAD,CAAgBZ,UAAWa,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO/G,GAAI,CAAEgH,SAAU,KAAO,aAAW,eAAzC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,SAASC,MAAO,IAAjC,SACE,cAAC,GAAD,CACEjF,OAAQ,kBACRoD,YAAa,mBACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,eACRoD,YAAa,eACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAAC,GAAD,CACEhF,OAAQ,cACRoD,YAAa,cACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAAC,GAAD,CACEhF,OAAQ,UACRoD,YAAa,oBACPC,QAAOC,UAASC,WAAUC,sBAKxC,cAAC0B,EAAA,EAAD,UACIhB,EAAmBiB,OAOnBjB,EAAmBnC,KAAI,SAAClC,EAAKuF,GAAN,OACrB,eAACN,EAAA,EAAD,CAEElH,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IAFtD,UAIE,cAACkH,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAACzH,EAAA,EAAD,CACE0D,QAAS,OACToE,UAAW,GACXnE,eAAgB,SAChBoE,aAAc,SAJhB,SAOGzF,EAAI0F,iBACH,cAAChE,EAAA,EAAD,CACED,QAAS,kBAAM0C,EAAe,IAC9BxC,eAAe,EAFjB,SAIE,cAACgE,EAAA,EAAD,CACEC,aAAc5F,EAAI0F,gBAClB/C,MAAM,kBAMhB,cAACuC,EAAA,EAAD,UAAYlF,EAAI6F,eAChB,cAACX,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BnF,EAAI8F,cAC/B,cAACZ,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BnF,EAAI+F,YA3BjC,UACUR,EADV,YACmBvF,EAAIgG,aARzB,cAACf,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWe,QAAS,EAAGlI,GAAI,CAAEE,UAAW,UAAxC,SACE,cAACC,EAAA,EAAD,wC,8BCpFZgI,GAAyC,CAC7CC,SAAU,CACRC,KAAM,cAACC,GAAA,EAAD,CAAa1D,MAAM,YACzB2D,KAAM,WACNC,QAAS,6BAEXC,QAAS,CACPJ,KAAM,cAACK,GAAA,EAAD,CAAM9D,MAAM,YAClB2D,KAAM,UACNC,QAAS,iDAEXG,SAAU,CACRN,KAAM,cAACO,GAAA,EAAD,CAAQhE,MAAM,UACpB2D,KAAM,WACNC,QAAS,6BAEXK,UAAW,CACTR,KAAM,cAACK,GAAA,EAAD,CAAM9D,MAAM,YAClB2D,KAAM,UACNC,QAAS,kDAsBEM,OAjBf,SAAoB7J,GAClB,IAAQ8J,EAAqB9J,EAArB8J,OAAQC,EAAa/J,EAAb+J,SAEhB,OACE,eAACrJ,EAAA,EAAD,CAAK0D,QAAS,OAAQ4F,WAAY,SAAlC,UACE,cAACtJ,EAAA,EAAD,CAAK0D,QAAS,OAAQ4F,WAAY,SAAlC,SACE,cAACC,EAAA,EAAD,CAASC,MAAOhB,GAAWY,GAAQP,QAAnC,SACGL,GAAWY,GAAQV,UAGtBW,GACA,cAAC7I,EAAA,EAAD,CAAYH,GAAI,CAAEoJ,GAAI,GAAtB,SAA4BjB,GAAWY,GAAQR,WC8GxCc,OAzHf,SAAsBpK,GACpB,IAAQ+B,EAAoC/B,EAApC+B,KAAMC,EAA8BhC,EAA9BgC,QAASqI,EAAqBrK,EAArBqK,iBACjBjK,EAAUkK,qBAAW9I,GAC3B,EAAwCvB,mBAAS8B,GAAjD,mBAAOgC,EAAP,KAAqBqD,EAArB,KACMmD,EAAeC,YAAgBC,eACrC,EAA8BxK,mBAAgC,cAA9D,mBAAOwG,EAAP,KAAgBE,EAAhB,KACA,EAA0B1G,mBACZ,eAAZwG,EAA2B,OAAS,OADtC,mBAAOD,EAAP,KAAcE,EAAd,KAIApG,qBAAU,WAERyB,EAAKgB,SAAQ,SAACC,GACZA,EAAI0H,YACkB,cAApB1H,EAAI0H,YAA8B,UAAY1H,EAAI0H,eAEtDtD,EAAgBrF,KACf,CAACA,IAGJ,IAAMsF,EAAqBC,YACzBvD,EACAwD,YAAcf,EAAOC,IAGvB,OACE,eAAC/F,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAAC,GAAD,CACEtF,YAAY,UACZH,KAAMA,EACNC,QAASA,EACTC,WAAYmF,MAGhB,cAACQ,EAAA,EAAD,CAAgBZ,UAAWa,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO/G,GAAI,CAAEgH,SAAU,KAAO,aAAW,eAAzC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,aACRoD,YAAa,cACPC,QAAOC,UAASC,WAAUC,iBAGnCvG,EAAQgB,cACP,cAAC8G,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,eACRoD,YAAa,eACPC,QAAOC,UAASC,WAAUC,iBAItC,cAACuB,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,gBACRoD,YAAa,UACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,cACRoD,YAAa,SACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBAGJ,cAACE,EAAA,EAAD,UACIhB,EAAmBiB,OAOnBjB,EAAmBnC,KAAI,SAAClC,EAAKuF,GAAN,OACrB,eAACN,EAAA,EAAD,CAEElH,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IAFtD,UAIE,cAACkH,EAAA,EAAD,CACEnH,GAAI,CACF4J,WAAW,aAAD,OACRJ,EAAavH,EAAI0H,aADT,gBAFd,SAOGE,YAAa5H,EAAI6H,cAEnBzK,EAAQgB,cACP,cAAC8G,EAAA,EAAD,CAAWlB,UAAU,KAAK8D,MAAM,MAAhC,SACG9H,EAAI6F,eAGT,cAACX,EAAA,EAAD,UAAYlF,EAAI+H,gBAChB,cAAC7C,EAAA,EAAD,UACE,cAAC,GAAD,CAAY4B,OAAQ9G,EAAI0H,gBAE1B,cAACxC,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAAC7D,GAAA,EAAD,CACE/C,QAAQ,YACRkD,QAAS,kBAAM4F,EAAiBrH,EAAIgI,aAFtC,wBAvBJ,UACUzC,EADV,YACmBvF,EAAIgI,gBARzB,cAAC/C,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWe,QAAS,EAAGlI,GAAI,CAAEE,UAAW,UAAxC,SACE,cAACC,EAAA,EAAD,wCCiBH+J,OArGf,SAAuBjL,GACrB,IAAQ+B,EAA2B/B,EAA3B+B,KAAMsI,EAAqBrK,EAArBqK,iBACd,EAAwCpK,mBAAS8B,GAAjD,mBAAOgC,EAAP,KAAqBqD,EAArB,KACA,EAA8BnH,mBAAiC,cAA/D,mBAAOwG,EAAP,KAAgBE,EAAhB,KACA,EAA0B1G,mBACZ,eAAZwG,EAA2B,OAAS,OADtC,mBAAOD,EAAP,KAAcE,EAAd,KAIApG,qBAAU,WACR8G,EAAgBrF,KACf,CAACA,IAGJ,IAAMsF,EAAqBC,YACzBvD,EACAwD,YAAcf,EAAOC,IAGvB,OACE,eAAC/F,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAAC,GAAD,CACEtF,YAAY,UACZH,KAAMA,EACNC,QAASyF,IAAQC,WAAWwD,SAC5BjJ,WAAYmF,MAGhB,cAACQ,EAAA,EAAD,CAAgBZ,UAAWa,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO/G,GAAI,CAAEgH,SAAU,KAAO,aAAW,eAAzC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,aACRoD,YAAa,eACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,eACRoD,YAAa,eACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,UACE,cAAC,GAAD,CACE/E,OAAQ,gBACRoD,YAAa,UACPC,QAAOC,UAASC,WAAUC,iBAGpC,cAACuB,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBAGJ,cAACE,EAAA,EAAD,UACIhB,EAAmBiB,OAOnBjB,EAAmBnC,KAAI,SAAClC,EAAKuF,GAAN,OACrB,eAACN,EAAA,EAAD,CAEElH,GAAI,CAAE,mCAAoC,CAAEC,OAAQ,IAFtD,UAIE,cAACkH,EAAA,EAAD,UAAY0C,YAAa5H,EAAImI,cAC7B,cAACjD,EAAA,EAAD,UAAYlF,EAAI6F,eAChB,cAACX,EAAA,EAAD,UAAYlF,EAAI+H,gBAChB,cAAC7C,EAAA,EAAD,CACEnH,GAAI,CACFqK,SAAU,IACVC,SAAU,SACVC,aAAc,WACdC,WAAY,UALhB,SAQGvI,EAAIlD,kBAEP,cAACoI,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAAC7D,GAAA,EAAD,CACE/C,QAAQ,YACRkD,QAAS,kBAAM4F,EAAiBrH,EAAIgI,aAFtC,wBAlBJ,UACUzC,EADV,YACmBvF,EAAIgI,gBARzB,cAAC/C,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWe,QAAS,EAAGlI,GAAI,CAAEE,UAAW,UAAxC,SACE,cAACC,EAAA,EAAD,wC,gFC9EZsK,GAAiB,CACrBC,MAAO,CACL9F,MAAO,QACP+F,SAAU,QACVC,SAAU,CACRjG,KAAM,QACNC,MAAO,UACP3E,OAAQ,sBAEV4K,SAAU,CACRlG,KAAM,QACNC,MAAO,UACP3E,OAAQ,QAEV6K,MAAO,CACLnG,KAAM,QACNC,MAAO,UACP3E,OAAQ,SAGZ8K,MAAO,CACLnG,MAAO,QACP+F,SAAU,OACVC,SAAU,CACRjG,KAAM,OACNC,MAAO,UACP3E,OAAQ,QAEV4K,SAAU,CACRlG,KAAM,OACNC,MAAO,UACP3E,OAAQ,QAEV6K,MAAO,CACLnG,KAAM,OACNC,MAAO,UACP3E,OAAQ,SAGZ+K,SAAU,CACRpG,MAAO,OACPgG,SAAU,CACRhG,MAAO,QAETiG,SAAU,CACRjG,MAAO,QAETkG,MAAO,CACLlG,MAAO,UA8DEqG,OAxDf,SAAsBhM,GACpB,IAAQiM,EAA0BjM,EAA1BiM,MAAOF,EAAmB/L,EAAnB+L,SAAUrG,EAAS1F,EAAT0F,KAEnBwG,EAAmB,UAATxG,GAAoBuG,EAAQ,EAItCE,EAAsB,SAC1BC,GAEA,MAAO,CACLC,OAAQb,GAAe9F,GAAM0G,GAAc1G,KAC3C0C,MAAOoD,GAAe9F,GAAM0G,GAAc1G,KAC1C4G,aAAc,GACdtL,OAAQwK,GAAe9F,GAAM0G,GAAcpL,OAC3CD,GAAI,CACFwL,gBAAiBR,EACbP,GAAeO,SAASK,GAAczG,MACtC6F,GAAe9F,GAAM0G,GAAczG,MACvC+F,SAAUF,GAAe9F,GAAMgG,SAC/B/F,MAAOoG,EACHP,GAAeO,SAASpG,MACxB6F,GAAe9F,GAAMC,OAE3BvB,QAAS,OACTC,eAAgB,SAChB2F,WAAY,WAIhB,OACE,eAACtJ,EAAA,EAAD,CAAKC,SAAU,WAAf,UACE,cAACD,EAAA,EAAD,2BACMyL,EAAoB,aAD1B,IAEExL,SAAUuL,EAAU,WAAa,UACjCM,KAAMN,EAAU,EAAI,EACpBlL,OAAQwK,GAAe9F,GAAMiG,SAAS3K,OAJxC,SAME,cAACN,EAAA,EAAD,2BAASyL,EAAoB,aAA7B,aACE,cAACzL,EAAA,EAAD,2BAASyL,EAAoB,UAA7B,aAAwCF,WAG3CC,GACC,cAACxL,EAAA,EAAD,2BACMyL,EAAoB,aAD1B,IAEEnL,OAAQwK,GAAe9F,GAAMiG,SAAS3K,OAFxC,SAIE,cAACN,EAAA,EAAD,2BAASyL,EAAoB,aAA7B,aACE,cAACzL,EAAA,EAAD,eAASyL,EAAoB,qBC+K1BM,OA1Pf,SAAsBzM,GACpB,IAAQ0M,EAA8C1M,EAA9C0M,YAAaC,EAAiC3M,EAAjC2M,WAAYlK,EAAqBzC,EAArByC,KAAMmK,EAAe5M,EAAf4M,WACjCxM,EAAUkK,qBAAW9I,GAE3B,EAAwCvB,qBAAxC,mBAAO4M,EAAP,KAAqBC,EAArB,KACA,EAA8B7M,qBAA9B,mBAAO8M,EAAP,KAAgBC,EAAhB,KACA,EAAgC/M,oBAAkB,GAAlD,mBAAOgN,EAAP,KAAiBC,EAAjB,KA2CA,OAzCA5M,qBAAU,WACJmC,IACFqK,OAAgBlK,GAChBoK,OAAWpK,MAEZ,CAACH,IAEJnC,qBAAU,WACR4M,GACG9M,EAAQgB,cAA4C,eAAlB,OAAVwL,QAAU,IAAVA,OAAA,EAAAA,EAAYlC,gBAEtC,CAACtK,EAASwM,IA+BX,cAACO,GAAA,EAAD,CAAQ1K,KAAMA,EAAMoC,QAAS6H,EAA7B,SACGE,GACC,cAAClM,EAAA,EAAD,CAAKG,EAAG,EAAR,SACE,uBAAMuM,SA/BG,SAACC,GAEhB,GADAA,EAAEC,iBACEV,GAAcC,EAAc,CAC9B,IAAMU,EAAgC,CACpCvC,WAAY4B,EAAW5B,WACvBN,YAAamC,GAEM,aAAjBA,IACFU,EAAWC,mBAAqBT,GAElCJ,EAAWY,KAqBP,UACE,cAACE,GAAA,EAAD,6BACA,eAACC,GAAA,EAAD,WACE,cAAChN,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACmG,GAAA,EAAD,0DAMF,eAACjN,EAAA,EAAD,CAAK0D,QAAS,OAAQ9C,GAAI,EAAGkG,GAAI,EAAGwC,WAAY,SAAhD,UACE,cAACtJ,EAAA,EAAD,CAAKkN,GAAI,EAAT,SACE,cAACxI,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,uBAGJ,cAAC/E,EAAA,EAAD,UAAa0J,YAAagC,EAAWzB,iBAGvC,eAACzK,EAAA,EAAD,CAAK0D,QAAS,OAAQ9C,GAAI,EAAGkG,GAAI,EAAGwC,WAAY,SAAhD,UACE,cAACtJ,EAAA,EAAD,CAAKkN,GAAI,EAAT,SACE,cAACxI,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,4BAGJ,cAAC/E,EAAA,EAAD,UAAa0L,EAAW/D,kBAG1B,eAACnI,EAAA,EAAD,CAAK0D,QAAS,OAAQ9C,GAAI,EAAGkG,GAAI,EAAGwC,WAAY,SAAhD,UACE,cAACtJ,EAAA,EAAD,CAAKkN,GAAI,EAAT,SACE,cAACxI,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,uBAGJ,cAAC/E,EAAA,EAAD,UAAa0L,EAAW7B,gBACxB,cAACrK,EAAA,EAAD,CAAKyJ,GAAI,EAAT,SACE,cAAC,GAAD,CAAczE,KAAK,QAAQuG,MAAOW,EAAWiB,kBAIjD,eAACnN,EAAA,EAAD,CAAK0D,QAAS,OAAQ0J,cAAe,SAAUxM,GAAI,EAAGkG,GAAI,EAA1D,UACE,cAAC9G,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACpC,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,wCAKJ,cAACvF,EAAA,EAAD,CAAKqN,GAAI,EAAT,SACE,cAAC3H,GAAA,EAAD,CACE4H,WAAS,EACT,aAAW,kDACXC,MAAOrB,EAAW9M,iBAAmB,GACrCoO,WAAS,EACTC,QAAS,EACTC,QAAS,EACTC,WAAY,CACVC,UAAU,UAMjBrB,EACC,eAACvM,EAAA,EAAD,WAEE,eAACA,EAAA,EAAD,CAAK0D,QAAS,OAAQ9C,GAAI,EAAGkG,GAAI,EAAGwC,WAAY,SAAhD,UACE,cAACtJ,EAAA,EAAD,CAAKkN,GAAI,EAAT,SACE,cAACxI,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,oCAKJ,cAAC,GAAD,CAAY6D,OAAQ8C,EAAWlC,iBAGL,cAA3BkC,EAAWlC,aACV,eAAChK,EAAA,EAAD,CAAK0D,QAAS,OAAQ9C,GAAI,EAAGkG,GAAI,EAAGwC,WAAY,SAAhD,UACE,cAACtJ,EAAA,EAAD,CAAKkN,GAAI,EAAT,SACE,cAACxI,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,8BAKJ,cAAC/E,EAAA,EAAD,UACG0J,YAAagC,EAAW2B,wBAIH,aAA3B3B,EAAWlC,aACV,eAAChK,EAAA,EAAD,CACE0D,QAAS,OACT0J,cAAe,SACfxM,GAAI,EACJkG,GAAI,EAJN,UAOE,cAAC9G,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACpC,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,qCAKJ,cAACvF,EAAA,EAAD,CAAKqN,GAAI,EAAT,SACE,cAAC3H,GAAA,EAAD,CACE4H,WAAS,EACT,aAAW,kDACXC,MAAOrB,EAAWY,oBAAsB,GACxCU,WAAS,EACTC,QAAS,EACTC,QAAS,EACTC,WAAY,CACVC,UAAU,aAQtB,eAAC5N,EAAA,EAAD,WACE,eAAC8N,GAAA,EAAD,WACE,cAACpJ,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,kCAIF,cAACvF,EAAA,EAAD,CAAKqN,GAAI,EAAT,SACE,eAACU,GAAA,EAAD,CACE9L,GAAG,oBACH+L,KAAK,oBACL,kBAAgB,oBAChBC,SAxJK,SAACtB,GAC1B,IAAMuB,EAAYvB,EAAEwB,OAAOZ,MACT,aAAdW,GACF5B,EAAW,IAEbF,EAAgB8B,IA+IE,UAME,cAACrJ,GAAA,EAAD,CACE0I,MAAM,WACNzI,QAAS,cAACsJ,GAAA,EAAD,CAAOC,UAAQ,IACxB1J,MAAM,WAER,cAACE,GAAA,EAAD,CACE0I,MAAM,WACNzI,QAAS,cAACsJ,GAAA,EAAD,CAAOC,UAAQ,IACxB1J,MAAM,mBAKI,aAAjBwH,GACC,eAACnM,EAAA,EAAD,CACE0D,QAAS,OACT0J,cAAe,SACfxM,GAAI,EACJkG,GAAI,EAJN,UAME,cAAC9G,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACpC,GAAA,EAAD,UACE,cAAClE,EAAA,EAAD,CAAY+E,WAAY,OAAxB,qCAKJ,cAACvF,EAAA,EAAD,CAAKqN,GAAI,EAAT,SACE,cAAC3H,GAAA,EAAD,CACE4H,WAAS,EACTe,UAAQ,EACR,aAAW,wDACXb,WAAS,EACTnM,KAAM,EACNkM,MAAOlB,EACP4B,SArLI,SAACtB,GAC3B,IAAM2B,EAAa3B,EAAEwB,OAAOZ,MAC5BjB,EAAWgC,iBA2LH,eAACC,GAAA,EAAD,WACE,cAAC3K,GAAA,EAAD,CAAQG,QAASiI,EAAanL,QAAQ,WAAtC,SACG0L,EAAW,QAAU,YAEtBA,GACA,cAAC3I,GAAA,EAAD,CAAQ/C,QAAQ,YAAYyC,KAAK,SAAjC,6B,oECyIDkL,OAtXf,SAAwBlP,GACtB,IAAQ0M,EAA4C1M,EAA5C0M,YAAaC,EAA+B3M,EAA/B2M,WAAYlK,EAAmBzC,EAAnByC,KAAM3D,EAAakB,EAAblB,SAGvC,EAOIqQ,aAAwB,CAC1BC,cAAe,CACbC,WAAY,CACV,CACEtE,cAAe,eACf8C,WAAY,EACZyB,SAAU,MACVC,WAAY,GAEd,CACExE,cAAe,kBACf8C,WAAY,EACZyB,SAAU,MACVC,WAAY,OAnBlB/J,EADF,EACEA,QACAgK,EAFF,EAEEA,SACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,MACAC,EALF,EAKEA,SACaC,EANf,EAMEC,UAAaD,OAmBf,EAAiDE,aAAc,CAC7DtK,UACAkJ,KAAM,eAFAqB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,KAAMC,EAA9B,EAA8BA,OAAQC,EAAtC,EAAsCA,OAKhCC,EAAOV,EAAM,sBAAsB,GAEnCW,EAAaC,uBACjB,SAACxR,GACC,IAAMyR,EAAgBC,YAASC,WAC7B3R,EAAS4R,YACTC,KACAC,YACFjB,EAAS,mBAAoB7Q,EAAS+R,kBACtClB,EAAS,iBAAkB7Q,EAASgS,gBACpCnB,EAAS,qBAAsB7Q,EAASiS,oBACxCpB,EAAS,cAAeY,GACxBZ,EAAS,aAAc7Q,EAASuQ,cAElC,CAACM,IAoEH,OAjEArP,qBAAU,WACJxB,GAAY2D,GACd4N,EAAWvR,KAEZ,CAACA,EAAU2D,EAAM4N,IA8DlB,cAAClD,GAAA,EAAD,CAAQ1K,KAAMA,EAAMoC,QAAS6H,EAA7B,SACE,cAAChM,EAAA,EAAD,CAAKG,EAAG,EAAR,SACE,uBAAMuM,SAAUqC,GA3BL,SAAChR,GAEhB,IAAMuS,EAAmC,CACvCH,iBAAgB,OAAE/R,QAAF,IAAEA,OAAF,EAAEA,EAAU+R,iBAC5BC,eACiC,kBAAxBrS,EAAKqS,eACRrS,EAAKqS,eACLG,SAASxS,EAAKqS,gBACpBJ,YAAajS,EAAKiS,YAClBK,mBAAoBtS,EAAKsS,mBACzB1B,WAAY5Q,EAAK4Q,YAGnB2B,EAAiB3B,WAAWtM,SAAQ,SAACmO,EAAU/L,GAC7C+L,EAAS3B,WAAapK,EAClB+L,EAASrR,cAAgBqR,EAAS5B,SACpC4B,EAAS5B,SAAW,SACV4B,EAASrR,aAAgBqR,EAAS5B,WAC5C4B,EAAS5B,SAAW,UAGxB3C,EAAWqE,MAMP,UACE,cAACvD,GAAA,EAAD,kCACA,eAACC,GAAA,EAAD,WACG5O,GACC,cAAC4B,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACmG,GAAA,EAAD,oEAMJ,eAACjN,EAAA,EAAD,CAAK0D,QAAS,OAAQ9C,GAAI,EAAGkG,GAAI,EAAjC,UACE,cAAC9G,EAAA,EAAD,CAAKqH,SAAU,IAAKK,MAAO,IAAKwF,GAAI,EAAGtM,GAAI,EAA3C,SACE,cAAC6P,GAAA,EAAD,CAAYC,QAAQ,cAAcrQ,GAAI,CAAEwK,WAAY,UAApD,SACE,cAACrK,EAAA,EAAD,CAAY+E,WAAY,OAAxB,oEAKJ,cAACvF,EAAA,EAAD,CAAKqH,SAAU,IAAKK,MAAO,IAA3B,SACE,cAAChC,GAAA,EAAD,yBACEiL,WAAS,EACTC,OAAO,QACP5L,KAAK,QACL/C,GAAG,cACHqB,KAAK,SACLrF,QAASiR,EAAOkB,eAChBS,gBAAiB,CAAEC,QAAQ,GAC3BnD,WAAY,CACVoD,WAAY,CACVC,MAAO,CAAEzQ,UAAW,aAGpBuO,EAAS,iBAAkB,CAC7BT,UAAU,EACV4C,QAAS,WACTC,IAAK,KAhBT,IAkBEC,WACEjC,EAAOkB,gBAAkB,0CAMjC,eAACpQ,EAAA,EAAD,CAAK0D,QAAS,OAAQoD,GAAI,EAA1B,UACE,cAAC9G,EAAA,EAAD,CAAKqH,SAAU,IAAK6F,GAAI,EAAGtM,GAAI,EAA/B,SACE,cAAC6P,GAAA,EAAD,CAAYC,QAAQ,cAApB,SACE,cAAClQ,EAAA,EAAD,CAAY+E,WAAY,OAAxB,mDAKJ,cAACvF,EAAA,EAAD,UACE,cAAC0F,GAAA,EAAD,yBACEkL,OAAO,QACP5L,KAAK,QACL/C,GAAG,cACHqB,KAAK,OACLrF,QAASiR,EAAOc,YAChBa,gBAAiB,CAAEC,QAAQ,IACvBhC,EAAS,cAAe,CAC1BT,UAAU,KARd,IAUE8C,WAAYjC,EAAOc,aAAe,+BAKxC,eAAChQ,EAAA,EAAD,CAAK8G,GAAI,EAAT,UACE,eAAC9G,EAAA,EAAD,CACE0D,QAAS,OACTC,eAAgB,QAChB2F,WAAY,SAHd,UAKE,cAACtJ,EAAA,EAAD,CAAKkN,GAAI,EAAT,SACE,cAACuD,GAAA,EAAD,CAAYC,QAAQ,aAApB,SACE,cAAClQ,EAAA,EAAD,CAAY+E,WAAY,OAAxB,sCAKJ,cAACR,GAAA,EAAD,aACEE,MAAM,UAENC,UAAWwK,EACXqB,WAAY,CACV,aAAc,4CAEZjC,EAAS,2BAGjB,cAAC9O,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACtG,EAAA,EAAD,CAAYK,QAAQ,QAApB,2DAMJ,eAACb,EAAA,EAAD,CAAK0D,QAAS,OAAQ0J,cAAe,SAArC,UACE,eAACpN,EAAA,EAAD,CAAK0D,QAAS,OAAd,UACE,cAAC1D,EAAA,EAAD,CAAKqH,SAAU,IAAK6F,GAAI,EAAxB,SACE,cAACuD,GAAA,EAAD,CAAYC,QAAQ,wBAApB,SACE,cAAClQ,EAAA,EAAD,CAAY+E,WAAY,OAAxB,6BAGJ,eAACvF,EAAA,EAAD,CACEqH,SAAU,IACVK,MAAO,IACPhE,QAAS,OACT4F,WAAY,SAJd,UAME,cAACC,EAAA,EAAD,CACEC,MAAM,sDACN4H,UAAU,MAFZ,SAIE,cAACC,GAAA,EAAD,CAAchR,GAAI,CAAE6M,GAAI,GAAKlC,SAAS,YAExC,cAACyF,GAAA,EAAD,CAAYC,QAAQ,yBAApB,SACE,cAAClQ,EAAA,EAAD,CAAY+E,WAAY,OAAxB,iCAIN,cAACvF,EAAA,EAAD,CAAK0D,QAAS,OAAQ0J,cAAe,SAArC,SACGiC,EAAO7K,KAAI,SAACgM,EAAU/L,GAAO,IAAD,gBAC3B,OACE,cAACzE,EAAA,EAAD,UAEyB,WAAtBwQ,EAAS5B,UACR,eAAC5O,EAAA,EAAD,CAAK0D,QAAS,OAAd,UACE,eAAC1D,EAAA,EAAD,WACE,cAACgE,EAAA,EAAD,CACEgB,KAAK,QACLqG,SAAgB,IAAN5G,EACVR,eAAa,EACbF,QAAS,kBArMd,SAACU,GACtB8K,EAAK9K,EAAGA,EAAI,GAoM6B6M,CAAe7M,IAJhC,SAME,cAAC8M,GAAA,EAAD,CAAiBvG,SAAS,YAE5B,cAAChH,EAAA,EAAD,CACEgB,KAAK,QACLqG,SAAU5G,IAAM4K,EAAOzH,OAAS,EAChC3D,eAAa,EACbF,QAAS,kBAzMZ,SAACU,GACxB8K,EAAK9K,EAAGA,EAAI,GAwM6B+M,CAAiB/M,IAJlC,SAME,cAACgN,GAAA,EAAD,CAAmBzG,SAAS,eAGhC,cAAChL,EAAA,EAAD,CAAKqH,SAAU,IAAK6F,GAAI,EAAxB,SACE,cAACxH,GAAA,EAAD,aACEkL,OAAO,QACP5L,KAAK,QACL/C,GAAE,wBAAmBwC,GACrBnB,KAAK,OACLoO,YAAY,yBACZb,gBAAiB,CAAEC,QAAQ,GAC3BnD,WAAY,CACVoD,WAAY,CAAEC,MAAO,CAAE3J,SAAU,OAEnC8J,YACE,UAAAjC,EAAOP,kBAAP,mBAAoBlK,UAApB,eAAwB4F,gBACxB,8BAGFpM,QAAQ,UAACiR,EAAOP,kBAAR,iBAAC,EAAoBlK,UAArB,QAAC,EAAwB4F,gBAC7ByE,EAAS,cAAD,OAAerK,EAAf,kBAAkC,CAC5C4J,UAAU,QAIhB,eAACrO,EAAA,EAAD,CACE0D,QAAS,OACT4F,WAAY,QACZjC,SAAU,IAHZ,UAKE,cAACrH,EAAA,EAAD,CAAKqH,SAAU,IAAKK,MAAO,IAA3B,SACE,cAAChC,GAAA,EAAD,aACE2F,SAAUmF,EAASmB,QACnBf,OAAO,QACP5L,KAAK,QACL/C,GAAE,yBAAoBwC,GACtBnB,KAAK,SACLuN,gBAAiB,CAAEC,QAAQ,GAC3BnD,WAAY,CACVoD,WAAY,CACVC,MAAO,CAAEzQ,UAAW,YAGxBtC,QAAQ,UAACiR,EAAOP,kBAAR,iBAAC,EAAoBlK,UAArB,QAAC,EAAwB0I,YACjCgE,YACE,UAAAjC,EAAOP,kBAAP,mBAAoBlK,UAApB,eAAwB0I,aACxB,mCAEE2B,EAAS,cAAD,OAAerK,EAAf,eAA+B,CACzC4J,UAAU,EACV4C,QAAS,WACTC,IAAK,QAIX,cAAClR,EAAA,EAAD,CAAKyJ,GAAI,EAAG7I,GAAI,EAAhB,SACE,cAAC2I,EAAA,EAAD,CACEC,MACEgH,EAASmB,QACL,8DACA,GAJR,SAOE,8BACE,cAAC3N,EAAA,EAAD,CACEqH,SACEmF,EAASmB,SAlQnBtC,EAAO9M,QAAO,SAACiO,GACrC,MAA6B,WAAtBA,EAAS5B,YAEKhH,QAAU,EAkQD7D,QAAS,WA9Pd,IAAC8D,EACxBwH,EADwBxH,EA8PwCpD,GA7PlDtF,aAChBkQ,EAAOxH,GAAO+G,SAAW,SACzBY,EAAO3H,EAAD,YAAC,eACFwH,EAAOxH,IADN,IAEJ+G,SAAU,aAGZa,EAAO5H,IAiPqB,SAOE,cAACoB,GAAA,EAAD,mBA1FNuH,EAASvO,SAsGzB,cAACjC,EAAA,EAAD,CAAKY,GAAI,EAAT,SACE,cAACgD,GAAA,EAAD,CACE/C,QAAQ,YACR+Q,UAAW,cAACC,GAAA,EAAD,IACX9N,QA7RU,WACxBuL,EAAO,CAAET,WAAYQ,EAAOzH,UAyRhB,kCAUN,eAAC2G,GAAA,EAAD,YACW,OAARnQ,QAAQ,IAARA,OAAA,EAAAA,EAAU+R,mBACT,cAACvM,GAAA,EAAD,CAAQG,QAASiI,EAAanL,QAAQ,WAAtC,oBAIF,cAAC+C,GAAA,EAAD,CAAQ/C,QAAQ,YAAYyC,KAAK,SAAjC,6B,yCCvXGwO,OAhBf,SAAkBxS,GAChB,IAAQyS,EAAqCzS,EAArCyS,SAAUxE,EAA2BjO,EAA3BiO,MAAO1F,EAAoBvI,EAApBuI,MAAUmK,EAAnC,aAA6C1S,EAA7C,IAEA,OACE,6CACE2S,KAAK,WACLC,OAAQ3E,IAAU1F,EAClB5F,GAAE,0BAAqB4F,GACvB,uCAA+BA,IAC3BmK,GALN,aAOGzE,IAAU1F,GAAS,cAAC7H,EAAA,EAAD,CAAKK,GAAI,CAAEF,EAAG,GAAd,SAAoB4R,QCqN/BI,OA1Mf,WACE,MAAsC5S,mBAAS,GAA/C,mBAAO6S,EAAP,KAAoB3L,EAApB,KACA,EAAgDlH,oBAAS,GAAzD,mBAAO8S,EAAP,KAAyBC,EAAzB,KACA,EAAoD/S,oBAAS,GAA7D,mBAAOgT,EAAP,KAA2BC,EAA3B,KACA,EAAgCjT,qBAAhC,mBAAOnB,EAAP,KAAiBqU,EAAjB,KACA,EAAoClT,mBAA8B,IAAImT,KAAtE,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCrT,mBAA6B,IAAnE,mBAAOsT,EAAP,KAAoBC,EAApB,KACA,EAAsCvT,mBAA6B,IAAnE,mBAAOwT,EAAP,KAAoBC,EAApB,KACA,EAAsCzT,mBAA4B,IAAlE,mBAAO0T,EAAP,KAAoBC,EAApB,KACA,GAA8C3T,qBAA9C,qBAAO4T,GAAP,MAAwBC,GAAxB,MAEAxT,qBAAU,WACRyT,OACC,IAEHzT,qBAAU,WAER,IAAM0T,EAAgB,IAAIZ,IAC1BK,EAAY1Q,SAAQ,SAACkR,GACfD,EAAc3V,IAAI4V,EAAQjL,SAC5BgL,EAAcE,IACZD,EAAQjL,QAERgL,EAAc3V,IAAI4V,EAAQjL,SAAW,GAGvCgL,EAAcE,IAAID,EAAQjL,QAAS,MAGvCsK,EAAcU,KACb,CAACP,IAEJnT,qBAAU,WAEJ+S,EAAW3N,MAAQ5G,GACrBK,IAAiBoB,MAAK,SAAC4T,GACrB,IAAMC,EAAiBC,YAAuBF,EAAUd,GACxDe,EAAerR,SAAQ,SAACC,GACtBA,EAAI0F,gBAAkB2K,EAAWhV,IAAI2E,EAAIgG,SACzChG,EAAI+F,SAAWjK,EAASgS,gBAAkB,IAAM9N,EAAI8F,aAAe,MAErE0K,EAAeY,QAGlB,CAACf,EAAYvU,IAEhBwB,qBAAU,WAES,OAAbxB,GACFoU,GAAsB,KAEvB,CAACpU,IAMJ,IAAMiV,GAAoB,iDAAG,kHAEGnV,IAFH,cAErB0V,EAFqB,OAG3BnB,EAAYmB,GAHe,SAMMlV,IANN,QAMrBmV,EANqB,QAQRpQ,KAAKqQ,KAElBC,EAAyBF,EAAmBtR,QAAO,SAACD,GACxD,MAA2B,cAApBA,EAAI0H,eAGbgJ,EAAee,GACfb,EAAeW,GAfY,4CAAH,qDA0DpBG,GAAwB,iDAAG,WAAOC,GAAP,qFAE3BA,EAAY9D,iBAFe,gCAGvB5R,EAAe0V,GAHQ,6CAKvB9V,EAAY8V,GALW,cAQ/BzB,GAAsB,GARS,UAUCtU,IAVD,QAUzBgW,EAVyB,OAW/BzB,EAAYyB,GAXmB,4CAAH,sDAcxBC,GAAsB,iDAAG,WAAOC,GAAP,kFAE7B9B,GAAoB,GAFS,SAIvB3T,EAAcyV,GAJS,uBAMvBf,KANuB,2CAAH,sDAS5B,OACE,qCACGjV,GACC,eAAC4B,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,CAAK0D,QAAS,OAAQC,eAAgB,MAAOuJ,GAAI,EAAGpG,GAAI,EAAxD,UACE,cAACyC,EAAA,EAAD,CAASC,MAAM,8CAAf,SACE,cAACxF,EAAA,EAAD,CAAYD,QAAS,kBAAM0C,EAAe,IAA1C,SACE,cAACwB,EAAA,EAAD,CAAOC,aAAc6K,EAAYnL,OAAQ3C,MAAM,UAA/C,SACE,cAACoP,EAAA,EAAD,UAIN,cAAC9K,EAAA,EAAD,CAASC,MAAM,mCAAf,SACE,cAACxF,EAAA,EAAD,CAAYD,QAtES,WAC/ByO,GAAsB,IAqEZ,SACE,cAAC8B,EAAA,EAAD,WAIN,cAACtU,EAAA,EAAD,CAAKK,GAAI,CAAEkU,aAAc,EAAGC,YAAa,WAAzC,SACE,eAACC,EAAA,EAAD,CACElH,MAAO6E,EACPnE,SAnFY,SAACpL,EAA6B6R,GACpDjO,EAAeiO,IAmFL,aAAW,qBAHb,UAKE,cAACC,EAAA,EAAD,aAAKhQ,MAAM,YAAeiQ,YAAU,KACpC,cAACD,EAAA,EAAD,aAAKhQ,MAAM,YAAeiQ,YAAU,KACpC,cAACD,EAAA,EAAD,aAAKhQ,MAAM,WAAciQ,YAAU,UAGvC,cAAC,GAAD,CAAUrH,MAAO6E,EAAavK,MAAO,EAArC,SACE,cAAC,GAAD,CAAexG,KAAMwR,EAAapM,eAAgBA,MAEpD,cAAC,GAAD,CAAU8G,MAAO6E,EAAavK,MAAO,EAArC,SACE,cAAC,GAAD,CACExG,KAAM0R,EACNpJ,iBAxF+B,SAACkL,GAC1CzB,GACEL,EAAY7P,MAAK,SAACqQ,GAAD,OAAaA,EAAQjJ,aAAeuK,MAEvDvC,GAAoB,QAuFd,cAAC,GAAD,CAAU/E,MAAO6E,EAAavK,MAAO,EAArC,SACE,cAAC,GAAD,CACExG,KAAM4R,EACN3R,QAASyF,IAAQC,WAAW8N,QAC5BnL,iBAxF8B,SAACkL,GACzCzB,GACEH,EAAY/P,MAAK,SAACqQ,GAAD,OAAaA,EAAQjJ,aAAeuK,MAEvDvC,GAAoB,WA0FlB,cAAC,GAAD,CACEtG,YAxF4B,SAACnJ,EAAgBkS,GAE7CA,GADsB,CAAC,gBAAiB,iBACZhV,SAASgV,IAGzCvC,GAAsB,IAoFlBvG,WAAY+H,GACZjS,KAAMwQ,EACNnU,SAAUA,GAAY,OAExB,cAAC,GAAD,CACE4N,YAtF0B,SAACnJ,EAAgBkS,GAE3CA,GADsB,CAAC,gBAAiB,iBACZhV,SAASgV,IAGzCzC,GAAoB,IAkFhBrG,WAAYkI,GACZpS,KAAMsQ,EACNnG,WAAYiH,IAAmB,WC7MxB6B,OAdf,SAAwB1V,GACtB,IAAQ+I,EAAY/I,EAAZ+I,QACR,OACE,eAACrI,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAK8G,GAAI,EAAGpD,QAAS,OAAQC,eAAgB,SAA7C,SACE,cAACnD,EAAA,EAAD,CAAYwK,SAAU,GAAtB,6BAEF,cAAChL,EAAA,EAAD,CAAK0D,QAAS,OAAQC,eAAgB,SAAtC,SACE,cAAC,GAAD,CAAc4H,MAAOlD,EAASrD,KAAK,gBCD5B,SAASiQ,GAAmB3V,GACzC,IAAQ0M,EAAqC1M,EAArC0M,YAAakJ,EAAwB5V,EAAxB4V,cAAenT,EAASzC,EAATyC,KACpC,OACE,8BACE,eAAC0K,GAAA,EAAD,CACE1K,KAAMA,EACNoC,QAAS6H,EACT,kBAAgB,4BAChB,mBAAiB,kCAJnB,UAME,cAACe,GAAA,EAAD,CAAa9K,GAAG,4BAAhB,0BACA,cAAC+K,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAmBhL,GAAG,kCAAtB,mEAIF,eAACsM,GAAA,EAAD,WACE,cAAC3K,GAAA,EAAD,CAAQG,QAASiI,EAAanL,QAAQ,WAAtC,oBAGA,cAAC+C,GAAA,EAAD,CAAQG,QAASmR,EAAevE,WAAS,EAAC9P,QAAS,YAAnD,6BC4JKsU,OA/Kf,SAAqB7V,GACnB,IAAQ+I,EACN/I,EADM+I,QAASsG,EACfrP,EADeqP,WAAYyG,EAC3B9V,EAD2B8V,cAAeC,EAC1C/V,EAD0C+V,aAAcC,EACxDhW,EADwDgW,YAEpDC,EAAmB5G,EAAWlL,MAAK,SAAC+R,EAAGC,GAC3C,OAAOD,EAAE3G,WAAa4G,EAAE5G,cAE1B,EAAoCtP,oBAAS,GAA7C,mBAAOmW,EAAP,KAAmBC,EAAnB,KACA,EAAkCpW,oBAAS,GAA3C,mBAAOqW,EAAP,KAAkBC,EAAlB,KAEA,EAAgDtW,qBAAhD,mBAAOuW,EAAP,KAAyBC,EAAzB,KACA,EAA4CxW,mBAAiB,IAA7D,mBAAOL,EAAP,KAAuB8W,EAAvB,KAiBMC,EAAmB,iDAAG,2FACN,OAAhBH,QAAgB,IAAhBA,MAAkB3W,cAAeD,EADX,uBAExByW,GAAc,GAFU,SAIlB3W,EAAW8W,EAAiB3W,YAAaD,GAJvB,uBAMlBoW,IANkB,OAQxBO,GAAa,GARW,2CAAH,qDAqBzB,OACE,eAAC7V,EAAA,EAAD,WACI8V,EAwCA,mCACIF,EA4CA,qCACE,cAAC5V,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACtG,EAAA,EAAD,CAAYwK,SAAU,GAAtB,yBAEF,eAAChL,EAAA,EAAD,CAAK8G,GAAI,EAAT,UACE,eAAC9G,EAAA,EAAD,CAAK0D,QAAS,OAAQ4F,WAAY,SAAUxC,GAAI,EAAhD,UACE,cAACtG,EAAA,EAAD,CAAYH,GAAI,CAAE6M,GAAI,GAAKrM,QAAQ,KAAnC,SACGiV,EAAiBzL,gBAEpB,cAAC,GAAD,CACEkB,MAAOuK,EAAiB3I,WACxBnI,KAAK,aAGT,cAACxE,EAAA,EAAD,CAAYH,GAAI,CAAEyG,GAAI,GAAtB,2EAGA,cAACtG,EAAA,EAAD,uGAKF,cAACR,EAAA,EAAD,CAAK0D,QAAS,OAAQC,eAAgB,MAAOuS,GAAI,EAAjD,SACE,cAACtS,GAAA,EAAD,CAAQG,QAnHY,WAChCgS,OAAoB7T,GACpB2T,GAAa,IAiH2ChV,QAAQ,YAApD,0BAlEJ,uBAAM6L,SAtEY,SAACC,GAC3BA,EAAEC,iBACF+I,GAAc,IAoEN,UACE,cAAC3V,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACtG,EAAA,EAAD,CAAYwK,SAAU,GAAtB,uBAEF,eAAChL,EAAA,EAAD,CAAK8G,GAAI,EAAT,UACE,eAAC9G,EAAA,EAAD,CAAK0D,QAAS,OAAQ4F,WAAY,SAAUxC,GAAI,EAAhD,UACE,cAACtG,EAAA,EAAD,CAAYH,GAAI,CAAE6M,GAAI,GAAKrM,QAAQ,KAAnC,SACGiV,EAAiBzL,gBAEpB,cAAC,GAAD,CACEkB,MAAOuK,EAAiB3I,WACxBnI,KAAK,aAGT,eAACxE,EAAA,EAAD,yFAEiBsV,EAAiB3I,WAAa,GAAK,IAFpD,UAKF,cAACnN,EAAA,EAAD,CAAK0D,QAAS,OAAQ0J,cAAe,SAArC,SACE,cAAC1H,GAAA,EAAD,CACE4H,WAAS,EACTe,UAAQ,EACR,aAAW,4CACXb,WAAS,EACTnM,KAAM,EACN4M,SAAU,SAACtB,GAAD,OAAOqJ,EAAkBrJ,EAAEwB,OAAOZ,YAGhD,eAACvN,EAAA,EAAD,CAAK0D,QAAS,OAAQC,eAAgB,MAAOuS,GAAI,EAAjD,UACE,cAACtS,GAAA,EAAD,CACEG,QA1GY,WAC1BgS,OAAoB7T,GACpBmT,KAyGcxU,QAAQ,WACRR,GAAI,CAAE6M,GAAI,GAHZ,oBAOA,cAACtJ,GAAA,EAAD,CAAQ/C,QAAQ,YAAYyC,KAAK,SAAjC,4BA9ER,qCACE,cAACtD,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACtG,EAAA,EAAD,CAAYwK,SAAU,GAAtB,uBAEF,cAAChL,EAAA,EAAD,CAAK8G,GAAI,EAAT,SACE,cAACtG,EAAA,EAAD,mEAIF,cAACR,EAAA,EAAD,CAAK0D,QAAS,OAAQ0J,cAAe,SAArC,SACGmI,EAAiB/Q,KAAI,SAACgM,GAAD,OACpB,cAAC5M,GAAA,EAAD,CACEyH,SAAUhD,EAAUmI,EAASrD,WAAa,EAE1CnI,KAAK,QACL3E,GAAI,CAAEyG,GAAI,GACVjG,QAAQ,YACRkD,QAAS,kBAxDM,SAACyM,GAC5B4E,EAAc/M,EAAUmI,EAASrD,YACjC4I,EAAoBvF,GAsDO2F,CAAqB3F,IANtC,SAQE,eAACxQ,EAAA,EAAD,CACE0D,QAAS,OACTC,eAAgB,gBAChB+D,MAAO,OACP4B,WAAY,SAJd,UAME,cAAC9I,EAAA,EAAD,CAAY4V,cAAe,OAA3B,SACG5F,EAASnG,gBAEZ,cAAC,GAAD,CACEkB,MAAOiF,EAASrD,WAChBnI,KAAK,QACLqG,SAAUhD,EAAUmI,EAASrD,WAAa,QApBhD,mBAEmBqD,EAASrR,sBAsGpC,cAAC8V,GAAD,CACEjJ,YAhIoB,WACxB2J,GAAc,IAgIVT,cAAee,EACflU,KAAM2T,QC9ICW,OA9Bf,SAA0B/W,GACxB,IAAQ+I,EAAmC/I,EAAnC+I,QAASjK,EAA0BkB,EAA1BlB,SAAUkX,EAAgBhW,EAAhBgW,YAC3B,EAAsC/V,mBAAS8I,GAA/C,mBAAOiO,EAAP,KAAoBC,EAApB,KAUA,OARA3W,qBAAU,WACR2W,EAAelO,KACd,CAACA,IAOF,eAACrI,EAAA,EAAD,CAAK0D,QAAS,OAAQC,eAAgB,eAAgBuS,GAAI,EAA1D,UACE,cAAClW,EAAA,EAAD,CAAK0H,MAAO,MAAZ,SACE,cAAC,GAAD,CAAgBW,QAASiO,MAE3B,cAACtW,EAAA,EAAD,CAAK0H,MAAO,MAAZ,SACE,cAAC,GAAD,CACEW,QAASiO,EACTlB,cAAemB,EACf5H,WAAYvQ,EAASuQ,WACrB0G,aAda,WACnBkB,EAAelO,IAcTiN,YAAaA,UC4ERkB,OA9Ff,WACE,MAAgCjX,qBAAhC,mBAAOnB,EAAP,KAAiBqU,EAAjB,KACA,EAAsClT,mBAAS,GAA/C,mBAAO6S,EAAP,KAAoB3L,EAApB,KACA,EAAgDlH,oBAAS,GAAzD,mBAAO8S,EAAP,KAAyBC,EAAzB,KACA,EAAsC/S,mBAA4B,IAAlE,mBAAO0T,EAAP,KAAoBC,EAApB,KACA,EAA8C3T,qBAA9C,mBAAO4T,EAAP,KAAwBC,EAAxB,KACA,EAA4C7T,mBAAiB,GAA7D,mBAAOkX,EAAP,KAAuBC,EAAvB,KAEA9W,qBAAU,WACRyT,MACC,IAEH,IAAMA,EAAoB,iDAAG,kHAEGvU,IAFH,cAErB8U,EAFqB,OAG3BnB,EAAYmB,GAHe,SAKM7U,IALN,QAKrB8U,EALqB,QAORpQ,KAAKqQ,KACxBZ,EAAeW,GAEXD,IACI+C,EAAa9C,EAAmB+C,QAAO,SAACpB,EAAGC,GAC/C,MAAsB,aAAlBA,EAAEzL,YACGwL,EAEAA,EAAIC,EAAEtI,aAEd,GACHuJ,EAAkB9C,EAAgBxD,eAAiBuG,IAlB1B,4CAAH,qDA0C1B,OACE,qCACGvY,GACC,eAAC4B,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAKK,GAAI,CAAEkU,aAAc,EAAGC,YAAa,WAAzC,SACE,eAACC,EAAA,EAAD,CACElH,MAAO6E,EACPnE,SA1BY,SAACpL,EAA6B6R,GACpDjO,EAAeiO,IA0BL,aAAW,qBAHb,UAKE,cAACC,EAAA,EAAD,aAAKhQ,MAAM,WAAciQ,YAAU,KACnC,cAACD,EAAA,EAAD,aAAKhQ,MAAM,WAAciQ,YAAU,UAGvC,cAAC,GAAD,CAAUrH,MAAO6E,EAAavK,MAAO,EAArC,SACE,cAAC,GAAD,CACEzJ,SAAUA,EACViK,QAASoO,EACTnB,YAAajC,MAGjB,cAAC,GAAD,CAAU9F,MAAO6E,EAAavK,MAAO,EAArC,SACE,cAAC,GAAD,CACExG,KAAM4R,EACN3R,QAASyF,IAAQ8P,QAAQ/B,QACzBnL,iBAvC8B,SAACkL,GACzCzB,EACEH,EAAY/P,MAAK,SAACqQ,GAAD,OAAaA,EAAQjJ,aAAeuK,MAEvDvC,GAAoB,WAwClB,cAAC,GAAD,CACEtG,YAtC0B,SAACnJ,EAAgBkS,GAE3CA,GADsB,CAAC,gBAAiB,iBACZhV,SAASgV,IAGzCzC,GAAoB,IAkChBrG,WAAY,aACZlK,KAAMsQ,EACNnG,WAAYiH,GAAmB,WCbxB2D,OA1Ef,WACE,MAAkCvX,qBAAlC,mBAAOwX,EAAP,KAAkBC,EAAlB,KAEApX,qBAAU,WACR5B,QAAQ8B,KAAR,sCAA4CtC,gBAC5CC,IAAUoC,MAAK,SAACC,GACd,GAAIA,GAAwB,kBAATA,EAAmB,CACpC9B,QAAQ8B,KAAR,mDAEA,IAAMxC,EAAS2Z,YAAanX,GAC5BkX,EAAa1Z,QAEbU,QAAQC,MAAM,6DAGjB,IAKH,IAAMiZ,EAAiBnN,cAAWoN,QAAQC,QAAQC,KAE5CC,EAAQC,YAAY,CACxBJ,QAAS,CACPC,QAAS,CACPC,MAAe,OAATN,QAAS,IAATA,OAAA,EAAAA,EAAW5V,YAAa+V,GAEhCM,KAAe,OAATT,QAAS,IAATA,KAAW7V,SAAW,OAAS,SAEvCuW,WAAY,CACVC,aAAc,CACZC,eAAgB,CACdC,KAAM,CACJrS,WAAY,aAOtB,OACE,eAACsS,EAAA,EAAD,CAAeP,MAAOA,EAAtB,UACE,cAACQ,EAAA,EAAD,IACA,qBAAKC,UAAU,MAAf,SACGhB,GACC,cAACjW,EAAWkX,SAAZ,CAAqBzK,MAAOwJ,EAA5B,SACE,cAAC/W,EAAA,EAAD,CAAK0D,QAAS,OAAQqU,UAAU,aAAhC,SACE,eAAC/X,EAAA,EAAD,CACE0H,MAAO,OACPvH,EAAG,EACHwL,OAAQ,QACRjI,QAAS,OACT0J,cAAe,SALjB,UAOE,cAAC,EAAD,IACA,cAACpN,EAAA,EAAD,UAEG+W,EAAUrW,aACT,cAAC,GAAD,IAEA,cAAC,GAAD,eASQ,cAArBlD,eAAoC,cAAC,EAAD,QC1E5Bya,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtY,MAAK,YAAkD,IAA/CuY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHDO,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,OAOJb,M,8bCAahB,EAAe,SAACvX,GAC3B,IAAMqZ,EAAcvb,IAChBwb,EAAY,GAUhB,MARoB,cAAhBD,IACFC,EAAYC,KAEU,uCACnBvZ,GACAnC,IAAUwb,IACVC,IAKMxb,EAAiB,WAAuB,IAAD,EAGlD,OADE,UAAC0b,SAAD,aAAC,mBAAiD,cAIzCC,EAAe,WAC1B,IAAMpC,EAAaqC,OAA2BrC,WAAa,KAC3D,OAAgB,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWlZ,YAAa,IAGpBiM,EAAkB,SAACwN,GAO9B,MANoD,CAClD7O,SAAU6O,EAAMH,QAAQkC,QAAQhC,KAChCvO,QAASwO,EAAMH,QAAQmC,QAAQjC,KAC/BrO,SAAUsO,EAAMH,QAAQlZ,MAAMoZ,KAC9BnO,UAAWoO,EAAMH,QAAQmC,QAAQjC,OAO/BkC,EAAiB,SAAC/D,EAAWC,GACjC,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EACX,GAGI+D,EAAsB,SAAChE,EAAoBC,GACtD,OAAOgE,EAAiBjE,EAAErN,aAAcsN,EAAEtN,eAG/BsR,EAAmB,SAACjE,EAAWC,GAC1C,IAAMiE,EAASlE,EAAEmE,MAAM,KACjBC,EAASnE,EAAEkE,MAAM,KACjBE,EAAQH,EAAOA,EAAO9R,OAAS,GAC/BkS,EAAQF,EAAOA,EAAOhS,OAAS,GACrC,OAAOiS,IAAUC,EACbP,EAAeG,EAAO,GAAIE,EAAO,IACjCL,EAAeM,EAAOC,IAGfhG,EAAkB,SAAC0B,EAAoBC,GAClD,OAAO,IAAIsE,KAAKtE,EAAEtL,YAAY6P,UAAY,IAAID,KAAKvE,EAAErL,YAAY6P,WAGtDrG,EAAyB,SACpCtS,EACAsR,GAEAtR,EAAKoC,KAAK+V,GAEV,IAAMS,EAA8B,GAC9BC,EAA+B,GAUrC,OATA7Y,EAAKgB,SAAQ,SAACC,GACRqQ,EAAWhV,IAAI2E,EAAIgG,SAErB2R,EAAQE,KAAK7X,GAGb4X,EAASC,KAAK7X,MAGZ,GAAN,OAAW2X,EAAYC,IAGnBE,EAAuB,SAAI5E,EAAMC,EAAM1P,GAC3C,OAAI0P,EAAE1P,GAAWyP,EAAEzP,IACT,EAEN0P,EAAE1P,GAAWyP,EAAEzP,GACV,EAEF,GAGIc,EAAgB,SAC3Bf,EACAC,GAOA,MAAgB,iBAAZA,EACe,SAAVD,EACH,SAAC0P,EAAGC,GAAJ,OAAW+D,EAAoBhE,EAAGC,IAClC,SAACD,EAAGC,GAAJ,OAAU+D,EAAoBhE,EAAGC,IAEpB,SAAV3P,EACH,SAAC0P,EAAGC,GAAJ,OAAU2E,EAAqB5E,EAAGC,EAAG1P,IACrC,SAACyP,EAAGC,GAAJ,OAAW2E,EAAqB5E,EAAGC,EAAG1P,KAKjCa,EAAa,SACxByT,EACAC,GAEA,IAAMC,EAAiBF,EAAM7V,KAAI,SAACgW,EAAI3S,GAAL,MAAe,CAAC2S,EAAI3S,MAQrD,OAPA0S,EAAe9W,MAAK,SAAC+R,EAAGC,GACtB,IAAM3P,EAAQwU,EAAW9E,EAAE,GAAIC,EAAE,IACjC,OAAc,IAAV3P,EACKA,EAEF0P,EAAE,GAAKC,EAAE,MAEX8E,EAAe/V,KAAI,SAACgW,GAAD,OAAQA,EAAG,OAGhC,SAAS5F,EAAU/M,GACxB,MAAO,CACL5F,GAAG,OAAD,OAAS4F,GACX,gBAAgB,YAAhB,OAA6BA,IAI1B,SAASqC,EAAauQ,EAAoBC,GAC/C,OAAO5K,WAASC,WAAW0K,EAAYxK,KAAqB0K,eAC1D7K,WAAS8K,cAAgBF,M,kDC3J7B,oJAaazB,EAA0C,CAKrDpb,UAAW,mCAKXsD,UAAW,WAKPtD,EAAYsb,cAEL5b,EAAsD,CACjEsd,UAAW,CACTjd,OAAQ,8CACRC,UAAWob,EAAmBpb,WAAa,IAE7Cid,YAAa,CACXld,OAAQ,8CACRC,aAEFkd,eAAgB,CACdnd,OAAQ,4BACRC,cAISoS,EAAsB,sBAgBtBlJ,EAAmB,CAC9BC,WAAY,CACVC,SAAU,CACR,CACExE,OAAQ,eACRkC,MAAO,eACPrB,KAAM,OACNG,KAAMgW,MAGVjP,SAAU,CACR,CACE/H,OAAQ,gBACRkC,MAAO,eACPrB,KAAM,QAER,CACEb,OAAQ,eACRkC,MAAO,eACPrB,KAAM,OACNG,KAAMgW,MAGV3E,QAAS,CACP,CACErS,OAAQ,gBACRkC,MAAO,eACPrB,KAAM,QAQR,CACEb,OAAQ,cACRkC,MAAO,SACPrB,KAAM,OACNmC,aAAc,SAACuV,GACb,MAAY,cAARA,EACK,UAEAA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAAGC,gBAIxD,CACE3Y,OAAQ,eACRkC,MAAO,eACPrB,KAAM,OACNG,KAAMgW,OAUZ5C,QAAS,CACP/B,QAAS,CACP,CACErS,OAAQ,gBACRkC,MAAO,eACPrB,KAAM,QAER,CACEb,OAAQ,cACRkC,MAAO,SACPrB,KAAM,OACNmC,aAAc,SAACuV,GACb,MAAY,cAARA,EACK,UAEAA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAAGC,qB","file":"static/js/main.7d9d60b8.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { EnvConfig } from \"./constants\";\nimport { getEnvironment } from \"./helpers\";\nimport {\n  ApiResponse,\n  BalancesTableRow,\n  GetAllBalancesResponse,\n  GetInfoResponse,\n  GetSettingsResponse,\n  GetSubmittedRequestsResponse,\n  RequestsTableRow,\n  RequestUpdateData,\n  LtiAppInfo,\n  TokensSettings,\n} from \"./types\";\n\nconst config = EnvConfig[getEnvironment()];\n\n/** INSTRUCTOR */\n\nexport const getInfo = async (): Promise<LtiAppInfo | null> => {\n  try {\n    const res = await axios.get<GetInfoResponse>(\n      `${config.apiUrl}/info?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n};\n\nexport const getInstructorSettings =\n  async (): Promise<TokensSettings | null> => {\n    try {\n      const res = await axios.get<GetSettingsResponse>(\n        `${config.apiUrl}/instructor/settings?PHPSESSID=${config.sessionId}`\n      );\n      return res.data.data;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  };\n\nexport const addSettings = async (settings: TokensSettings): Promise<void> => {\n  try {\n    const body = settings;\n    await axios.post<ApiResponse>(\n      `${config.apiUrl}/instructor/settings?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n\nexport const updateSettings = async (\n  settings: TokensSettings\n): Promise<void> => {\n  try {\n    const body = settings;\n    await axios.put<ApiResponse>(\n      `${config.apiUrl}/instructor/settings?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n\nexport const getAllBalances = async (): Promise<BalancesTableRow[]> => {\n  try {\n    const res = await axios.get<GetAllBalancesResponse>(\n      `${config.apiUrl}/instructor/balances?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data || [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nexport const getSubmittedRequests = async (): Promise<RequestsTableRow[]> => {\n  try {\n    const res = await axios.get<GetSubmittedRequestsResponse>(\n      `${config.apiUrl}/instructor/requests?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data || [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nexport const updateRequest = async (updateData: RequestUpdateData) => {\n  console.log(\"UPDATING request\");\n  try {\n    const body = updateData;\n    await axios.put<ApiResponse>(\n      `${config.apiUrl}/instructor/requests?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n\n/** LEARNER */\n\nexport const getLearnerSettings = async (): Promise<TokensSettings | null> => {\n  try {\n    const res = await axios.get<GetSettingsResponse>(\n      `${config.apiUrl}/learner/settings?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n};\n\nexport const getLearnerRequestHistory = async (): Promise<\n  RequestsTableRow[]\n> => {\n  try {\n    const res = await axios.get<GetSubmittedRequestsResponse>(\n      `${config.apiUrl}/learner/requests?PHPSESSID=${config.sessionId}`\n    );\n    return res.data.data || [];\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nexport const addRequest = async (\n  categoryId: string,\n  learnerComment: string\n): Promise<void> => {\n  try {\n    const body = {\n      category_id: categoryId,\n      learner_comment: learnerComment,\n    };\n    await axios.post<ApiResponse>(\n      `${config.apiUrl}/learner/requests?PHPSESSID=${config.sessionId}`,\n      body\n    );\n    return;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\n","import { Box, Card, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { getInfo } from \"../utils/api-connector\";\nimport { getEnvironment } from \"../utils/helpers\";\nimport { LtiAppInfo } from \"../utils/types\";\n\ninterface DevPanelProps {}\n\n/**\n * Show development information during pre-build.\n * Dev panel does not rely on appInfo context.\n * This is because the dev panel should show whether\n * or not the appInfo was successfully retrieved.\n */\nfunction DevPanel(props: DevPanelProps) {\n  // const [info, setInfo] = useState<any>(null);\n  const [expired, setExpired] = useState<boolean>(false);\n  const [appInfo, setAppInfo] = useState<LtiAppInfo>();\n\n  useEffect(() => {\n    getInfo().then((info) => {\n      if (\n        !info ||\n        (typeof info === \"string\" &&\n          (info as string).includes(\"Session expired\"))\n      ) {\n        console.error(\"SESSION EXPIRED\");\n        setExpired(true);\n      } else {\n        setAppInfo(info);\n        setExpired(false);\n      }\n    });\n  }, []);\n\n  return (\n    <Box position={\"absolute\"} bottom={0} p={2}>\n      <Card sx={{ border: \"2px solid red\" }}>\n        <Box p={2} textAlign=\"center\">\n          <Typography>React App status is: {getEnvironment()}</Typography>\n          <Typography>\n            Name: {appInfo?.username}, Role:{\" \"}\n            {appInfo?.isInstructor ? \"Instructor\" : \"Learner\"}\n          </Typography>\n          <Typography>Session ID is: {appInfo?.sessionId}</Typography>\n          Session is: {expired ? \"EXPIRED\" : \"VALID\"}\n        </Box>\n      </Card>\n    </Box>\n  );\n}\n\nexport default DevPanel;\n","import { Box, Typography } from \"@mui/material\";\n\ninterface HeaderProps {}\n\n/** Show basic header info */\nfunction Header(props: HeaderProps) {\n  return (\n    <Box mt={6}>\n      <Typography variant=\"h3\">Tokens</Typography>\n    </Box>\n  );\n}\n\nexport default Header;\n","import { createContext } from \"react\";\nimport { LtiAppInfo } from \"./types\";\n\nexport const AppContext = createContext<LtiAppInfo>({\n  apiUrl: \"\",\n  contextId: \"\",\n  isInstructor: false,\n  linkId: \"\",\n  sessionId: \"\",\n  username: \"\",\n  darkMode: false,\n  baseColor: \"\",\n});\n","import { FilterList } from \"@mui/icons-material\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  IconButton,\n  Popover,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { MouseEvent, useEffect, useState } from \"react\";\n\ninterface FilterProps {\n  rows: any[];\n  filters: any[];\n  filterRows: (rows: any[]) => void;\n  buttonLabel?: string;\n}\n\ntype FilterEnumerableReference = Record<string, Record<string, boolean>>;\ntype FilterActiveReference = Record<string, Record<string, boolean>>;\n\n/** Filters data */\nfunction Filter(props: FilterProps) {\n  const { rows, filters, filterRows, buttonLabel } = props;\n  //   const [filteredRows, setFilteredRows] = useState(rows);\n  const [enumReference, setEnumReference] = useState<FilterEnumerableReference>(\n    {}\n  );\n  const [activeReference, setActiveReference] = useState<FilterActiveReference>(\n    {}\n  );\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n  const id = open ? \"filter-popover\" : undefined;\n\n  useEffect(() => {\n    // Assemble data for the filter capability\n    const newEnumReference: FilterEnumerableReference = {};\n    const newActiveReference: FilterActiveReference = {};\n    rows.forEach((row) => {\n      filters.forEach((filter) => {\n        // Add each distinct column/row value to the map\n        addReference(newEnumReference, filter.column, row);\n        // Set the active state for the rows that are passed in\n        addReference(newActiveReference, filter.column, row);\n      });\n    });\n    setActiveReference(newActiveReference);\n    setEnumReference(newEnumReference);\n  }, [rows, filters]);\n\n  const addReference = (\n    reference: FilterEnumerableReference | FilterActiveReference,\n    col: any,\n    row: any[]\n  ) => {\n    if (reference[col]) {\n      reference[col][row[col]] = true;\n    } else {\n      reference[col] = {\n        [row[col]]: true,\n      };\n    }\n  };\n\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  //   const handleFilterTextChange = (\n  //     e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  //     col: string\n  //   ) => {\n  //     console.log(e.target.value);\n  //   };\n\n  const toggleCheckbox = (col: string, key: string) => {\n    activeReference[col][key] = !activeReference[col][key];\n    setActiveReference({ ...activeReference });\n    applyFilters();\n  };\n\n  const toggleAllCheckbox = (col: string) => {\n    let toggle = true;\n    const allChecked = allOptionsChecked(col);\n    if (allChecked) {\n      // Deselect all\n      toggle = false;\n    } else {\n      // Select all\n      toggle = true;\n    }\n    for (let key in activeReference[col]) {\n      activeReference[col][key] = toggle;\n    }\n    setActiveReference({ ...activeReference });\n    applyFilters();\n    console.log(col, \" all \", allChecked);\n  };\n\n  const allOptionsChecked = (col: string) => {\n    const keys = Object.keys(activeReference[col]);\n    return !keys.find((key) => activeReference[col][key] === false);\n  };\n\n  const anyOptionsChecked = (col: string) => {\n    const keys = Object.keys(activeReference[col]);\n    return !!keys.find((key) => activeReference[col][key] === true);\n  };\n\n  //   const handleClickApply = () => {\n  //     handleClose();\n  //     applyFilters();\n  //   };\n\n  const applyFilters = () => {\n    let filteredRows: any[] = rows;\n    for (const filter of filters) {\n      filteredRows = filteredRows.filter((row) => {\n        if (filter.type === \"enum\") {\n          const filterOut = !activeReference[filter.column][row[filter.column]];\n          if (filterOut) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n    filterRows(filteredRows);\n  };\n\n  const getFilterOptions = (filter: any) => {\n    let options = Object.keys(enumReference[filter.column]);\n    if (filter.sort) {\n      options.sort(filter.sort);\n    } else {\n      options.sort();\n    }\n    return options;\n  };\n\n  return (\n    <Box display={\"flex\"} justifyContent={\"end\"}>\n      {buttonLabel ? (\n        <Button\n          aria-describedby={id}\n          endIcon={<FilterList />}\n          variant=\"outlined\"\n          onClick={handleClick}\n        >\n          Filters\n        </Button>\n      ) : (\n        <IconButton disableRipple aria-describedby={id} onClick={handleClick}>\n          {<FilterList />}\n        </IconButton>\n      )}\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n      >\n        <Box display={\"flex\"} flexWrap={\"wrap\"}>\n          {filters.map((filter, i) => (\n            <Box key={`${filter.column}-${i}`} p={2}>\n              <FormLabel>{filter.label}</FormLabel>\n              {filter.type === \"enum\" ? (\n                <Box display={\"flex\"}>\n                  {enumReference[filter.column] && (\n                    <FormGroup>\n                      {/* All or none option */}\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            color=\"default\"\n                            checked={allOptionsChecked(filter.column)}\n                            indeterminate={\n                              !allOptionsChecked(filter.column) &&\n                              anyOptionsChecked(filter.column)\n                            }\n                            onClick={() => toggleAllCheckbox(filter.column)}\n                          />\n                        }\n                        label={\n                          <Typography fontWeight={\"bold\"}>\n                            Select all\n                          </Typography>\n                        }\n                      />\n                      {getFilterOptions(filter).map((key, i) => {\n                        return (\n                          <Box key={`${filter.column}-${i}-${key}`}>\n                            <FormControlLabel\n                              control={\n                                <Checkbox\n                                  size=\"small\"\n                                  color=\"default\"\n                                  checked={\n                                    activeReference[filter.column][key] === true\n                                  }\n                                  onClick={() =>\n                                    toggleCheckbox(filter.column, key)\n                                  }\n                                />\n                              }\n                              label={\n                                filter.valueMapping\n                                  ? filter.valueMapping(key)\n                                  : key\n                              }\n                            />\n                          </Box>\n                        );\n                      })}\n                    </FormGroup>\n                  )}\n                </Box>\n              ) : (\n                <Box>\n                  <TextField size=\"small\" type={filter.type} />\n                </Box>\n              )}\n            </Box>\n          ))}\n        </Box>\n        {/* <Box display={\"flex\"} justifyContent={\"end\"} pr={1} pb={1}>\n          <Button sx={{ mr: 1 }} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button variant=\"contained\" onClick={handleClickApply}>\n            Apply\n          </Button>\n        </Box> */}\n      </Popover>\n    </Box>\n  );\n}\n\nexport default Filter;\n","import { Box, TableSortLabel } from \"@mui/material\";\nimport { visuallyHidden } from \"@mui/utils\";\nimport { Dispatch, MouseEvent, SetStateAction } from \"react\";\nimport { SortOrder } from \"../utils/types\";\n\ninterface TableHeaderSortProps {\n  column: string;\n  columnLabel: string;\n  order: SortOrder;\n  orderBy: any;\n  setOrder: Dispatch<SetStateAction<SortOrder>>;\n  setOrderBy: Dispatch<SetStateAction<any>>;\n}\n\n/** Sorts data from the header of a table */\nfunction TableHeaderSort(props: TableHeaderSortProps) {\n  const { column, columnLabel, order, orderBy, setOrder, setOrderBy } = props;\n\n  const handleRequestSort = (event: MouseEvent<unknown>, property: any) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const createSortHandler = (property: any) => (event: MouseEvent<unknown>) => {\n    handleRequestSort(event, property);\n  };\n  return (\n    <TableSortLabel\n      active={orderBy === column}\n      direction={orderBy === column ? order : \"asc\"}\n      onClick={createSortHandler(column)}\n    >\n      {columnLabel}\n      {orderBy === column ? (\n        <Box component=\"span\" sx={visuallyHidden}>\n          {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n        </Box>\n      ) : null}\n    </TableSortLabel>\n  );\n}\n\nexport default TableHeaderSort;\n","import {\n  Badge,\n  Box,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { FILTERS } from \"../utils/constants\";\nimport { BalancesTableRow, SortOrder } from \"../utils/types\";\nimport Filter from \"./Filter\";\nimport { getComparator, stableSort } from \"../utils/helpers\";\nimport TableHeaderSort from \"./TableHeaderSort\";\n\ninterface BalancesTableProps {\n  rows: BalancesTableRow[];\n  setTabPosition: Dispatch<SetStateAction<number>>;\n}\n\n/** Shows the balances of all available students */\nfunction BalancesTable(props: BalancesTableProps) {\n  const { rows, setTabPosition } = props;\n  const [filteredRows, setFilteredRows] = useState(rows);\n  const [orderBy, setOrderBy] =\n    useState<keyof BalancesTableRow>(\"pendingRequests\");\n  const [order, setOrder] = useState<SortOrder>(\n    orderBy === \"pendingRequests\" ? \"desc\" : \"asc\"\n  );\n\n  useEffect(() => {\n    setFilteredRows(rows);\n  }, [rows]);\n\n  /** The filteredRows are automatically sorted each render */\n  const sortedFilteredRows = stableSort(\n    filteredRows,\n    getComparator(order, orderBy)\n  );\n\n  return (\n    <Box>\n      <Box mb={1}>\n        <Filter\n          buttonLabel=\"Filters\"\n          rows={rows}\n          filters={FILTERS.INSTRUCTOR.BALANCES}\n          filterRows={setFilteredRows}\n        />\n      </Box>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" width={190}>\n                <TableHeaderSort\n                  column={\"pendingRequests\"}\n                  columnLabel={\"Pending Requests\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell>\n                <TableHeaderSort\n                  column={\"learner_name\"}\n                  columnLabel={\"Student Name\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableHeaderSort\n                  column={\"tokens_used\"}\n                  columnLabel={\"Tokens Used\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableHeaderSort\n                  column={\"balance\"}\n                  columnLabel={\"Balance Remaining\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {!sortedFilteredRows.length ? (\n              <TableRow>\n                <TableCell colSpan={4} sx={{ textAlign: \"center\" }}>\n                  <Typography>No results</Typography>\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedFilteredRows.map((row, index) => (\n                <TableRow\n                  key={`${index}-${row.user_id}`}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell align=\"center\">\n                    <Box\n                      display={\"flex\"}\n                      minHeight={35}\n                      justifyContent={\"center\"}\n                      alignContent={\"center\"}\n                    >\n                      {/* Show the icon button only if there is a reference to the learner */}\n                      {row.pendingRequests && (\n                        <IconButton\n                          onClick={() => setTabPosition(1)}\n                          disableRipple={true}\n                        >\n                          <Badge\n                            badgeContent={row.pendingRequests}\n                            color=\"warning\"\n                          ></Badge>\n                        </IconButton>\n                      )}\n                    </Box>\n                  </TableCell>\n                  <TableCell>{row.learner_name}</TableCell>\n                  <TableCell align=\"center\">{row.tokens_used}</TableCell>\n                  <TableCell align=\"center\">{row.balance}</TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n\nexport default BalancesTable;\n","import { Cancel, CheckCircle, Info } from \"@mui/icons-material\";\nimport { Box, Tooltip, Typography } from \"@mui/material\";\nimport { RequestStatus } from \"../utils/types\";\n\ninterface StatusNameProps {\n  status: RequestStatus;\n  iconOnly?: boolean;\n}\n\nconst nameConfig: Record<RequestStatus, any> = {\n  ACCEPTED: {\n    icon: <CheckCircle color=\"success\" />,\n    text: \"Accepted\",\n    tooltip: \"Request has been accepted\",\n  },\n  PENDING: {\n    icon: <Info color=\"warning\" />,\n    text: \"Pending\",\n    tooltip: \"Request has not yet been accepted or rejected\",\n  },\n  REJECTED: {\n    icon: <Cancel color=\"error\" />,\n    text: \"Rejected\",\n    tooltip: \"Request has been rejected\",\n  },\n  SUBMITTED: {\n    icon: <Info color=\"warning\" />,\n    text: \"Pending\",\n    tooltip: \"Request has not yet been accepted or rejected\",\n  },\n};\n\n/** Shows the mapped status name and an icon */\nfunction StatusName(props: StatusNameProps) {\n  const { status, iconOnly } = props;\n\n  return (\n    <Box display={\"flex\"} alignItems={\"center\"}>\n      <Box display={\"flex\"} alignItems={\"center\"}>\n        <Tooltip title={nameConfig[status].tooltip}>\n          {nameConfig[status].icon}\n        </Tooltip>\n      </Box>\n      {!iconOnly && (\n        <Typography sx={{ ml: 1 }}>{nameConfig[status].text}</Typography>\n      )}\n    </Box>\n  );\n}\n\nexport default StatusName;\n","import {\n  Box,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport { HistoryTableRow, SortOrder } from \"../utils/types\";\nimport StatusName from \"./StatusName\";\nimport {\n  formatDbDate,\n  getComparator,\n  getStatusColors,\n  stableSort,\n} from \"../utils/helpers\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport Filter from \"./Filter\";\nimport TableHeaderSort from \"./TableHeaderSort\";\n\ninterface HistoryTableProps {\n  rows: HistoryTableRow[];\n  filters: any[];\n  openReviewDialog: (requestId: string) => void;\n}\n\n/** Shows the history of requests of all available students */\nfunction HistoryTable(props: HistoryTableProps) {\n  const { rows, filters, openReviewDialog } = props;\n  const appInfo = useContext(AppContext);\n  const [filteredRows, setFilteredRows] = useState(rows);\n  const statusColors = getStatusColors(useTheme());\n  const [orderBy, setOrderBy] = useState<keyof HistoryTableRow>(\"updated_at\");\n  const [order, setOrder] = useState<SortOrder>(\n    orderBy === \"updated_at\" ? \"desc\" : \"asc\"\n  );\n\n  useEffect(() => {\n    // Prepare data for the table format (to ensure proper sorting)\n    rows.forEach((row) => {\n      row.status_name =\n        row.status_name === \"SUBMITTED\" ? \"PENDING\" : row.status_name;\n    });\n    setFilteredRows(rows);\n  }, [rows]);\n\n  /** The filteredRows are automatically sorted each render */\n  const sortedFilteredRows = stableSort(\n    filteredRows,\n    getComparator(order, orderBy)\n  );\n\n  return (\n    <Box>\n      <Box mb={1}>\n        <Filter\n          buttonLabel=\"Filters\"\n          rows={rows}\n          filters={filters}\n          filterRows={setFilteredRows}\n        />\n      </Box>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <TableHeaderSort\n                  column={\"updated_at\"}\n                  columnLabel={\"Last Action\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              {appInfo.isInstructor && (\n                <TableCell>\n                  <TableHeaderSort\n                    column={\"learner_name\"}\n                    columnLabel={\"Student Name\"}\n                    {...{ order, orderBy, setOrder, setOrderBy }}\n                  ></TableHeaderSort>\n                </TableCell>\n              )}\n              <TableCell>\n                <TableHeaderSort\n                  column={\"category_name\"}\n                  columnLabel={\"Request\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell>\n                <TableHeaderSort\n                  column={\"status_name\"}\n                  columnLabel={\"Status\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell align=\"center\">Action</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {!sortedFilteredRows.length ? (\n              <TableRow>\n                <TableCell colSpan={5} sx={{ textAlign: \"center\" }}>\n                  <Typography>No results</Typography>\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedFilteredRows.map((row, index) => (\n                <TableRow\n                  key={`${index}-${row.request_id}`}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell\n                    sx={{\n                      borderLeft: `5px solid ${\n                        statusColors[row.status_name]\n                      } !important`,\n                    }}\n                  >\n                    {formatDbDate(row.updated_at)}\n                  </TableCell>\n                  {appInfo.isInstructor && (\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.learner_name}\n                    </TableCell>\n                  )}\n                  <TableCell>{row.category_name}</TableCell>\n                  <TableCell>\n                    <StatusName status={row.status_name} />\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => openReviewDialog(row.request_id)}\n                    >\n                      Review\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n\nexport default HistoryTable;\n","import {\n  Box,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { FILTERS } from \"../utils/constants\";\nimport { formatDbDate, getComparator, stableSort } from \"../utils/helpers\";\nimport { RequestsTableRow, SortOrder } from \"../utils/types\";\nimport Filter from \"./Filter\";\nimport TableHeaderSort from \"./TableHeaderSort\";\n\ninterface RequestsTableProps {\n  rows: RequestsTableRow[];\n  openReviewDialog: (requestId: string) => void;\n}\n\n/** Shows the requests of all available students */\nfunction RequestsTable(props: RequestsTableProps) {\n  const { rows, openReviewDialog } = props;\n  const [filteredRows, setFilteredRows] = useState(rows);\n  const [orderBy, setOrderBy] = useState<keyof RequestsTableRow>(\"created_at\");\n  const [order, setOrder] = useState<SortOrder>(\n    orderBy === \"created_at\" ? \"desc\" : \"asc\"\n  );\n\n  useEffect(() => {\n    setFilteredRows(rows);\n  }, [rows]);\n\n  /** The filteredRows are automatically sorted each render */\n  const sortedFilteredRows = stableSort(\n    filteredRows,\n    getComparator(order, orderBy)\n  );\n\n  return (\n    <Box>\n      <Box mb={1}>\n        <Filter\n          buttonLabel=\"Filters\"\n          rows={rows}\n          filters={FILTERS.INSTRUCTOR.REQUESTS}\n          filterRows={setFilteredRows}\n        />\n      </Box>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <TableHeaderSort\n                  column={\"created_at\"}\n                  columnLabel={\"Request Date\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell>\n                <TableHeaderSort\n                  column={\"learner_name\"}\n                  columnLabel={\"Student Name\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell>\n                <TableHeaderSort\n                  column={\"category_name\"}\n                  columnLabel={\"Request\"}\n                  {...{ order, orderBy, setOrder, setOrderBy }}\n                ></TableHeaderSort>\n              </TableCell>\n              <TableCell>Description</TableCell>\n              <TableCell align=\"center\">Action</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {!sortedFilteredRows.length ? (\n              <TableRow>\n                <TableCell colSpan={4} sx={{ textAlign: \"center\" }}>\n                  <Typography>No results</Typography>\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedFilteredRows.map((row, index) => (\n                <TableRow\n                  key={`${index}-${row.request_id}`}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell>{formatDbDate(row.created_at)}</TableCell>\n                  <TableCell>{row.learner_name}</TableCell>\n                  <TableCell>{row.category_name}</TableCell>\n                  <TableCell\n                    sx={{\n                      maxWidth: 200,\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\",\n                      whiteSpace: \"nowrap\",\n                    }}\n                  >\n                    {row.learner_comment}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => openReviewDialog(row.request_id)}\n                    >\n                      Review\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n\nexport default RequestsTable;\n","import { Box } from \"@mui/material\";\n\ninterface TokenGraphicProps {\n  count: number;\n  size: \"small\" | \"large\";\n  disabled?: boolean;\n}\n\nconst styleReference = {\n  large: {\n    color: \"black\",\n    fontSize: \"150px\",\n    outerRim: {\n      size: \"300px\",\n      color: \"#DDCB6B\",\n      border: \"4px dotted #CBB95A\",\n    },\n    innerRim: {\n      size: \"250px\",\n      color: \"#AA8500\",\n      border: \"none\",\n    },\n    inner: {\n      size: \"245px\",\n      color: \"#CBB95A\",\n      border: \"none\",\n    },\n  },\n  small: {\n    color: \"black\",\n    fontSize: \"18px\",\n    outerRim: {\n      size: \"30px\",\n      color: \"#DDCB6B\",\n      border: \"none\",\n    },\n    innerRim: {\n      size: \"24px\",\n      color: \"#AA8500\",\n      border: \"none\",\n    },\n    inner: {\n      size: \"22px\",\n      color: \"#CBB95A\",\n      border: \"none\",\n    },\n  },\n  disabled: {\n    color: \"#888\",\n    outerRim: {\n      color: \"#ccc\",\n    },\n    innerRim: {\n      color: \"#aaa\",\n    },\n    inner: {\n      color: \"#bbb\",\n    },\n  },\n};\n\n/** Show a graphic of a token */\nfunction TokenGraphic(props: TokenGraphicProps) {\n  const { count, disabled, size } = props;\n\n  const stacked = size === \"small\" && count > 1;\n\n  // SHADOW\n  // BEVEL NUMBER\n  const generateTokenStyles = (\n    referenceKey: \"outerRim\" | \"innerRim\" | \"inner\"\n  ) => {\n    return {\n      height: styleReference[size][referenceKey].size,\n      width: styleReference[size][referenceKey].size,\n      borderRadius: 50,\n      border: styleReference[size][referenceKey].border,\n      sx: {\n        backgroundColor: disabled\n          ? styleReference.disabled[referenceKey].color\n          : styleReference[size][referenceKey].color,\n        fontSize: styleReference[size].fontSize,\n        color: disabled\n          ? styleReference.disabled.color\n          : styleReference[size].color,\n      },\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    };\n  };\n\n  return (\n    <Box position={\"relative\"}>\n      <Box\n        {...generateTokenStyles(\"outerRim\")}\n        position={stacked ? \"absolute\" : \"inherit\"}\n        left={stacked ? 5 : 0}\n        border={styleReference[size].outerRim.border}\n      >\n        <Box {...generateTokenStyles(\"innerRim\")}>\n          <Box {...generateTokenStyles(\"inner\")}>{count}</Box>\n        </Box>\n      </Box>\n      {stacked && (\n        <Box\n          {...generateTokenStyles(\"outerRim\")}\n          border={styleReference[size].outerRim.border}\n        >\n          <Box {...generateTokenStyles(\"innerRim\")}>\n            <Box {...generateTokenStyles(\"inner\")}></Box>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default TokenGraphic;\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { ChangeEvent, useContext, useEffect, useState } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { formatDbDate } from \"../utils/helpers\";\nimport {\n  RequestsTableRow,\n  RequestStatus,\n  RequestUpdateData,\n} from \"../utils/types\";\nimport StatusName from \"./StatusName\";\nimport TokenGraphic from \"./TokenGraphic\";\n\ninterface ReviewDialogProps {\n  handleClose: (event?: object, reason?: string) => void;\n  handleSave: (submission: RequestUpdateData) => void;\n  open: boolean;\n  requestRow: RequestsTableRow | null;\n}\n\n/** Show settings form */\nfunction ReviewDialog(props: ReviewDialogProps) {\n  const { handleClose, handleSave, open, requestRow } = props;\n  const appInfo = useContext(AppContext);\n\n  const [actionStatus, setActionStatus] = useState<RequestStatus>();\n  const [comment, setComment] = useState<string>();\n  const [readonly, setReadonly] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (open) {\n      setActionStatus(undefined);\n      setComment(undefined);\n    }\n  }, [open]);\n\n  useEffect(() => {\n    setReadonly(\n      !appInfo.isInstructor || requestRow?.status_name !== \"SUBMITTED\"\n    );\n  }, [appInfo, requestRow]);\n\n  /** Handles submission of the form data */\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n    if (requestRow && actionStatus) {\n      const submission: RequestUpdateData = {\n        request_id: requestRow.request_id,\n        status_name: actionStatus,\n      };\n      if (actionStatus === \"REJECTED\") {\n        submission.instructor_comment = comment;\n      }\n      handleSave(submission);\n    }\n  };\n\n  const handleActionChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newStatus = e.target.value as RequestStatus;\n    if (newStatus === \"ACCEPTED\") {\n      setComment(\"\");\n    }\n    setActionStatus(newStatus);\n  };\n\n  const handleCommentChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const commentVal = e.target.value;\n    setComment(commentVal);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {requestRow && (\n        <Box p={2}>\n          <form onSubmit={onSubmit}>\n            <DialogTitle>Review Request</DialogTitle>\n            <DialogContent>\n              <Box mb={3}>\n                <DialogContentText>\n                  Review or take action on a token request.\n                </DialogContentText>\n              </Box>\n\n              {/* REQUEST DATE */}\n              <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                <Box mr={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>Date:</Typography>\n                  </FormLabel>\n                </Box>\n                <Typography>{formatDbDate(requestRow.created_at)}</Typography>\n              </Box>\n              {/* LEARNER NAME */}\n              <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                <Box mr={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>Requester:</Typography>\n                  </FormLabel>\n                </Box>\n                <Typography>{requestRow.learner_name}</Typography>\n              </Box>\n              {/* REQUEST TYPE */}\n              <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                <Box mr={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>Type:</Typography>\n                  </FormLabel>\n                </Box>\n                <Typography>{requestRow.category_name}</Typography>\n                <Box ml={1}>\n                  <TokenGraphic size=\"small\" count={requestRow.token_cost} />\n                </Box>\n              </Box>\n              {/* REQUESTER COMMENT */}\n              <Box display={\"flex\"} flexDirection={\"column\"} mt={1} mb={2}>\n                <Box mb={2}>\n                  <FormLabel>\n                    <Typography fontWeight={\"bold\"}>\n                      Requester Description:\n                    </Typography>\n                  </FormLabel>\n                </Box>\n                <Box pl={2}>\n                  <TextField\n                    fullWidth\n                    aria-label=\"Description of request as made by the requester\"\n                    value={requestRow.learner_comment || \"\"}\n                    multiline\n                    minRows={1}\n                    maxRows={6}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Box>\n              {/* INSTRUCTOR ACTION CHOICE */}\n              {readonly ? (\n                <Box>\n                  {/* DISPLAY ACTION TAKEN */}\n                  <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                    <Box mr={2}>\n                      <FormLabel>\n                        <Typography fontWeight={\"bold\"}>\n                          Instructor Action:\n                        </Typography>\n                      </FormLabel>\n                    </Box>\n                    <StatusName status={requestRow.status_name} />\n                  </Box>\n                  {/* DISPLAY ACTION TAKEN */}\n                  {requestRow.status_name !== \"SUBMITTED\" && (\n                    <Box display={\"flex\"} mt={1} mb={2} alignItems={\"center\"}>\n                      <Box mr={2}>\n                        <FormLabel>\n                          <Typography fontWeight={\"bold\"}>\n                            Action Date:\n                          </Typography>\n                        </FormLabel>\n                      </Box>\n                      <Typography>\n                        {formatDbDate(requestRow.status_updated_at)}\n                      </Typography>\n                    </Box>\n                  )}\n                  {requestRow.status_name === \"REJECTED\" && (\n                    <Box\n                      display={\"flex\"}\n                      flexDirection={\"column\"}\n                      mt={1}\n                      mb={2}\n                    >\n                      {/* INSTRUCTOR COMMENT */}\n                      <Box mb={2}>\n                        <FormLabel>\n                          <Typography fontWeight={\"bold\"}>\n                            Instructor Comment:\n                          </Typography>\n                        </FormLabel>\n                      </Box>\n                      <Box pl={2}>\n                        <TextField\n                          fullWidth\n                          aria-label=\"A comment on the request made by the instructor\"\n                          value={requestRow.instructor_comment || \"\"}\n                          multiline\n                          minRows={1}\n                          maxRows={6}\n                          InputProps={{\n                            readOnly: true,\n                          }}\n                        />\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              ) : (\n                <Box>\n                  <FormControl>\n                    <FormLabel>\n                      <Typography fontWeight={\"bold\"}>\n                        Instructor Action:\n                      </Typography>\n                    </FormLabel>\n                    <Box pl={2}>\n                      <RadioGroup\n                        id=\"instructor-action\"\n                        name=\"instructor-action\"\n                        aria-labelledby=\"instructor-action\"\n                        onChange={handleActionChange}\n                      >\n                        <FormControlLabel\n                          value=\"ACCEPTED\"\n                          control={<Radio required />}\n                          label=\"Accept\"\n                        />\n                        <FormControlLabel\n                          value=\"REJECTED\"\n                          control={<Radio required />}\n                          label=\"Reject\"\n                        />\n                      </RadioGroup>\n                    </Box>\n                  </FormControl>\n                  {actionStatus === \"REJECTED\" && (\n                    <Box\n                      display={\"flex\"}\n                      flexDirection={\"column\"}\n                      mt={1}\n                      mb={2}\n                    >\n                      <Box mb={2}>\n                        <FormLabel>\n                          <Typography fontWeight={\"bold\"}>\n                            Instructor Comment:\n                          </Typography>\n                        </FormLabel>\n                      </Box>\n                      <Box pl={2}>\n                        <TextField\n                          fullWidth\n                          required\n                          aria-label=\"An input for the instructor to comment on the request\"\n                          multiline\n                          rows={6}\n                          value={comment}\n                          onChange={handleCommentChange}\n                        />\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} variant=\"outlined\">\n                {readonly ? \"Close\" : \"Cancel\"}\n              </Button>\n              {!readonly && (\n                <Button variant=\"contained\" type=\"submit\">\n                  Save\n                </Button>\n              )}\n            </DialogActions>\n          </form>\n        </Box>\n      )}\n    </Dialog>\n  );\n}\n\nexport default ReviewDialog;\n","import {\n  Add,\n  Cancel,\n  InfoOutlined,\n  KeyboardArrowDown,\n  KeyboardArrowUp,\n} from \"@mui/icons-material\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  InputLabel,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { useCallback, useEffect } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { DB_DATE_TIME_FORMAT } from \"../utils/constants\";\nimport { TokensSettings } from \"../utils/types\";\n\ninterface SettingsDialogProps {\n  handleClose: (event?: object, reason?: string) => void;\n  handleSave: (newSettings: TokensSettings) => void;\n  open: boolean;\n  settings: TokensSettings | null;\n}\n\n/** Show settings form */\nfunction SettingsDialog(props: SettingsDialogProps) {\n  const { handleClose, handleSave, open, settings } = props;\n\n  // Form management\n  const {\n    control,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm<TokensSettings>({\n    defaultValues: {\n      categories: [\n        {\n          category_name: \"Missed Class\",\n          token_cost: 1,\n          dbAction: \"ADD\",\n          sort_order: 0,\n        },\n        {\n          category_name: \"Late Assignment\",\n          token_cost: 1,\n          dbAction: \"ADD\",\n          sort_order: 1,\n        },\n      ],\n    },\n  });\n  const { fields, append, move, update, remove } = useFieldArray({\n    control, // control props comes from useForm (optional: if you are using FormContext)\n    name: \"categories\", // unique name for your Field Array\n  });\n\n  const pref = watch(\"notifications_pref\", true);\n\n  const initValues = useCallback(\n    (settings: TokensSettings) => {\n      const formattedDate = DateTime.fromFormat(\n        settings.use_by_date,\n        DB_DATE_TIME_FORMAT\n      ).toISODate();\n      setValue(\"configuration_id\", settings.configuration_id);\n      setValue(\"initial_tokens\", settings.initial_tokens);\n      setValue(\"notifications_pref\", settings.notifications_pref);\n      setValue(\"use_by_date\", formattedDate);\n      setValue(\"categories\", settings.categories);\n    },\n    [setValue]\n  );\n\n  useEffect(() => {\n    if (settings && open) {\n      initValues(settings);\n    }\n  }, [settings, open, initValues]);\n\n  const moveCategoryUp = (i: number) => {\n    move(i, i - 1);\n  };\n\n  const moveCategoryDown = (i: number) => {\n    move(i, i + 1);\n  };\n\n  /** Append a new empty category to the form */\n  const handleAddCategory = () => {\n    append({ sort_order: fields.length });\n  };\n\n  /** Indicates whether less than the minimum number of categories exists */\n  const onlyOneCategoryExists = () => {\n    const validCategories = fields.filter((category) => {\n      return category.dbAction !== \"DELETE\";\n    });\n    return validCategories.length <= 1;\n  };\n\n  /** Marks a category for deletion */\n  const handleDeleteCategory = (index: number) => {\n    if (fields[index].category_id) {\n      fields[index].dbAction = \"DELETE\";\n      update(index, {\n        ...fields[index],\n        dbAction: \"DELETE\",\n      });\n    } else {\n      remove(index);\n    }\n  };\n\n  /** Handles submission of the form data */\n  const onSubmit = (data: TokensSettings) => {\n    // Assemble main data\n    const settingsToSubmit: TokensSettings = {\n      configuration_id: settings?.configuration_id,\n      initial_tokens:\n        typeof data.initial_tokens === \"number\"\n          ? data.initial_tokens\n          : parseInt(data.initial_tokens),\n      use_by_date: data.use_by_date,\n      notifications_pref: data.notifications_pref,\n      categories: data.categories,\n    };\n    // Update any category dbActions and sortOrder\n    settingsToSubmit.categories.forEach((category, i) => {\n      category.sort_order = i;\n      if (category.category_id && !category.dbAction) {\n        category.dbAction = \"UPDATE\";\n      } else if (!category.category_id && !category.dbAction) {\n        category.dbAction = \"ADD\";\n      }\n    });\n    handleSave(settingsToSubmit);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <Box p={2}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <DialogTitle>Instructor Settings</DialogTitle>\n          <DialogContent>\n            {settings && (\n              <Box mb={3}>\n                <DialogContentText>\n                  View or update the settings for your token economy.\n                </DialogContentText>\n              </Box>\n            )}\n            {/* INITIAL TOKEN COUNT */}\n            <Box display={\"flex\"} mt={1} mb={2}>\n              <Box minWidth={300} width={300} mr={2} mt={1}>\n                <InputLabel htmlFor=\"token-count\" sx={{ whiteSpace: \"normal\" }}>\n                  <Typography fontWeight={\"bold\"}>\n                    Amount of tokens to be available for each student:\n                  </Typography>\n                </InputLabel>\n              </Box>\n              <Box minWidth={150} width={150}>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  size=\"small\"\n                  id=\"token-count\"\n                  type=\"number\"\n                  error={!!errors.initial_tokens}\n                  InputLabelProps={{ shrink: false }}\n                  InputProps={{\n                    inputProps: {\n                      style: { textAlign: \"center\" },\n                    },\n                  }}\n                  {...register(\"initial_tokens\", {\n                    required: true,\n                    pattern: /^[0-9]+$/,\n                    min: 1,\n                  })}\n                  helperText={\n                    errors.initial_tokens && \"Must be a positive whole number\"\n                  }\n                />\n              </Box>\n            </Box>\n            {/* EXPIRATION / USE BY DATE */}\n            <Box display={\"flex\"} mb={2}>\n              <Box minWidth={300} mr={2} mt={2}>\n                <InputLabel htmlFor=\"use-by-date\">\n                  <Typography fontWeight={\"bold\"}>\n                    Date that tokens must be used by:\n                  </Typography>\n                </InputLabel>\n              </Box>\n              <Box>\n                <TextField\n                  margin=\"dense\"\n                  size=\"small\"\n                  id=\"use-by-date\"\n                  type=\"date\"\n                  error={!!errors.use_by_date}\n                  InputLabelProps={{ shrink: false }}\n                  {...register(\"use_by_date\", {\n                    required: true,\n                  })}\n                  helperText={errors.use_by_date && \"Must be a valid date\"}\n                />\n              </Box>\n            </Box>\n            {/* EMAIL NOTIFICATIONS */}\n            <Box mb={2}>\n              <Box\n                display={\"flex\"}\n                justifyContent={\"start\"}\n                alignItems={\"center\"}\n              >\n                <Box mr={3}>\n                  <InputLabel htmlFor=\"email-pref\">\n                    <Typography fontWeight={\"bold\"}>\n                      Email notifications:\n                    </Typography>\n                  </InputLabel>\n                </Box>\n                <Checkbox\n                  color=\"default\"\n                  // Make sure it is a boolean or it will change between defined/undefined (uncontrolled)\n                  checked={!!pref}\n                  inputProps={{\n                    \"aria-label\": \"Email notifications preference checkbox\",\n                  }}\n                  {...register(\"notifications_pref\")}\n                />\n              </Box>\n              <Box mb={3}>\n                <Typography variant=\"body2\">\n                  Receive emails when students use tokens.\n                </Typography>\n              </Box>\n            </Box>\n            {/* CATEGORY SELECTION */}\n            <Box display={\"flex\"} flexDirection={\"column\"}>\n              <Box display={\"flex\"}>\n                <Box minWidth={330} mr={2}>\n                  <InputLabel htmlFor=\"category-name-input-0\">\n                    <Typography fontWeight={\"bold\"}>Categories:</Typography>\n                  </InputLabel>\n                </Box>\n                <Box\n                  minWidth={150}\n                  width={150}\n                  display={\"flex\"}\n                  alignItems={\"center\"}\n                >\n                  <Tooltip\n                    title=\"The amount of tokens a student would need to spend.\"\n                    placement=\"top\"\n                  >\n                    <InfoOutlined sx={{ mr: 1 }} fontSize=\"small\" />\n                  </Tooltip>\n                  <InputLabel htmlFor=\"category-token-input-0\">\n                    <Typography fontWeight={\"bold\"}>Token Cost:</Typography>\n                  </InputLabel>\n                </Box>\n              </Box>\n              <Box display={\"flex\"} flexDirection={\"column\"}>\n                {fields.map((category, i) => {\n                  return (\n                    <Box key={category.id}>\n                      {/* Categories are only shown if not marked for deletion */}\n                      {category.dbAction !== \"DELETE\" && (\n                        <Box display={\"flex\"}>\n                          <Box>\n                            <IconButton\n                              size=\"small\"\n                              disabled={i === 0}\n                              disableRipple\n                              onClick={() => moveCategoryUp(i)}\n                            >\n                              <KeyboardArrowUp fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                              size=\"small\"\n                              disabled={i === fields.length - 1}\n                              disableRipple\n                              onClick={() => moveCategoryDown(i)}\n                            >\n                              <KeyboardArrowDown fontSize=\"small\" />\n                            </IconButton>\n                          </Box>\n                          <Box minWidth={300} mr={2}>\n                            <TextField\n                              margin=\"dense\"\n                              size=\"small\"\n                              id={`category-name-${i}`}\n                              type=\"text\"\n                              placeholder=\"Enter category name...\"\n                              InputLabelProps={{ shrink: false }}\n                              InputProps={{\n                                inputProps: { style: { minWidth: 250 } },\n                              }}\n                              helperText={\n                                errors.categories?.[i]?.category_name &&\n                                \"A category name is required\"\n                              }\n                              //   error\n                              error={!!errors.categories?.[i]?.category_name}\n                              {...register(`categories.${i}.category_name`, {\n                                required: true,\n                              })}\n                            />\n                          </Box>\n                          <Box\n                            display={\"flex\"}\n                            alignItems={\"start\"}\n                            minWidth={200}\n                          >\n                            <Box minWidth={150} width={150}>\n                              <TextField\n                                disabled={category.is_used}\n                                margin=\"dense\"\n                                size=\"small\"\n                                id={`category-token-${i}`}\n                                type=\"number\"\n                                InputLabelProps={{ shrink: false }}\n                                InputProps={{\n                                  inputProps: {\n                                    style: { textAlign: \"center\" },\n                                  },\n                                }}\n                                error={!!errors.categories?.[i]?.token_cost}\n                                helperText={\n                                  errors.categories?.[i]?.token_cost &&\n                                  \"Must be a positive whole number\"\n                                }\n                                {...register(`categories.${i}.token_cost`, {\n                                  required: true,\n                                  pattern: /^[0-9]+$/,\n                                  min: 1,\n                                })}\n                              />\n                            </Box>\n                            <Box ml={1} mt={1}>\n                              <Tooltip\n                                title={\n                                  category.is_used\n                                    ? \"Category is associated with a request and cannot be deleted\"\n                                    : \"\"\n                                }\n                              >\n                                <div>\n                                  <IconButton\n                                    disabled={\n                                      category.is_used ||\n                                      onlyOneCategoryExists()\n                                    }\n                                    onClick={() => handleDeleteCategory(i)}\n                                  >\n                                    <Cancel />\n                                  </IconButton>\n                                </div>\n                              </Tooltip>\n                            </Box>\n                          </Box>\n                        </Box>\n                      )}\n                    </Box>\n                  );\n                })}\n              </Box>\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Add />}\n                  onClick={handleAddCategory}\n                >\n                  New Category\n                </Button>\n              </Box>\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            {settings?.configuration_id && (\n              <Button onClick={handleClose} variant=\"outlined\">\n                Cancel\n              </Button>\n            )}\n            <Button variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Box>\n    </Dialog>\n  );\n}\n\nexport default SettingsDialog;\n","import { Box } from \"@mui/material\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\n/** Generic wrapper for tab panel content */\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport default TabPanel;\n","import { NotificationImportant, Settings } from \"@mui/icons-material\";\nimport { Badge, Box, IconButton, Tab, Tabs, Tooltip } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport BalancesTable from \"../components/BalancesTable\";\nimport HistoryTable from \"../components/HistoryTable\";\nimport RequestsTable from \"../components/RequestsTable\";\nimport ReviewDialog from \"../components/ReviewDialog\";\nimport SettingsDialog from \"../components/SettingsDialog\";\nimport TabPanel from \"../components/TabPanel\";\nimport {\n  addSettings,\n  getAllBalances,\n  getInstructorSettings,\n  getSubmittedRequests,\n  updateRequest,\n  updateSettings,\n} from \"../utils/api-connector\";\nimport { FILTERS } from \"../utils/constants\";\nimport {\n  a11yProps,\n  compareDateTime,\n  sortBalancesByPriority,\n} from \"../utils/helpers\";\nimport {\n  BalancesTableRow,\n  HistoryTableRow,\n  RequestsTableRow,\n  RequestUpdateData,\n  TokensSettings,\n} from \"../utils/types\";\n\nfunction InstructorView() {\n  const [tabPosition, setTabPosition] = useState(0);\n  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);\n  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);\n  const [settings, setSettings] = useState<TokensSettings | null>();\n  const [requestMap, setRequestMap] = useState<Map<string, number>>(new Map());\n  const [balanceRows, setBalanceRows] = useState<BalancesTableRow[]>([]);\n  const [requestRows, setRequestRows] = useState<RequestsTableRow[]>([]);\n  const [historyRows, setHistoryRows] = useState<HistoryTableRow[]>([]);\n  const [requestInReview, setRequestInReview] = useState<RequestsTableRow>();\n\n  useEffect(() => {\n    fetchAndAssembleData();\n  }, []);\n\n  useEffect(() => {\n    // When request data loads, assemble a mapping of who has pending requests\n    const newRequestMap = new Map();\n    requestRows.forEach((request) => {\n      if (newRequestMap.get(request.user_id)) {\n        newRequestMap.set(\n          request.user_id,\n          // Increment to reflect the count of pending requests\n          newRequestMap.get(request.user_id) + 1\n        );\n      } else {\n        newRequestMap.set(request.user_id, 1);\n      }\n    });\n    setRequestMap(newRequestMap);\n  }, [requestRows]);\n\n  useEffect(() => {\n    // When the mapping of pending requests is set, retrieve and sort the balance table rows\n    if (requestMap.size && settings) {\n      getAllBalances().then((balances) => {\n        const sortedBalances = sortBalancesByPriority(balances, requestMap);\n        sortedBalances.forEach((row) => {\n          row.pendingRequests = requestMap.get(row.user_id);\n          row.balance = (settings.initial_tokens || 0) - (row.tokens_used || 0);\n        });\n        setBalanceRows(sortedBalances);\n      });\n    }\n  }, [requestMap, settings]);\n\n  useEffect(() => {\n    // If undefined, setting data may still be loading, but if null, response was received and config doesn't exist, so open the dialog\n    if (settings === null) {\n      setSettingsDialogOpen(true);\n    }\n  }, [settings]);\n\n  /** Retrieve and sort data for the requests and history tables\n   *  Balances table rows are set after loading the request data\n   *  since the balances table needs to know about pending requests\n   */\n  const fetchAndAssembleData = async () => {\n    // Retrieve and set Tokens Settings\n    const fetchedSettings = await getInstructorSettings();\n    setSettings(fetchedSettings);\n\n    // Retrieve and set rows for the Requests Table\n    const fetchedRequestRows = await getSubmittedRequests();\n    // Sort all by timestamp (requests and history will show newest first)\n    fetchedRequestRows.sort(compareDateTime);\n\n    const newlySubmittedRequests = fetchedRequestRows.filter((row) => {\n      return row.status_name === \"SUBMITTED\";\n    });\n    // newlySubmittedRequests.sort(compareLastNames);\n    setRequestRows(newlySubmittedRequests);\n    setHistoryRows(fetchedRequestRows);\n  };\n\n  // Tab management\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabPosition(newValue);\n  };\n\n  // Dialog management\n  const handleOpenSettingsDialog = () => {\n    setSettingsDialogOpen(true);\n  };\n\n  const handleOpenReviewDialogFromRequests = (requestId: string) => {\n    setRequestInReview(\n      requestRows.find((request) => request.request_id === requestId)\n    );\n    setReviewDialogOpen(true);\n  };\n\n  const handleOpenReviewDialogFromHistory = (requestId: string) => {\n    setRequestInReview(\n      historyRows.find((request) => request.request_id === requestId)\n    );\n    setReviewDialogOpen(true);\n  };\n\n  const handleCloseSettingsDialog = (event?: object, reason?: string) => {\n    const reasonsToStayOpen = [\"backdropClick\", \"escapeKeyDown\"];\n    if (reason && reasonsToStayOpen.includes(reason)) {\n      return;\n    }\n    setSettingsDialogOpen(false);\n  };\n\n  const handleCloseReviewDialog = (event?: object, reason?: string) => {\n    const reasonsToStayOpen = [\"backdropClick\", \"escapeKeyDown\"];\n    if (reason && reasonsToStayOpen.includes(reason)) {\n      return;\n    }\n    setReviewDialogOpen(false);\n  };\n\n  const handleSaveSettingsDialog = async (newSettings: TokensSettings) => {\n    // Need to take the new data, send the update, and fetch the new settings\n    if (newSettings.configuration_id) {\n      await updateSettings(newSettings);\n    } else {\n      await addSettings(newSettings);\n    }\n    // Close the dialog\n    setSettingsDialogOpen(false);\n    // Fetch the new/updated settings to refresh the UI\n    const retrievedSettings = await getInstructorSettings();\n    setSettings(retrievedSettings);\n  };\n\n  const handleSaveReviewDialog = async (reviewData: RequestUpdateData) => {\n    // Close the dialog\n    setReviewDialogOpen(false);\n    // Send the update\n    await updateRequest(reviewData);\n    // Refresh the data in the UI\n    await fetchAndAssembleData();\n  };\n\n  return (\n    <>\n      {settings && (\n        <Box>\n          <Box display={\"flex\"} justifyContent={\"end\"} mr={1} mb={2}>\n            <Tooltip title=\"There are pending requests requiring review\">\n              <IconButton onClick={() => setTabPosition(1)}>\n                <Badge badgeContent={requestRows.length} color=\"warning\">\n                  <NotificationImportant />\n                </Badge>\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Review or update Tokens settings\">\n              <IconButton onClick={handleOpenSettingsDialog}>\n                <Settings />\n              </IconButton>\n            </Tooltip>\n          </Box>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <Tabs\n              value={tabPosition}\n              onChange={handleTabChange}\n              aria-label=\"basic tabs example\"\n            >\n              <Tab label=\"Balances\" {...a11yProps(0)} />\n              <Tab label=\"Requests\" {...a11yProps(1)} />\n              <Tab label=\"History\" {...a11yProps(2)} />\n            </Tabs>\n          </Box>\n          <TabPanel value={tabPosition} index={0}>\n            <BalancesTable rows={balanceRows} setTabPosition={setTabPosition} />\n          </TabPanel>\n          <TabPanel value={tabPosition} index={1}>\n            <RequestsTable\n              rows={requestRows}\n              openReviewDialog={handleOpenReviewDialogFromRequests}\n            />\n          </TabPanel>\n          <TabPanel value={tabPosition} index={2}>\n            <HistoryTable\n              rows={historyRows}\n              filters={FILTERS.INSTRUCTOR.HISTORY}\n              openReviewDialog={handleOpenReviewDialogFromHistory}\n            />\n          </TabPanel>\n        </Box>\n      )}\n      {/* DIALOGS */}\n      <SettingsDialog\n        handleClose={handleCloseSettingsDialog}\n        handleSave={handleSaveSettingsDialog}\n        open={settingsDialogOpen}\n        settings={settings || null}\n      />\n      <ReviewDialog\n        handleClose={handleCloseReviewDialog}\n        handleSave={handleSaveReviewDialog}\n        open={reviewDialogOpen}\n        requestRow={requestInReview || null}\n      />\n    </>\n  );\n}\n\nexport default InstructorView;\n","import { Box, Typography } from \"@mui/material\";\nimport TokenGraphic from \"./TokenGraphic\";\n\ninterface RequestBalanceProps {\n  balance: number;\n}\n\n/** Show learner's balance info */\nfunction RequestBalance(props: RequestBalanceProps) {\n  const { balance } = props;\n  return (\n    <Box>\n      <Box mb={4} display={\"flex\"} justifyContent={\"center\"}>\n        <Typography fontSize={30}>Token Balance</Typography>\n      </Box>\n      <Box display={\"flex\"} justifyContent={\"center\"}>\n        <TokenGraphic count={balance} size=\"large\" />\n      </Box>\n    </Box>\n  );\n}\n\nexport default RequestBalance;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@mui/material\";\n\ninterface ConfirmationDialogProps {\n  handleClose: () => void;\n  handleConfirm: () => void;\n  open: boolean;\n}\n\nexport default function ConfirmationDialog(props: ConfirmationDialogProps) {\n  const { handleClose, handleConfirm, open } = props;\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"confirmation-dialog-title\"\n        aria-describedby=\"confirmation-dialog-description\"\n      >\n        <DialogTitle id=\"confirmation-dialog-title\">Confirmation</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"confirmation-dialog-description\">\n            Are you sure you want to submit this token request?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button onClick={handleConfirm} autoFocus variant={\"contained\"}>\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import { Box, Button, TextField, Typography } from \"@mui/material\";\nimport { Dispatch, FormEvent, SetStateAction, useState } from \"react\";\nimport { addRequest } from \"../utils/api-connector\";\nimport { TokensCategory } from \"../utils/types\";\nimport ConfirmationDialog from \"./ConfirmationDialog\";\nimport TokenGraphic from \"./TokenGraphic\";\n\ninterface RequestFormProps {\n  balance: number;\n  categories: TokensCategory[];\n  updateBalance: Dispatch<SetStateAction<number>>;\n  resetBalance: () => void;\n  refreshData: () => Promise<void>;\n}\n\n/** Show learner's token request form */\nfunction RequestForm(props: RequestFormProps) {\n  const { balance, categories, updateBalance, resetBalance, refreshData } =\n    props;\n  const sortedCategories = categories.sort((a, b) => {\n    return a.sort_order - b.sort_order;\n  });\n  const [openDialog, setOpenDialog] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<TokensCategory>();\n  const [learnerComment, setLearnerComment] = useState<string>(\"\");\n\n  const handleSelectCategory = (category: TokensCategory) => {\n    updateBalance(balance - category.token_cost);\n    setSelectedCategory(category);\n  };\n\n  const handleCancelRequest = () => {\n    setSelectedCategory(undefined);\n    resetBalance();\n  };\n\n  const handleSubmitRequest = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setOpenDialog(true);\n  };\n\n  const handleConfirmDialog = async () => {\n    if (selectedCategory?.category_id && learnerComment) {\n      setOpenDialog(false);\n      // API call to submit request - it will ensure it does not result in negative balance\n      await addRequest(selectedCategory.category_id, learnerComment);\n      // Refresh the data (rows at learner view level)\n      await refreshData();\n      // This will make a submission message appear that the learner can dismiss\n      setSubmitted(true);\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleDismissConfirmation = () => {\n    setSelectedCategory(undefined);\n    setSubmitted(false);\n  };\n\n  return (\n    <Box>\n      {!selectedCategory ? (\n        <>\n          <Box mb={4}>\n            <Typography fontSize={30}>Request</Typography>\n          </Box>\n          <Box mb={4}>\n            <Typography>\n              Use tokens by selecting one of the requests below.\n            </Typography>\n          </Box>\n          <Box display={\"flex\"} flexDirection={\"column\"}>\n            {sortedCategories.map((category) => (\n              <Button\n                disabled={balance - category.token_cost < 0}\n                key={`category-${category.category_id}`}\n                size=\"large\"\n                sx={{ mb: 2 }}\n                variant=\"contained\"\n                onClick={() => handleSelectCategory(category)}\n              >\n                <Box\n                  display={\"flex\"}\n                  justifyContent={\"space-between\"}\n                  width={\"100%\"}\n                  alignItems={\"center\"}\n                >\n                  <Typography textTransform={\"none\"}>\n                    {category.category_name}\n                  </Typography>\n                  <TokenGraphic\n                    count={category.token_cost}\n                    size=\"small\"\n                    disabled={balance - category.token_cost < 0}\n                  />\n                </Box>\n              </Button>\n            ))}\n          </Box>\n        </>\n      ) : (\n        <>\n          {!submitted ? (\n            <form onSubmit={handleSubmitRequest}>\n              <Box mb={4}>\n                <Typography fontSize={30}>Request</Typography>\n              </Box>\n              <Box mb={4}>\n                <Box display={\"flex\"} alignItems={\"center\"} mb={2}>\n                  <Typography sx={{ mr: 2 }} variant=\"h6\">\n                    {selectedCategory.category_name}\n                  </Typography>\n                  <TokenGraphic\n                    count={selectedCategory.token_cost}\n                    size=\"small\"\n                  />\n                </Box>\n                <Typography>\n                  Please list the details of the activity on which you plan to\n                  use your token{selectedCategory.token_cost > 1 && \"s\"}:\n                </Typography>\n              </Box>\n              <Box display={\"flex\"} flexDirection={\"column\"}>\n                <TextField\n                  fullWidth\n                  required\n                  aria-label=\"Details about the request to be submitted\"\n                  multiline\n                  rows={4}\n                  onChange={(e) => setLearnerComment(e.target.value)}\n                />\n              </Box>\n              <Box display={\"flex\"} justifyContent={\"end\"} pt={2}>\n                <Button\n                  onClick={handleCancelRequest}\n                  variant=\"outlined\"\n                  sx={{ mr: 1 }}\n                >\n                  Cancel\n                </Button>\n                <Button variant=\"contained\" type=\"submit\">\n                  Submit\n                </Button>\n              </Box>\n            </form>\n          ) : (\n            <>\n              <Box mb={4}>\n                <Typography fontSize={30}>Submitted</Typography>\n              </Box>\n              <Box mb={4}>\n                <Box display={\"flex\"} alignItems={\"center\"} mb={2}>\n                  <Typography sx={{ mr: 2 }} variant=\"h6\">\n                    {selectedCategory.category_name}\n                  </Typography>\n                  <TokenGraphic\n                    count={selectedCategory.token_cost}\n                    size=\"small\"\n                  />\n                </Box>\n                <Typography sx={{ mb: 2 }}>\n                  Your request has been submitted to the instructor for review.\n                </Typography>\n                <Typography>\n                  If they have any further questions about your request, they\n                  will reach out via email.\n                </Typography>\n              </Box>\n              <Box display={\"flex\"} justifyContent={\"end\"} pt={2}>\n                <Button onClick={handleDismissConfirmation} variant=\"contained\">\n                  Dismiss\n                </Button>\n              </Box>\n            </>\n          )}\n        </>\n      )}\n      <ConfirmationDialog\n        handleClose={handleCloseDialog}\n        handleConfirm={handleConfirmDialog}\n        open={openDialog}\n      />\n    </Box>\n  );\n}\n\nexport default RequestForm;\n","import { Box } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { TokensSettings } from \"../utils/types\";\nimport RequestBalance from \"./RequestBalance\";\nimport RequestForm from \"./RequestForm\";\n\ninterface RequestDashboardProps {\n  balance: number;\n  settings: TokensSettings;\n  refreshData: () => Promise<void>;\n}\n\n/** Where a learner can create/submit a request */\nfunction RequestDashboard(props: RequestDashboardProps) {\n  const { balance, settings, refreshData } = props;\n  const [activeCount, setActiveCount] = useState(balance);\n\n  useEffect(() => {\n    setActiveCount(balance);\n  }, [balance]);\n\n  const resetBalance = () => {\n    setActiveCount(balance);\n  };\n\n  return (\n    <Box display={\"flex\"} justifyContent={\"space-around\"} pt={3}>\n      <Box width={\"55%\"}>\n        <RequestBalance balance={activeCount} />\n      </Box>\n      <Box width={\"45%\"}>\n        <RequestForm\n          balance={activeCount}\n          updateBalance={setActiveCount}\n          categories={settings.categories}\n          resetBalance={resetBalance}\n          refreshData={refreshData}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nexport default RequestDashboard;\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport HistoryTable from \"../components/HistoryTable\";\nimport RequestDashboard from \"../components/RequestDashboard\";\nimport ReviewDialog from \"../components/ReviewDialog\";\nimport TabPanel from \"../components/TabPanel\";\nimport {\n  getLearnerRequestHistory,\n  getLearnerSettings,\n} from \"../utils/api-connector\";\nimport { FILTERS } from \"../utils/constants\";\nimport { a11yProps, compareDateTime } from \"../utils/helpers\";\nimport {\n  HistoryTableRow,\n  RequestsTableRow,\n  TokensSettings,\n} from \"../utils/types\";\n\nfunction LearnerView() {\n  const [settings, setSettings] = useState<TokensSettings | null>();\n  const [tabPosition, setTabPosition] = useState(0);\n  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);\n  const [historyRows, setHistoryRows] = useState<HistoryTableRow[]>([]);\n  const [requestInReview, setRequestInReview] = useState<RequestsTableRow>();\n  const [learnerBalance, setLearnerBalance] = useState<number>(0);\n\n  useEffect(() => {\n    fetchAndAssembleData();\n  }, []);\n\n  const fetchAndAssembleData = async () => {\n    // Retrieve and set Tokens Settings\n    const fetchedSettings = await getLearnerSettings();\n    setSettings(fetchedSettings);\n    // Retrieve and set rows for the Requests Table\n    const fetchedRequestRows = await getLearnerRequestHistory();\n    // Sort all by timestamp (requests and history will show newest first)\n    fetchedRequestRows.sort(compareDateTime);\n    setHistoryRows(fetchedRequestRows);\n\n    if (fetchedSettings) {\n      const tokensUsed = fetchedRequestRows.reduce((a, b) => {\n        if (b.status_name === \"REJECTED\") {\n          return a;\n        } else {\n          return a + b.token_cost;\n        }\n      }, 0);\n      setLearnerBalance(fetchedSettings.initial_tokens - tokensUsed);\n    }\n  };\n\n  // Tab management\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabPosition(newValue);\n  };\n\n  // Dialog management\n  const handleOpenReviewDialogFromHistory = (requestId: string) => {\n    setRequestInReview(\n      historyRows.find((request) => request.request_id === requestId)\n    );\n    setReviewDialogOpen(true);\n  };\n\n  const handleCloseReviewDialog = (event?: object, reason?: string) => {\n    const reasonsToStayOpen = [\"backdropClick\", \"escapeKeyDown\"];\n    if (reason && reasonsToStayOpen.includes(reason)) {\n      return;\n    }\n    setReviewDialogOpen(false);\n  };\n  return (\n    <>\n      {settings && (\n        <Box>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <Tabs\n              value={tabPosition}\n              onChange={handleTabChange}\n              aria-label=\"basic tabs example\"\n            >\n              <Tab label=\"Request\" {...a11yProps(0)} />\n              <Tab label=\"History\" {...a11yProps(1)} />\n            </Tabs>\n          </Box>\n          <TabPanel value={tabPosition} index={0}>\n            <RequestDashboard\n              settings={settings}\n              balance={learnerBalance}\n              refreshData={fetchAndAssembleData}\n            />\n          </TabPanel>\n          <TabPanel value={tabPosition} index={1}>\n            <HistoryTable\n              rows={historyRows}\n              filters={FILTERS.LEARNER.HISTORY}\n              openReviewDialog={handleOpenReviewDialogFromHistory}\n            />\n          </TabPanel>\n        </Box>\n      )}\n      <ReviewDialog\n        handleClose={handleCloseReviewDialog}\n        handleSave={() => {}}\n        open={reviewDialogOpen}\n        requestRow={requestInReview || null}\n      />\n    </>\n  );\n}\n\nexport default LearnerView;\n","import {\n  Box,\n  ThemeProvider,\n  createTheme,\n  CssBaseline,\n  // useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport DevPanel from \"./components/DevPanel\";\nimport Header from \"./components/Header\";\nimport { getInfo } from \"./utils/api-connector\";\nimport { AppContext } from \"./utils/context\";\nimport { getAppConfig, getEnvironment } from \"./utils/helpers\";\nimport { LtiAppInfo } from \"./utils/types\";\nimport InstructorView from \"./views/InstructorView\";\nimport LearnerView from \"./views/LearnerView\";\n\nfunction App() {\n  const [appConfig, setAppconfig] = useState<LtiAppInfo>();\n\n  useEffect(() => {\n    console.info(`Running in cra environment: ${getEnvironment()}`);\n    getInfo().then((info) => {\n      if (info && typeof info !== \"string\") {\n        console.info(`Application configuration information retrieved`);\n        /** Information about the environment used to create the react app */\n        const config = getAppConfig(info);\n        setAppconfig(config);\n      } else {\n        console.error(\"Unable to retrieve App Info - Session may be expired\");\n      }\n    });\n  }, []);\n\n  /** An indication that the user has set (on a compatible browser) that they prefer dark mode */\n  // const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  /** The default primary color (used if no other primary color is specified) */\n  const defaultPrimary = useTheme().palette.primary.main;\n  /** Theme customizations */\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: appConfig?.baseColor || defaultPrimary,\n      },\n      mode: appConfig?.darkMode ? \"dark\" : \"light\",\n    },\n    components: {\n      MuiTableCell: {\n        styleOverrides: {\n          head: {\n            fontWeight: \"bold\",\n          },\n        },\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        {appConfig && (\n          <AppContext.Provider value={appConfig}>\n            <Box display={\"flex\"} className=\"App-header\">\n              <Box\n                width={\"100%\"}\n                p={4}\n                height={\"100vh\"}\n                display={\"flex\"}\n                flexDirection={\"column\"}\n              >\n                <Header />\n                <Box>\n                  {/* Condition for views? */}\n                  {appConfig.isInstructor ? (\n                    <InstructorView />\n                  ) : (\n                    <LearnerView />\n                  )}\n                </Box>\n              </Box>\n            </Box>\n          </AppContext.Provider>\n        )}\n      </div>\n      {/* Only show dev panel for local development */}\n      {getEnvironment() === \"pre_build\" && <DevPanel />}\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Theme } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport {\n  APP_INFO_OVERRIDES,\n  DB_DATE_TIME_FORMAT,\n  EnvConfig,\n} from \"./constants\";\nimport {\n  BalancesTableRow,\n  CraEnvironment,\n  DecoratedWindow,\n  GeneralTableRow,\n  HistoryTableRow,\n  LtiAppInfo,\n  RequestStatus,\n  SortOrder,\n} from \"./types\";\n\nexport const getAppConfig = (appInfo: LtiAppInfo): LtiAppInfo => {\n  const environment = getEnvironment();\n  let overrides = {};\n  // The client-side configuration will override the server properties, if set\n  if (environment === \"pre_build\") {\n    overrides = APP_INFO_OVERRIDES;\n  }\n  const config: LtiAppInfo = {\n    ...appInfo,\n    ...EnvConfig[environment],\n    ...overrides,\n  };\n  return config;\n};\n\nexport const getEnvironment = (): CraEnvironment => {\n  const environment =\n    (process?.env.REACT_APP_ENV as CraEnvironment) || \"production\";\n  return environment;\n};\n\nexport const getSessionId = (): string => {\n  const appConfig = (window as DecoratedWindow).appConfig || null;\n  return appConfig?.sessionId || \"\";\n};\n\nexport const getStatusColors = (theme: Theme) => {\n  const statusColors: Record<RequestStatus, string> = {\n    ACCEPTED: theme.palette.success.main,\n    PENDING: theme.palette.warning.main,\n    REJECTED: theme.palette.error.main,\n    SUBMITTED: theme.palette.warning.main,\n  };\n  return statusColors;\n};\n\n// SORTING\n\nconst compareStrings = (a: string, b: string) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nexport const compareRowLastNames = (a: GeneralTableRow, b: GeneralTableRow) => {\n  return compareLastNames(a.learner_name, b.learner_name);\n};\n\nexport const compareLastNames = (a: string, b: string) => {\n  const splitA = a.split(\" \");\n  const splitB = b.split(\" \");\n  const lastA = splitA[splitA.length - 1];\n  const lastB = splitB[splitB.length - 1];\n  return lastA === lastB\n    ? compareStrings(splitA[0], splitB[0])\n    : compareStrings(lastA, lastB);\n};\n\nexport const compareDateTime = (a: HistoryTableRow, b: HistoryTableRow) => {\n  return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime();\n};\n\nexport const sortBalancesByPriority = (\n  rows: BalancesTableRow[],\n  requestMap: Map<string, number>\n) => {\n  rows.sort(compareRowLastNames);\n  // Now that rows are sorted, divide them by 'SUBMITTED' status\n  const pending: BalancesTableRow[] = [];\n  const resolved: BalancesTableRow[] = [];\n  rows.forEach((row) => {\n    if (requestMap.get(row.user_id)) {\n      // User has a pending request and should be prioritized\n      pending.push(row);\n    } else {\n      // User does not have a pending request\n      resolved.push(row);\n    }\n  });\n  return [...pending, ...resolved];\n};\n\nconst descendingComparator = <T>(a: T, b: T, orderBy: keyof T) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const getComparator = <Key extends keyof GeneralTableRow>(\n  order: SortOrder,\n  orderBy: Key\n): ((\n  a: GeneralTableRow,\n  b: GeneralTableRow\n  // a: { [key in Key]: number | string },\n  // b: { [key in Key]: number | string }\n) => number) => {\n  if (orderBy === \"learner_name\") {\n    return order === \"desc\"\n      ? (a, b) => -compareRowLastNames(a, b)\n      : (a, b) => compareRowLastNames(a, b);\n  } else {\n    return order === \"desc\"\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n};\n\n/** Compatible with IE 11, https://mui.com/material-ui/react-table/ */\nexport const stableSort = <T>(\n  array: readonly T[],\n  comparator: (a: T, b: T) => number\n) => {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n};\n\nexport function a11yProps(index: number) {\n  return {\n    id: `tab-${index}`,\n    \"aria-controls\": `tabpanel-${index}`,\n  };\n}\n\nexport function formatDbDate(dateString: string, format?: string) {\n  return DateTime.fromFormat(dateString, DB_DATE_TIME_FORMAT).toLocaleString(\n    DateTime.DATETIME_MED || format\n  );\n}\n","import { compareLastNames, getSessionId } from \"./helpers\";\nimport {\n  CraEnvironment,\n  FilterConfig,\n  LtiAppInfo,\n  LtiSessionConfig,\n  RequestStatus,\n} from \"./types\";\n\n/** For use during local development for two reasons.\n * 1. Since you cannot retrieve the sessionId from the react server\n * 2. So you don't have to rely on updating the server to check different scenarios tied to the appInfo\n */\nexport const APP_INFO_OVERRIDES: Partial<LtiAppInfo> = {\n  // apiUrl: \"\",\n  // contextId: \"\",\n  // isInstructor: true,\n  // linkId: \"\",\n  sessionId: \"81bb972c22521a7bc673b422cdb78544\", // Learner session\n  // sessionId: \"fc005a750622fcca1115ba267f0266f9\", // Instructor session\n  // username: \"\",\n  // darkMode: true,\n  // baseColor: \"#6B5B95\", // DRK PRPL\n  baseColor: \"#0E4466\", // DRK TEAL\n  // baseColor: \"#FFADAD\", // LIGHT SALMON\n  // baseColor: \"#B3ADFF\", // LIGHT BLUE\n};\n\nconst sessionId = getSessionId();\n\nexport const EnvConfig: Record<CraEnvironment, LtiSessionConfig> = {\n  pre_build: {\n    apiUrl: \"/learning-apps/mod/mod-tokens/api/index.php\",\n    sessionId: APP_INFO_OVERRIDES.sessionId || \"\",\n  },\n  local_build: {\n    apiUrl: \"/learning-apps/mod/mod-tokens/api/index.php\",\n    sessionId,\n  },\n  deployed_build: {\n    apiUrl: \"/mod/tokens/api/index.php\",\n    sessionId,\n  },\n};\n\nexport const DB_DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n// Filters\ninterface Filters {\n  INSTRUCTOR: InstructorFilters;\n  LEARNER: LearnerFilters;\n}\ninterface InstructorFilters {\n  BALANCES: FilterConfig[];\n  REQUESTS: FilterConfig[];\n  HISTORY: FilterConfig[];\n}\n\ninterface LearnerFilters {\n  HISTORY: FilterConfig[];\n}\nexport const FILTERS: Filters = {\n  INSTRUCTOR: {\n    BALANCES: [\n      {\n        column: \"learner_name\",\n        label: \"Learner Name\",\n        type: \"enum\",\n        sort: compareLastNames,\n      },\n    ],\n    REQUESTS: [\n      {\n        column: \"category_name\",\n        label: \"Request Type\",\n        type: \"enum\",\n      },\n      {\n        column: \"learner_name\",\n        label: \"Learner Name\",\n        type: \"enum\",\n        sort: compareLastNames,\n      },\n    ],\n    HISTORY: [\n      {\n        column: \"category_name\",\n        label: \"Request Type\",\n        type: \"enum\",\n      },\n      //   {\n      //     column: \"created_at\",\n      //     label: \"Request Date\",\n      //     type: \"date\",\n      //     // default: \"\",\n      //   },\n      {\n        column: \"status_name\",\n        label: \"Status\",\n        type: \"enum\",\n        valueMapping: (val: RequestStatus) => {\n          if (val === \"SUBMITTED\") {\n            return \"Pending\";\n          } else {\n            return val.charAt(0).toUpperCase() + val.slice(1).toLowerCase();\n          }\n        },\n      },\n      {\n        column: \"learner_name\",\n        label: \"Learner Name\",\n        type: \"enum\",\n        sort: compareLastNames,\n      },\n      //   {\n      //     column: \"learner_comment\",\n      //     label: \"Description\",\n      //     type: \"text\",\n      //     default: [],\n      //   },\n    ],\n  },\n  LEARNER: {\n    HISTORY: [\n      {\n        column: \"category_name\",\n        label: \"Request Type\",\n        type: \"enum\",\n      },\n      {\n        column: \"status_name\",\n        label: \"Status\",\n        type: \"enum\",\n        valueMapping: (val: RequestStatus) => {\n          if (val === \"SUBMITTED\") {\n            return \"Pending\";\n          } else {\n            return val.charAt(0).toUpperCase() + val.slice(1).toLowerCase();\n          }\n        },\n      },\n    ],\n  },\n};\n"],"sourceRoot":""}